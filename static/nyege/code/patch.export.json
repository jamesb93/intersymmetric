{
  "desc": {
    "parameters": [
      {
        "type": "ParameterTypeNumber",
        "index": 0,
        "name": "numberobj_01_value",
        "paramId": "p_obj-3/p_obj-14/number_obj-19/value",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 16,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "numberobj_a1_s02",
        "meta": ""
      },
      {
        "type": "ParameterTypeNumber",
        "index": 1,
        "name": "numberobj_02_value",
        "paramId": "p_obj-3/p_obj-14/number_obj-18/value",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "numberobj_a1_s01",
        "meta": ""
      },
      {
        "type": "ParameterTypeNumber",
        "index": 2,
        "name": "numberobj_03_value",
        "paramId": "p_obj-3/p_obj-16/number_obj-19/value",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 16,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "numberobj_a1_s02",
        "meta": ""
      },
      {
        "type": "ParameterTypeNumber",
        "index": 3,
        "name": "numberobj_04_value",
        "paramId": "p_obj-3/p_obj-16/number_obj-18/value",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "numberobj_a1_s01",
        "meta": ""
      },
      {
        "type": "ParameterTypeNumber",
        "index": 4,
        "name": "numberobj_05_value",
        "paramId": "p_obj-3/p_obj-17/number_obj-19/value",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 16,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "numberobj_a1_s02",
        "meta": ""
      },
      {
        "type": "ParameterTypeNumber",
        "index": 5,
        "name": "numberobj_06_value",
        "paramId": "p_obj-3/p_obj-17/number_obj-18/value",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "numberobj_a1_s01",
        "meta": ""
      },
      {
        "type": "ParameterTypeNumber",
        "index": 6,
        "name": "numberobj_07_value",
        "paramId": "p_obj-3/p_obj-18/number_obj-19/value",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 16,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "numberobj_a1_s02",
        "meta": ""
      },
      {
        "type": "ParameterTypeNumber",
        "index": 7,
        "name": "numberobj_08_value",
        "paramId": "p_obj-3/p_obj-18/number_obj-18/value",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "numberobj_a1_s01",
        "meta": ""
      },
      {
        "type": "ParameterTypeBang",
        "index": 8,
        "name": "message_01_bangval",
        "paramId": "p_obj-17/p_obj-29/message_obj-5/bangval",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": false,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "message_s07",
        "meta": ""
      },
      {
        "type": "ParameterTypeBang",
        "index": 9,
        "name": "message_02_bangval",
        "paramId": "p_obj-17/p_obj-29/message_obj-7/bangval",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": false,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "message_s06",
        "meta": ""
      },
      {
        "type": "ParameterTypeBang",
        "index": 10,
        "name": "message_03_bangval",
        "paramId": "p_obj-17/p_obj-29/message_obj-20/bangval",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": false,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "message_s05",
        "meta": ""
      },
      {
        "type": "ParameterTypeBang",
        "index": 11,
        "name": "message_04_bangval",
        "paramId": "p_obj-17/p_obj-29/message_obj-24/bangval",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": false,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "message_s04",
        "meta": ""
      },
      {
        "type": "ParameterTypeBang",
        "index": 12,
        "name": "message_05_bangval",
        "paramId": "p_obj-17/p_obj-29/message_obj-26/bangval",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": false,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "message_s03",
        "meta": ""
      },
      {
        "type": "ParameterTypeBang",
        "index": 13,
        "name": "message_06_bangval",
        "paramId": "p_obj-17/p_obj-29/message_obj-27/bangval",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": false,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "message_s02",
        "meta": ""
      },
      {
        "type": "ParameterTypeBang",
        "index": 14,
        "name": "message_07_bangval",
        "paramId": "p_obj-17/p_obj-29/message_obj-28/bangval",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": false,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "message_s01",
        "meta": ""
      },
      {
        "type": "ParameterTypeNumber",
        "index": 15,
        "name": "toggle_01_value",
        "paramId": "p_obj-1/p_obj-2/toggle_obj-9/value",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "toggle_s01",
        "meta": ""
      },
      {
        "type": "ParameterTypeNumber",
        "index": 16,
        "name": "toggle_02_value",
        "paramId": "p_obj-1/p_obj-12/toggle_obj-9/value",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "toggle_s01",
        "meta": ""
      }
    ],
    "numParameters": 17,
    "numSignalInParameters": 0,
    "numSignalOutParameters": 0,
    "numInputChannels": 0,
    "numOutputChannels": 1,
    "numMidiInputPorts": 0,
    "numMidiOutputPorts": 0,
    "externalDataRefs": [
      {
        "id": "b.1",
        "type": "Float32Buffer"
      },
      {
        "id": "b.2",
        "type": "Float32Buffer"
      },
      {
        "id": "b.3",
        "type": "Float32Buffer"
      },
      {
        "id": "b.4",
        "type": "Float32Buffer"
      },
      {
        "id": "b.5",
        "type": "Float32Buffer"
      },
      {
        "id": "b.6",
        "type": "Float32Buffer"
      },
      {
        "id": "b.7",
        "type": "Float32Buffer"
      },
      {
        "id": "b.8",
        "type": "Float32Buffer"
      },
      {
        "id": "b.9",
        "type": "Float32Buffer"
      },
      {
        "id": "b.10",
        "type": "Float32Buffer"
      },
      {
        "id": "b.11",
        "type": "Float32Buffer"
      },
      {
        "id": "b.12",
        "type": "Float32Buffer"
      },
      {
        "id": "b.13",
        "type": "Float32Buffer"
      },
      {
        "id": "b.14",
        "type": "Float32Buffer"
      },
      {
        "id": "b.15",
        "type": "Float32Buffer"
      },
      {
        "id": "b.16",
        "type": "Float32Buffer"
      },
      {
        "id": "b.17",
        "type": "Float32Buffer"
      },
      {
        "id": "b.18",
        "type": "Float32Buffer"
      },
      {
        "id": "b.19",
        "type": "Float32Buffer"
      },
      {
        "id": "b.20",
        "type": "Float32Buffer"
      },
      {
        "id": "b.21",
        "type": "Float32Buffer"
      },
      {
        "id": "b.22",
        "type": "Float32Buffer"
      },
      {
        "id": "b.23",
        "type": "Float32Buffer"
      },
      {
        "id": "b.24",
        "type": "Float32Buffer"
      },
      {
        "id": "b.25",
        "type": "Float32Buffer"
      },
      {
        "id": "b.26",
        "type": "Float32Buffer"
      },
      {
        "id": "b.27",
        "type": "Float32Buffer"
      },
      {
        "id": "b.28",
        "type": "Float32Buffer"
      },
      {
        "id": "b.29",
        "type": "Float32Buffer"
      },
      {
        "id": "b.30",
        "type": "Float32Buffer"
      },
      {
        "id": "b.31",
        "type": "Float32Buffer"
      },
      {
        "id": "b.32",
        "type": "Float32Buffer"
      },
      {
        "id": "b.33",
        "type": "Float32Buffer"
      },
      {
        "id": "b.34",
        "type": "Float32Buffer"
      },
      {
        "id": "samples",
        "type": "Float32MultiBuffer"
      }
    ],
    "patcherSerial": 0,
    "inports": [
      "state",
      "rate",
      "global_cycle",
      "sampler_params",
      null
    ],
    "outports": [
      null
    ],
    "inlets": [],
    "outlets": [
      {
        "type": "signal",
        "index": 1,
        "tag": "out1"
      }
    ],
    "paramConversion": {
      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_22.getNumParameters())\n            return this.p_22.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_22.getNumParameters();\n\n        if (index < this.p_23.getNumParameters())\n            return this.p_23.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_23.getNumParameters();\n\n        if (index < this.p_24.getNumParameters())\n            return this.p_24.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_24.getNumParameters();\n\n        if (index < this.p_25.getNumParameters())\n            return this.p_25.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_25.getNumParameters();\n\n        if (index < this.p_26.getNumParameters())\n            return this.p_26.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_26.getNumParameters();\n\n        if (index < this.p_27.getNumParameters())\n            return this.p_27.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_27.getNumParameters();\n\n        if (index < this.p_28.getNumParameters())\n            return this.p_28.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_22.getNumParameters())\n            return this.p_22.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_22.getNumParameters();\n\n        if (index < this.p_23.getNumParameters())\n            return this.p_23.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_23.getNumParameters();\n\n        if (index < this.p_24.getNumParameters())\n            return this.p_24.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_24.getNumParameters();\n\n        if (index < this.p_25.getNumParameters())\n            return this.p_25.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_25.getNumParameters();\n\n        if (index < this.p_26.getNumParameters())\n            return this.p_26.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_26.getNumParameters();\n\n        if (index < this.p_27.getNumParameters())\n            return this.p_27.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_27.getNumParameters();\n\n        if (index < this.p_28.getNumParameters())\n            return this.p_28.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
      "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_22.getNumParameters() + this.p_23.getNumParameters() + this.p_24.getNumParameters() + this.p_25.getNumParameters() + this.p_26.getNumParameters() + this.p_27.getNumParameters() + this.p_28.getNumParameters();\n}",
      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_22.getNumParameters())\n            return this.p_22.constrainParameterValue(index, value);\n\n        index -= this.p_22.getNumParameters();\n\n        if (index < this.p_23.getNumParameters())\n            return this.p_23.constrainParameterValue(index, value);\n\n        index -= this.p_23.getNumParameters();\n\n        if (index < this.p_24.getNumParameters())\n            return this.p_24.constrainParameterValue(index, value);\n\n        index -= this.p_24.getNumParameters();\n\n        if (index < this.p_25.getNumParameters())\n            return this.p_25.constrainParameterValue(index, value);\n\n        index -= this.p_25.getNumParameters();\n\n        if (index < this.p_26.getNumParameters())\n            return this.p_26.constrainParameterValue(index, value);\n\n        index -= this.p_26.getNumParameters();\n\n        if (index < this.p_27.getNumParameters())\n            return this.p_27.constrainParameterValue(index, value);\n\n        index -= this.p_27.getNumParameters();\n\n        if (index < this.p_28.getNumParameters())\n            return this.p_28.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
      "subpatches": {
        "p_22": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_01.getNumParameters())\n            return this.p_01.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_01.getNumParameters();\n\n        if (index < this.p_02.getNumParameters())\n            return this.p_02.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_02.getNumParameters();\n\n        if (index < this.p_03.getNumParameters())\n            return this.p_03.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_03.getNumParameters();\n\n        if (index < this.p_04.getNumParameters())\n            return this.p_04.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_01.getNumParameters())\n            return this.p_01.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_01.getNumParameters();\n\n        if (index < this.p_02.getNumParameters())\n            return this.p_02.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_02.getNumParameters();\n\n        if (index < this.p_03.getNumParameters())\n            return this.p_03.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_03.getNumParameters();\n\n        if (index < this.p_04.getNumParameters())\n            return this.p_04.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_01.getNumParameters() + this.p_02.getNumParameters() + this.p_03.getNumParameters() + this.p_04.getNumParameters();\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_01.getNumParameters())\n            return this.p_01.constrainParameterValue(index, value);\n\n        index -= this.p_01.getNumParameters();\n\n        if (index < this.p_02.getNumParameters())\n            return this.p_02.constrainParameterValue(index, value);\n\n        index -= this.p_02.getNumParameters();\n\n        if (index < this.p_03.getNumParameters())\n            return this.p_03.constrainParameterValue(index, value);\n\n        index -= this.p_03.getNumParameters();\n\n        if (index < this.p_04.getNumParameters())\n            return this.p_04.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
          "subpatches": {
            "p_01": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_02": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_03": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_04": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            }
          },
          "isPolyphonic": false
        },
        "p_23": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "subpatches": {},
          "isPolyphonic": false
        },
        "p_24": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_09.getNumParameters())\n            return this.p_09.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_09.getNumParameters();\n\n        if (index < this.p_10.getNumParameters())\n            return this.p_10.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_10.getNumParameters();\n\n        if (index < this.p_11.getNumParameters())\n            return this.p_11.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_11.getNumParameters();\n\n        if (index < this.p_12.getNumParameters())\n            return this.p_12.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_09.getNumParameters())\n            return this.p_09.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_09.getNumParameters();\n\n        if (index < this.p_10.getNumParameters())\n            return this.p_10.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_10.getNumParameters();\n\n        if (index < this.p_11.getNumParameters())\n            return this.p_11.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_11.getNumParameters();\n\n        if (index < this.p_12.getNumParameters())\n            return this.p_12.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_09.getNumParameters() + this.p_10.getNumParameters() + this.p_11.getNumParameters() + this.p_12.getNumParameters();\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_09.getNumParameters())\n            return this.p_09.constrainParameterValue(index, value);\n\n        index -= this.p_09.getNumParameters();\n\n        if (index < this.p_10.getNumParameters())\n            return this.p_10.constrainParameterValue(index, value);\n\n        index -= this.p_10.getNumParameters();\n\n        if (index < this.p_11.getNumParameters())\n            return this.p_11.constrainParameterValue(index, value);\n\n        index -= this.p_11.getNumParameters();\n\n        if (index < this.p_12.getNumParameters())\n            return this.p_12.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
          "subpatches": {
            "p_09": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 0:\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n            return normalizedValue;\n        }\n    default:\n        index -= 2;\n\n        if (index < this.p_05.getNumParameters())\n            return this.p_05.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 0:\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    default:\n        index -= 2;\n\n        if (index < this.p_05.getNumParameters())\n            return this.p_05.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 2 + this.p_05.getNumParameters();\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 2;\n\n        if (index < this.p_05.getNumParameters())\n            return this.p_05.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
              "subpatches": {
                "p_05": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_10": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 0:\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n            return normalizedValue;\n        }\n    default:\n        index -= 2;\n\n        if (index < this.p_06.getNumParameters())\n            return this.p_06.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 0:\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    default:\n        index -= 2;\n\n        if (index < this.p_06.getNumParameters())\n            return this.p_06.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 2 + this.p_06.getNumParameters();\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 2;\n\n        if (index < this.p_06.getNumParameters())\n            return this.p_06.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
              "subpatches": {
                "p_06": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_11": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 0:\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n            return normalizedValue;\n        }\n    default:\n        index -= 2;\n\n        if (index < this.p_07.getNumParameters())\n            return this.p_07.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 0:\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    default:\n        index -= 2;\n\n        if (index < this.p_07.getNumParameters())\n            return this.p_07.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 2 + this.p_07.getNumParameters();\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 2;\n\n        if (index < this.p_07.getNumParameters())\n            return this.p_07.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
              "subpatches": {
                "p_07": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_12": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 0:\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n            return normalizedValue;\n        }\n    default:\n        index -= 2;\n\n        if (index < this.p_08.getNumParameters())\n            return this.p_08.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 0:\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    default:\n        index -= 2;\n\n        if (index < this.p_08.getNumParameters())\n            return this.p_08.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 2 + this.p_08.getNumParameters();\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 2;\n\n        if (index < this.p_08.getNumParameters())\n            return this.p_08.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
              "subpatches": {
                "p_08": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            }
          },
          "isPolyphonic": false
        },
        "p_25": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "subpatches": {},
          "isPolyphonic": false
        },
        "p_26": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_13.getNumParameters())\n            return this.p_13.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_13.getNumParameters();\n\n        if (index < this.p_14.getNumParameters())\n            return this.p_14.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_14.getNumParameters();\n\n        if (index < this.p_15.getNumParameters())\n            return this.p_15.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_13.getNumParameters())\n            return this.p_13.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_13.getNumParameters();\n\n        if (index < this.p_14.getNumParameters())\n            return this.p_14.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_14.getNumParameters();\n\n        if (index < this.p_15.getNumParameters())\n            return this.p_15.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_13.getNumParameters() + this.p_14.getNumParameters() + this.p_15.getNumParameters();\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_13.getNumParameters())\n            return this.p_13.constrainParameterValue(index, value);\n\n        index -= this.p_13.getNumParameters();\n\n        if (index < this.p_14.getNumParameters())\n            return this.p_14.constrainParameterValue(index, value);\n\n        index -= this.p_14.getNumParameters();\n\n        if (index < this.p_15.getNumParameters())\n            return this.p_15.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
          "subpatches": {
            "p_13": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_14": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_15": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 7;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            }
          },
          "isPolyphonic": false
        },
        "p_27": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_18.getNumParameters())\n            return this.p_18.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_18.getNumParameters();\n\n        if (index < this.p_19.getNumParameters())\n            return this.p_19.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_18.getNumParameters())\n            return this.p_18.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_18.getNumParameters();\n\n        if (index < this.p_19.getNumParameters())\n            return this.p_19.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_18.getNumParameters() + this.p_19.getNumParameters();\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_18.getNumParameters())\n            return this.p_18.constrainParameterValue(index, value);\n\n        index -= this.p_18.getNumParameters();\n\n        if (index < this.p_19.getNumParameters())\n            return this.p_19.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
          "subpatches": {
            "p_18": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n            return normalizedValue;\n        }\n    default:\n        index -= 1;\n\n        if (index < this.p_16.getNumParameters())\n            return this.p_16.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    default:\n        index -= 1;\n\n        if (index < this.p_16.getNumParameters())\n            return this.p_16.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 1 + this.p_16.getNumParameters();\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 1;\n\n        if (index < this.p_16.getNumParameters())\n            return this.p_16.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
              "subpatches": {
                "p_16": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_19": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n            return normalizedValue;\n        }\n    default:\n        index -= 1;\n\n        if (index < this.p_17.getNumParameters())\n            return this.p_17.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    default:\n        index -= 1;\n\n        if (index < this.p_17.getNumParameters())\n            return this.p_17.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 1 + this.p_17.getNumParameters();\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 1;\n\n        if (index < this.p_17.getNumParameters())\n            return this.p_17.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
              "subpatches": {
                "p_17": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            }
          },
          "isPolyphonic": false
        },
        "p_28": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_20.getNumParameters())\n            return this.p_20.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_20.getNumParameters();\n\n        if (index < this.p_21.getNumParameters())\n            return this.p_21.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_20.getNumParameters())\n            return this.p_20.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_20.getNumParameters();\n\n        if (index < this.p_21.getNumParameters())\n            return this.p_21.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_20.getNumParameters() + this.p_21.getNumParameters();\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_20.getNumParameters())\n            return this.p_20.constrainParameterValue(index, value);\n\n        index -= this.p_20.getNumParameters();\n\n        if (index < this.p_21.getNumParameters())\n            return this.p_21.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
          "subpatches": {
            "p_20": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_21": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            }
          },
          "isPolyphonic": false
        }
      },
      "isPolyphonic": false
    },
    "rnboVersion": "0.17.0-dev.40",
    "meta": {
      "architecture": "x64",
      "maxversion": "8.5.0",
      "filename": "nyege.maxpat"
    },
    "options": {
      "classname": "rnbomatic",
      "minifyOutput": true
    }
  },
  "src": "class RNBOSubpatcher_379{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(4),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.edge_01_setupDone=!1,this.gen_01_setupDone=!1,this.peek_tilde_01_buffer=0,this.ip_01_sigbuf=0,this.ip_01_setupDone=!1,this.latch_tilde_01_setupDone=!1,this.latch_tilde_02_setupDone=!1,this.ip_02_sigbuf=0,this.ip_02_setupDone=!1,this.peek_tilde_01_bufferobj=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 1}getNumOutputChannels(){return 1}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){switch(RNBO_UNUSED(s),RNBO_UNUSED(r),this.updateTime(e),t){case-611950441:this.edge_01_onout_bang();break;case-1584063977:this.edge_01_offout_bang()}}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"state\"):this.inport_01_value_number_set(s)}}processListMessage(e,t,r,s){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"state\"):this.inport_01_value_list_set(s)}}processBangMessage(e,t,r){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"state\"):this.inport_01_value_bang_bang()}}resolveTag(e){switch(e){case TAG(\"state\"):return\"state\";case TAG(\"\"):return\"\"}return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}zeroDataRef(e){e.setZero()}processDataViewUpdate(e,t){this.updateTime(t),-2!=e&&0!=e&&1!=e&&2!=e&&3!=e&&4!=e&&5!=e&&6!=e&&7!=e&&8!=e&&9!=e&&10!=e&&11!=e&&12!=e&&13!=e&&14!=e&&15!=e&&16!=e&&17!=e&&18!=e&&19!=e&&20!=e&&21!=e&&22!=e&&23!=e&&24!=e&&25!=e&&26!=e&&27!=e&&28!=e&&29!=e&&30!=e&&31!=e&&32!=e&&33!=e||(this.peek_tilde_01_buffer=new Float32MultiBuffer(this.peek_tilde_01_bufferobj))}initialize(){this.peek_tilde_01_bufferobj=initMultiRef(this.getPatcher().getPatcher().b_dot_1,this.getPatcher().getPatcher().b_dot_2,this.getPatcher().getPatcher().b_dot_3,this.getPatcher().getPatcher().b_dot_4,this.getPatcher().getPatcher().b_dot_5,this.getPatcher().getPatcher().b_dot_6,this.getPatcher().getPatcher().b_dot_7,this.getPatcher().getPatcher().b_dot_8,this.getPatcher().getPatcher().b_dot_9,this.getPatcher().getPatcher().b_dot_10,this.getPatcher().getPatcher().b_dot_11,this.getPatcher().getPatcher().b_dot_12,this.getPatcher().getPatcher().b_dot_13,this.getPatcher().getPatcher().b_dot_14,this.getPatcher().getPatcher().b_dot_15,this.getPatcher().getPatcher().b_dot_16,this.getPatcher().getPatcher().b_dot_17,this.getPatcher().getPatcher().b_dot_18,this.getPatcher().getPatcher().b_dot_19,this.getPatcher().getPatcher().b_dot_20,this.getPatcher().getPatcher().b_dot_21,this.getPatcher().getPatcher().b_dot_22,this.getPatcher().getPatcher().b_dot_23,this.getPatcher().getPatcher().b_dot_24,this.getPatcher().getPatcher().b_dot_25,this.getPatcher().getPatcher().b_dot_26,this.getPatcher().getPatcher().b_dot_27,this.getPatcher().getPatcher().b_dot_28,this.getPatcher().getPatcher().b_dot_29,this.getPatcher().getPatcher().b_dot_30,this.getPatcher().getPatcher().b_dot_31,this.getPatcher().getPatcher().b_dot_32,this.getPatcher().getPatcher().b_dot_33,this.getPatcher().getPatcher().b_dot_34),this.assign_defaults(),this.setState(),this.peek_tilde_01_bufferobj.setIndex(-2),this.peek_tilde_01_buffer=new Float32MultiBuffer(this.peek_tilde_01_bufferobj)}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_380{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(4),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.edge_02_setupDone=!1,this.gen_02_setupDone=!1,this.peek_tilde_02_buffer=0,this.ip_03_sigbuf=0,this.ip_03_setupDone=!1,this.latch_tilde_03_setupDone=!1,this.latch_tilde_04_setupDone=!1,this.ip_04_sigbuf=0,this.ip_04_setupDone=!1,this.peek_tilde_02_bufferobj=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 1}getNumOutputChannels(){return 1}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){switch(RNBO_UNUSED(s),RNBO_UNUSED(r),this.updateTime(e),t){case 1577528346:this.edge_02_onout_bang();break;case-1966461100:this.edge_02_offout_bang()}}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"state\"):this.inport_02_value_number_set(s)}}processListMessage(e,t,r,s){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"state\"):this.inport_02_value_list_set(s)}}processBangMessage(e,t,r){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"state\"):this.inport_02_value_bang_bang()}}resolveTag(e){switch(e){case TAG(\"state\"):return\"state\";case TAG(\"\"):return\"\"}return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}zeroDataRef(e){e.setZero()}processDataViewUpdate(e,t){this.updateTime(t),-2!=e&&0!=e&&1!=e&&2!=e&&3!=e&&4!=e&&5!=e&&6!=e&&7!=e&&8!=e&&9!=e&&10!=e&&11!=e&&12!=e&&13!=e&&14!=e&&15!=e&&16!=e&&17!=e&&18!=e&&19!=e&&20!=e&&21!=e&&22!=e&&23!=e&&24!=e&&25!=e&&26!=e&&27!=e&&28!=e&&29!=e&&30!=e&&31!=e&&32!=e&&33!=e||(this.peek_tilde_02_buffer=new Float32MultiBuffer(this.peek_tilde_02_bufferobj))}initialize(){this.peek_tilde_02_bufferobj=initMultiRef(this.getPatcher().getPatcher().b_dot_1,this.getPatcher().getPatcher().b_dot_2,this.getPatcher().getPatcher().b_dot_3,this.getPatcher().getPatcher().b_dot_4,this.getPatcher().getPatcher().b_dot_5,this.getPatcher().getPatcher().b_dot_6,this.getPatcher().getPatcher().b_dot_7,this.getPatcher().getPatcher().b_dot_8,this.getPatcher().getPatcher().b_dot_9,this.getPatcher().getPatcher().b_dot_10,this.getPatcher().getPatcher().b_dot_11,this.getPatcher().getPatcher().b_dot_12,this.getPatcher().getPatcher().b_dot_13,this.getPatcher().getPatcher().b_dot_14,this.getPatcher().getPatcher().b_dot_15,this.getPatcher().getPatcher().b_dot_16,this.getPatcher().getPatcher().b_dot_17,this.getPatcher().getPatcher().b_dot_18,this.getPatcher().getPatcher().b_dot_19,this.getPatcher().getPatcher().b_dot_20,this.getPatcher().getPatcher().b_dot_21,this.getPatcher().getPatcher().b_dot_22,this.getPatcher().getPatcher().b_dot_23,this.getPatcher().getPatcher().b_dot_24,this.getPatcher().getPatcher().b_dot_25,this.getPatcher().getPatcher().b_dot_26,this.getPatcher().getPatcher().b_dot_27,this.getPatcher().getPatcher().b_dot_28,this.getPatcher().getPatcher().b_dot_29,this.getPatcher().getPatcher().b_dot_30,this.getPatcher().getPatcher().b_dot_31,this.getPatcher().getPatcher().b_dot_32,this.getPatcher().getPatcher().b_dot_33,this.getPatcher().getPatcher().b_dot_34),this.assign_defaults(),this.setState(),this.peek_tilde_02_bufferobj.setIndex(-2),this.peek_tilde_02_buffer=new Float32MultiBuffer(this.peek_tilde_02_bufferobj)}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_381{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(4),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.edge_03_setupDone=!1,this.gen_03_setupDone=!1,this.peek_tilde_03_buffer=0,this.ip_05_sigbuf=0,this.ip_05_setupDone=!1,this.latch_tilde_05_setupDone=!1,this.latch_tilde_06_setupDone=!1,this.ip_06_sigbuf=0,this.ip_06_setupDone=!1,this.peek_tilde_03_bufferobj=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 1}getNumOutputChannels(){return 1}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){switch(RNBO_UNUSED(s),RNBO_UNUSED(r),this.updateTime(e),t){case 1577528346:this.edge_03_onout_bang();break;case-1966461100:this.edge_03_offout_bang()}}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"state\"):this.inport_03_value_number_set(s)}}processListMessage(e,t,r,s){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"state\"):this.inport_03_value_list_set(s)}}processBangMessage(e,t,r){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"state\"):this.inport_03_value_bang_bang()}}resolveTag(e){switch(e){case TAG(\"state\"):return\"state\";case TAG(\"\"):return\"\"}return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}zeroDataRef(e){e.setZero()}processDataViewUpdate(e,t){this.updateTime(t),-2!=e&&0!=e&&1!=e&&2!=e&&3!=e&&4!=e&&5!=e&&6!=e&&7!=e&&8!=e&&9!=e&&10!=e&&11!=e&&12!=e&&13!=e&&14!=e&&15!=e&&16!=e&&17!=e&&18!=e&&19!=e&&20!=e&&21!=e&&22!=e&&23!=e&&24!=e&&25!=e&&26!=e&&27!=e&&28!=e&&29!=e&&30!=e&&31!=e&&32!=e&&33!=e||(this.peek_tilde_03_buffer=new Float32MultiBuffer(this.peek_tilde_03_bufferobj))}initialize(){this.peek_tilde_03_bufferobj=initMultiRef(this.getPatcher().getPatcher().b_dot_1,this.getPatcher().getPatcher().b_dot_2,this.getPatcher().getPatcher().b_dot_3,this.getPatcher().getPatcher().b_dot_4,this.getPatcher().getPatcher().b_dot_5,this.getPatcher().getPatcher().b_dot_6,this.getPatcher().getPatcher().b_dot_7,this.getPatcher().getPatcher().b_dot_8,this.getPatcher().getPatcher().b_dot_9,this.getPatcher().getPatcher().b_dot_10,this.getPatcher().getPatcher().b_dot_11,this.getPatcher().getPatcher().b_dot_12,this.getPatcher().getPatcher().b_dot_13,this.getPatcher().getPatcher().b_dot_14,this.getPatcher().getPatcher().b_dot_15,this.getPatcher().getPatcher().b_dot_16,this.getPatcher().getPatcher().b_dot_17,this.getPatcher().getPatcher().b_dot_18,this.getPatcher().getPatcher().b_dot_19,this.getPatcher().getPatcher().b_dot_20,this.getPatcher().getPatcher().b_dot_21,this.getPatcher().getPatcher().b_dot_22,this.getPatcher().getPatcher().b_dot_23,this.getPatcher().getPatcher().b_dot_24,this.getPatcher().getPatcher().b_dot_25,this.getPatcher().getPatcher().b_dot_26,this.getPatcher().getPatcher().b_dot_27,this.getPatcher().getPatcher().b_dot_28,this.getPatcher().getPatcher().b_dot_29,this.getPatcher().getPatcher().b_dot_30,this.getPatcher().getPatcher().b_dot_31,this.getPatcher().getPatcher().b_dot_32,this.getPatcher().getPatcher().b_dot_33,this.getPatcher().getPatcher().b_dot_34),this.assign_defaults(),this.setState(),this.peek_tilde_03_bufferobj.setIndex(-2),this.peek_tilde_03_buffer=new Float32MultiBuffer(this.peek_tilde_03_bufferobj)}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_382{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(4),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.edge_04_setupDone=!1,this.gen_04_setupDone=!1,this.peek_tilde_04_buffer=0,this.ip_07_sigbuf=0,this.ip_07_setupDone=!1,this.latch_tilde_07_setupDone=!1,this.latch_tilde_08_setupDone=!1,this.ip_08_sigbuf=0,this.ip_08_setupDone=!1,this.peek_tilde_04_bufferobj=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 1}getNumOutputChannels(){return 1}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){switch(RNBO_UNUSED(s),RNBO_UNUSED(r),this.updateTime(e),t){case 1577528346:this.edge_04_onout_bang();break;case-1966461100:this.edge_04_offout_bang()}}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"state\"):this.inport_04_value_number_set(s)}}processListMessage(e,t,r,s){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"state\"):this.inport_04_value_list_set(s)}}processBangMessage(e,t,r){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"state\"):this.inport_04_value_bang_bang()}}resolveTag(e){switch(e){case TAG(\"state\"):return\"state\";case TAG(\"\"):return\"\"}return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}zeroDataRef(e){e.setZero()}processDataViewUpdate(e,t){this.updateTime(t),-2!=e&&0!=e&&1!=e&&2!=e&&3!=e&&4!=e&&5!=e&&6!=e&&7!=e&&8!=e&&9!=e&&10!=e&&11!=e&&12!=e&&13!=e&&14!=e&&15!=e&&16!=e&&17!=e&&18!=e&&19!=e&&20!=e&&21!=e&&22!=e&&23!=e&&24!=e&&25!=e&&26!=e&&27!=e&&28!=e&&29!=e&&30!=e&&31!=e&&32!=e&&33!=e||(this.peek_tilde_04_buffer=new Float32MultiBuffer(this.peek_tilde_04_bufferobj))}initialize(){this.peek_tilde_04_bufferobj=initMultiRef(this.getPatcher().getPatcher().b_dot_1,this.getPatcher().getPatcher().b_dot_2,this.getPatcher().getPatcher().b_dot_3,this.getPatcher().getPatcher().b_dot_4,this.getPatcher().getPatcher().b_dot_5,this.getPatcher().getPatcher().b_dot_6,this.getPatcher().getPatcher().b_dot_7,this.getPatcher().getPatcher().b_dot_8,this.getPatcher().getPatcher().b_dot_9,this.getPatcher().getPatcher().b_dot_10,this.getPatcher().getPatcher().b_dot_11,this.getPatcher().getPatcher().b_dot_12,this.getPatcher().getPatcher().b_dot_13,this.getPatcher().getPatcher().b_dot_14,this.getPatcher().getPatcher().b_dot_15,this.getPatcher().getPatcher().b_dot_16,this.getPatcher().getPatcher().b_dot_17,this.getPatcher().getPatcher().b_dot_18,this.getPatcher().getPatcher().b_dot_19,this.getPatcher().getPatcher().b_dot_20,this.getPatcher().getPatcher().b_dot_21,this.getPatcher().getPatcher().b_dot_22,this.getPatcher().getPatcher().b_dot_23,this.getPatcher().getPatcher().b_dot_24,this.getPatcher().getPatcher().b_dot_25,this.getPatcher().getPatcher().b_dot_26,this.getPatcher().getPatcher().b_dot_27,this.getPatcher().getPatcher().b_dot_28,this.getPatcher().getPatcher().b_dot_29,this.getPatcher().getPatcher().b_dot_30,this.getPatcher().getPatcher().b_dot_31,this.getPatcher().getPatcher().b_dot_32,this.getPatcher().getPatcher().b_dot_33,this.getPatcher().getPatcher().b_dot_34),this.assign_defaults(),this.setState(),this.peek_tilde_04_bufferobj.setIndex(-2),this.peek_tilde_04_buffer=new Float32MultiBuffer(this.peek_tilde_04_bufferobj)}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_400{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(4),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0,this.p_01=new Array,this.p_02=new Array,this.p_03=new Array,this.p_04=new Array}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 4}getNumOutputChannels(){return 1}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){this.p_01=new RNBOSubpatcher_379,this.p_01.setEngineAndPatcher(this.getEngine(),this),this.p_01.initialize(),this.p_01.setParameterOffset(this.getParameterOffset(this.p_01)),this.p_02=new RNBOSubpatcher_380,this.p_02.setEngineAndPatcher(this.getEngine(),this),this.p_02.initialize(),this.p_02.setParameterOffset(this.getParameterOffset(this.p_02)),this.p_03=new RNBOSubpatcher_381,this.p_03.setEngineAndPatcher(this.getEngine(),this),this.p_03.initialize(),this.p_03.setParameterOffset(this.getParameterOffset(this.p_03)),this.p_04=new RNBOSubpatcher_382,this.p_04.setEngineAndPatcher(this.getEngine(),this),this.p_04.initialize(),this.p_04.setParameterOffset(this.getParameterOffset(this.p_04))}processTempoEvent(e,t){this.updateTime(e),this.p_01.processTempoEvent(e,t),this.p_02.processTempoEvent(e,t),this.p_03.processTempoEvent(e,t),this.p_04.processTempoEvent(e,t)}processTransportEvent(e,t){this.updateTime(e),this.p_01.processTransportEvent(e,t),this.p_02.processTransportEvent(e,t),this.p_03.processTransportEvent(e,t),this.p_04.processTransportEvent(e,t)}processBeatTimeEvent(e,t){this.updateTime(e),this.p_01.processBeatTimeEvent(e,t),this.p_02.processBeatTimeEvent(e,t),this.p_03.processBeatTimeEvent(e,t),this.p_04.processBeatTimeEvent(e,t)}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){this.updateTime(e),this.p_01.processTimeSignatureEvent(e,t,r),this.p_02.processTimeSignatureEvent(e,t,r),this.p_03.processTimeSignatureEvent(e,t,r),this.p_04.processTimeSignatureEvent(e,t,r)}setParameterValue(e,t,r){RNBO_UNUSED(t),this.updateTime(r),(e-=0)<this.p_01.getNumParameters()&&this.p_01.setParameterValue(e,t,r),(e-=this.p_01.getNumParameters())<this.p_02.getNumParameters()&&this.p_02.setParameterValue(e,t,r),(e-=this.p_02.getNumParameters())<this.p_03.getNumParameters()&&this.p_03.setParameterValue(e,t,r),(e-=this.p_03.getNumParameters())<this.p_04.getNumParameters()&&this.p_04.setParameterValue(e,t,r)}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return(e-=0)<this.p_01.getNumParameters()?this.p_01.getParameterValue(e):(e-=this.p_01.getNumParameters())<this.p_02.getNumParameters()?this.p_02.getParameterValue(e):(e-=this.p_02.getNumParameters())<this.p_03.getNumParameters()?this.p_03.getParameterValue(e):(e-=this.p_03.getNumParameters())<this.p_04.getNumParameters()?this.p_04.getParameterValue(e):0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0+this.p_01.getNumParameters()+this.p_02.getNumParameters()+this.p_03.getNumParameters()+this.p_04.getNumParameters()}getParameterName(e){return(e-=0)<this.p_01.getNumParameters()?this.p_01.getParameterName(e):(e-=this.p_01.getNumParameters())<this.p_02.getNumParameters()?this.p_02.getParameterName(e):(e-=this.p_02.getNumParameters())<this.p_03.getNumParameters()?this.p_03.getParameterName(e):(e-=this.p_03.getNumParameters())<this.p_04.getNumParameters()?this.p_04.getParameterName(e):\"bogus\"}getParameterId(e){return(e-=0)<this.p_01.getNumParameters()?this.p_01.getParameterId(e):(e-=this.p_01.getNumParameters())<this.p_02.getNumParameters()?this.p_02.getParameterId(e):(e-=this.p_02.getNumParameters())<this.p_03.getNumParameters()?this.p_03.getParameterId(e):(e-=this.p_03.getNumParameters())<this.p_04.getNumParameters()?this.p_04.getParameterId(e):\"bogus\"}getParameterInfo(e,t){(e-=0)<this.p_01.getNumParameters()&&this.p_01.getParameterInfo(e,t),(e-=this.p_01.getNumParameters())<this.p_02.getNumParameters()&&this.p_02.getParameterInfo(e,t),(e-=this.p_02.getNumParameters())<this.p_03.getNumParameters()&&this.p_03.getParameterInfo(e,t),(e-=this.p_03.getNumParameters())<this.p_04.getNumParameters()&&this.p_04.getParameterInfo(e,t)}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}getParameterOffset(e){return e==this.p_01?0:e==this.p_02?0+this.p_01.getNumParameters():e==this.p_03?0+this.p_01.getNumParameters()+this.p_02.getNumParameters():e==this.p_04?0+this.p_01.getNumParameters()+this.p_02.getNumParameters()+this.p_03.getNumParameters():0}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return(e-=0)<this.p_01.getNumParameters()?this.p_01.convertToNormalizedParameterValue(e,t):(e-=this.p_01.getNumParameters())<this.p_02.getNumParameters()?this.p_02.convertToNormalizedParameterValue(e,t):(e-=this.p_02.getNumParameters())<this.p_03.getNumParameters()?this.p_03.convertToNormalizedParameterValue(e,t):(e-=this.p_03.getNumParameters())<this.p_04.getNumParameters()?this.p_04.convertToNormalizedParameterValue(e,t):t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t,(e-=0)<this.p_01.getNumParameters()?this.p_01.convertFromNormalizedParameterValue(e,t):(e-=this.p_01.getNumParameters())<this.p_02.getNumParameters()?this.p_02.convertFromNormalizedParameterValue(e,t):(e-=this.p_02.getNumParameters())<this.p_03.getNumParameters()?this.p_03.convertFromNormalizedParameterValue(e,t):(e-=this.p_03.getNumParameters())<this.p_04.getNumParameters()?this.p_04.convertFromNormalizedParameterValue(e,t):t}constrainParameterValue(e,t){return(e-=0)<this.p_01.getNumParameters()?this.p_01.constrainParameterValue(e,t):(e-=this.p_01.getNumParameters())<this.p_02.getNumParameters()?this.p_02.constrainParameterValue(e,t):(e-=this.p_02.getNumParameters())<this.p_03.getNumParameters()?this.p_03.constrainParameterValue(e,t):(e-=this.p_03.getNumParameters())<this.p_04.getNumParameters()?this.p_04.constrainParameterValue(e,t):t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"sampler_params\"):this.inport_05_value_number_set(s)}this.p_01.processNumMessage(e,t,r,s),this.p_02.processNumMessage(e,t,r,s),this.p_03.processNumMessage(e,t,r,s),this.p_04.processNumMessage(e,t,r,s)}processListMessage(e,t,r,s){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"sampler_params\"):this.inport_05_value_list_set(s)}this.p_01.processListMessage(e,t,r,s),this.p_02.processListMessage(e,t,r,s),this.p_03.processListMessage(e,t,r,s),this.p_04.processListMessage(e,t,r,s)}processBangMessage(e,t,r){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"sampler_params\"):this.inport_05_value_bang_bang()}this.p_01.processBangMessage(e,t,r),this.p_02.processBangMessage(e,t,r),this.p_03.processBangMessage(e,t,r),this.p_04.processBangMessage(e,t,r)}resolveTag(e){switch(e){case TAG(\"sampler_params\"):return\"sampler_params\";case TAG(\"\"):return\"\"}var t=this.p_01.resolveTag(e);if(t)return t;var r=this.p_02.resolveTag(e);if(r)return r;var s=this.p_03.resolveTag(e);if(s)return s;var a=this.p_04.resolveTag(e);return a||null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){this.p_01.processDataViewUpdate(e,t),this.p_02.processDataViewUpdate(e,t),this.p_03.processDataViewUpdate(e,t),this.p_04.processDataViewUpdate(e,t)}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_401{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.counter_01_phase=!0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){this.updateTime(e),this.metro_01_onTransportChanged(t)}processBeatTimeEvent(e,t){this.updateTime(e),this.metro_01_onBeatTimeChanged(t)}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){switch(RNBO_UNUSED(s),RNBO_UNUSED(r),this.updateTime(e),t){case 1935387534:this.metro_01_tick_bang()}}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_383{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(2),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.peakamp_01_setupDone=!1,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 1}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){switch(RNBO_UNUSED(r),this.updateTime(e),t){case 760652352:this.line_01_target_bang();break;case 1812006465:this.peakamp_01_output_set(s)}}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_387{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(2),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.click_01_buf=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0,this.p_05=new Array}getParameterIndexForID(e){return stringCompare(e,\"number_obj-19/value\")?stringCompare(e,\"number_obj-18/value\")?INVALID_INDEX:1:0}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 1}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){this.p_05=new RNBOSubpatcher_383,this.p_05.setEngineAndPatcher(this.getEngine(),this),this.p_05.initialize(),this.p_05.setParameterOffset(this.getParameterOffset(this.p_05))}processTempoEvent(e,t){this.updateTime(e),this.p_05.processTempoEvent(e,t)}processTransportEvent(e,t){this.updateTime(e),this.p_05.processTransportEvent(e,t)}processBeatTimeEvent(e,t){this.updateTime(e),this.p_05.processBeatTimeEvent(e,t)}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){this.updateTime(e),this.p_05.processTimeSignatureEvent(e,t,r)}setParameterValue(e,t,r){switch(this.updateTime(r),e){case 0:this.numberobj_01_value_set(t);break;case 1:this.numberobj_02_value_set(t);break;default:(e-=2)<this.p_05.getNumParameters()&&this.p_05.setParameterValue(e,t,r)}}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){switch(e){case 0:return this.numberobj_01_value;case 1:return this.numberobj_02_value;default:return(e-=2)<this.p_05.getNumParameters()?this.p_05.getParameterValue(e):0}}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 2+this.p_05.getNumParameters()}getParameterName(e){switch(e){case 0:return\"numberobj_01_value\";case 1:return\"numberobj_02_value\";default:return(e-=2)<this.p_05.getNumParameters()?this.p_05.getParameterName(e):\"bogus\"}}getParameterId(e){switch(e){case 0:return\"p_obj-3/p_obj-14/number_obj-19/value\";case 1:return\"p_obj-3/p_obj-14/number_obj-18/value\";default:return(e-=2)<this.p_05.getNumParameters()?this.p_05.getParameterId(e):\"bogus\"}}getParameterInfo(e,t){switch(e){case 0:t.type=ParameterTypeNumber,t.initialValue=16,t.min=0,t.max=1,t.exponent=1,t.steps=0,t.debug=!1,t.saveable=!0,t.transmittable=!0,t.initialized=!0,t.visible=!1,t.displayName=\"\",t.unit=\"\",t.ioType=IOTypeUndefined,t.signalIndex=INVALID_INDEX;break;case 1:t.type=ParameterTypeNumber,t.initialValue=1,t.min=0,t.max=1,t.exponent=1,t.steps=0,t.debug=!1,t.saveable=!0,t.transmittable=!0,t.initialized=!0,t.visible=!1,t.displayName=\"\",t.unit=\"\",t.ioType=IOTypeUndefined,t.signalIndex=INVALID_INDEX;break;default:(e-=2)<this.p_05.getNumParameters()&&this.p_05.getParameterInfo(e,t)}}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}getParameterOffset(e){return e==this.p_05?2:0}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){switch(e){case 0:case 1:return((t=t<0?0:t>1?1:t)-0)/1;default:return(e-=2)<this.p_05.getNumParameters()?this.p_05.convertToNormalizedParameterValue(e,t):t}}convertFromNormalizedParameterValue(e,t){switch(t=t<0?0:t>1?1:t,e){case 0:case 1:return 0+1*(t=t<0?0:t>1?1:t);default:return(e-=2)<this.p_05.getNumParameters()?this.p_05.convertFromNormalizedParameterValue(e,t):t}}constrainParameterValue(e,t){return(e-=2)<this.p_05.getNumParameters()?this.p_05.constrainParameterValue(e,t):t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){switch(RNBO_UNUSED(s),RNBO_UNUSED(r),this.updateTime(e),t){case 29237386:this.loadmess_01_startupbang_bang();break;case 892732297:this.loadmess_02_startupbang_bang()}}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){switch(this.updateTime(r),e){case TAG(\"format\"):TAG(\"p_obj-3/p_obj-14/number_obj-19\")==t&&this.numberobj_01_format_set(s),TAG(\"p_obj-3/p_obj-14/number_obj-18\")==t&&this.numberobj_02_format_set(s)}this.p_05.processNumMessage(e,t,r,s)}processListMessage(e,t,r,s){RNBO_UNUSED(t),this.updateTime(r),this.p_05.processListMessage(e,t,r,s)}processBangMessage(e,t,r){switch(this.updateTime(r),e){case TAG(\"startupbang\"):TAG(\"p_obj-3/p_obj-14/loadmess_obj-41\")==t&&this.loadmess_01_startupbang_bang(),TAG(\"p_obj-3/p_obj-14/loadmess_obj-4\")==t&&this.loadmess_02_startupbang_bang()}this.p_05.processBangMessage(e,t,r)}resolveTag(e){switch(e){case TAG(\"setup\"):return\"setup\";case TAG(\"p_obj-3/p_obj-14/number_obj-19\"):return\"p_obj-3/p_obj-14/number_obj-19\";case TAG(\"p_obj-3/p_obj-14/number_obj-18\"):return\"p_obj-3/p_obj-14/number_obj-18\";case TAG(\"format\"):return\"format\";case TAG(\"startupbang\"):return\"startupbang\";case TAG(\"p_obj-3/p_obj-14/loadmess_obj-41\"):return\"p_obj-3/p_obj-14/loadmess_obj-41\";case TAG(\"p_obj-3/p_obj-14/loadmess_obj-4\"):return\"p_obj-3/p_obj-14/loadmess_obj-4\"}var t=this.p_05.resolveTag(e);return t||null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){this.p_05.processDataViewUpdate(e,t)}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_384{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(2),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.peakamp_02_setupDone=!1,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 1}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){switch(RNBO_UNUSED(r),this.updateTime(e),t){case 760652352:this.line_02_target_bang();break;case 1812006465:this.peakamp_02_output_set(s)}}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_388{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(2),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.click_02_buf=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0,this.p_06=new Array}getParameterIndexForID(e){return stringCompare(e,\"number_obj-19/value\")?stringCompare(e,\"number_obj-18/value\")?INVALID_INDEX:1:0}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 1}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){this.p_06=new RNBOSubpatcher_384,this.p_06.setEngineAndPatcher(this.getEngine(),this),this.p_06.initialize(),this.p_06.setParameterOffset(this.getParameterOffset(this.p_06))}processTempoEvent(e,t){this.updateTime(e),this.p_06.processTempoEvent(e,t)}processTransportEvent(e,t){this.updateTime(e),this.p_06.processTransportEvent(e,t)}processBeatTimeEvent(e,t){this.updateTime(e),this.p_06.processBeatTimeEvent(e,t)}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){this.updateTime(e),this.p_06.processTimeSignatureEvent(e,t,r)}setParameterValue(e,t,r){switch(this.updateTime(r),e){case 0:this.numberobj_03_value_set(t);break;case 1:this.numberobj_04_value_set(t);break;default:(e-=2)<this.p_06.getNumParameters()&&this.p_06.setParameterValue(e,t,r)}}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){switch(e){case 0:return this.numberobj_03_value;case 1:return this.numberobj_04_value;default:return(e-=2)<this.p_06.getNumParameters()?this.p_06.getParameterValue(e):0}}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 2+this.p_06.getNumParameters()}getParameterName(e){switch(e){case 0:return\"numberobj_03_value\";case 1:return\"numberobj_04_value\";default:return(e-=2)<this.p_06.getNumParameters()?this.p_06.getParameterName(e):\"bogus\"}}getParameterId(e){switch(e){case 0:return\"p_obj-3/p_obj-16/number_obj-19/value\";case 1:return\"p_obj-3/p_obj-16/number_obj-18/value\";default:return(e-=2)<this.p_06.getNumParameters()?this.p_06.getParameterId(e):\"bogus\"}}getParameterInfo(e,t){switch(e){case 0:t.type=ParameterTypeNumber,t.initialValue=16,t.min=0,t.max=1,t.exponent=1,t.steps=0,t.debug=!1,t.saveable=!0,t.transmittable=!0,t.initialized=!0,t.visible=!1,t.displayName=\"\",t.unit=\"\",t.ioType=IOTypeUndefined,t.signalIndex=INVALID_INDEX;break;case 1:t.type=ParameterTypeNumber,t.initialValue=1,t.min=0,t.max=1,t.exponent=1,t.steps=0,t.debug=!1,t.saveable=!0,t.transmittable=!0,t.initialized=!0,t.visible=!1,t.displayName=\"\",t.unit=\"\",t.ioType=IOTypeUndefined,t.signalIndex=INVALID_INDEX;break;default:(e-=2)<this.p_06.getNumParameters()&&this.p_06.getParameterInfo(e,t)}}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}getParameterOffset(e){return e==this.p_06?2:0}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){switch(e){case 0:case 1:return((t=t<0?0:t>1?1:t)-0)/1;default:return(e-=2)<this.p_06.getNumParameters()?this.p_06.convertToNormalizedParameterValue(e,t):t}}convertFromNormalizedParameterValue(e,t){switch(t=t<0?0:t>1?1:t,e){case 0:case 1:return 0+1*(t=t<0?0:t>1?1:t);default:return(e-=2)<this.p_06.getNumParameters()?this.p_06.convertFromNormalizedParameterValue(e,t):t}}constrainParameterValue(e,t){return(e-=2)<this.p_06.getNumParameters()?this.p_06.constrainParameterValue(e,t):t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){switch(RNBO_UNUSED(s),RNBO_UNUSED(r),this.updateTime(e),t){case 29237386:this.loadmess_03_startupbang_bang();break;case 892732297:this.loadmess_04_startupbang_bang()}}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){switch(this.updateTime(r),e){case TAG(\"format\"):TAG(\"p_obj-3/p_obj-16/number_obj-19\")==t&&this.numberobj_03_format_set(s),TAG(\"p_obj-3/p_obj-16/number_obj-18\")==t&&this.numberobj_04_format_set(s)}this.p_06.processNumMessage(e,t,r,s)}processListMessage(e,t,r,s){RNBO_UNUSED(t),this.updateTime(r),this.p_06.processListMessage(e,t,r,s)}processBangMessage(e,t,r){switch(this.updateTime(r),e){case TAG(\"startupbang\"):TAG(\"p_obj-3/p_obj-16/loadmess_obj-41\")==t&&this.loadmess_03_startupbang_bang(),TAG(\"p_obj-3/p_obj-16/loadmess_obj-4\")==t&&this.loadmess_04_startupbang_bang()}this.p_06.processBangMessage(e,t,r)}resolveTag(e){switch(e){case TAG(\"setup\"):return\"setup\";case TAG(\"p_obj-3/p_obj-16/number_obj-19\"):return\"p_obj-3/p_obj-16/number_obj-19\";case TAG(\"p_obj-3/p_obj-16/number_obj-18\"):return\"p_obj-3/p_obj-16/number_obj-18\";case TAG(\"format\"):return\"format\";case TAG(\"startupbang\"):return\"startupbang\";case TAG(\"p_obj-3/p_obj-16/loadmess_obj-41\"):return\"p_obj-3/p_obj-16/loadmess_obj-41\";case TAG(\"p_obj-3/p_obj-16/loadmess_obj-4\"):return\"p_obj-3/p_obj-16/loadmess_obj-4\"}var t=this.p_06.resolveTag(e);return t||null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){this.p_06.processDataViewUpdate(e,t)}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_385{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(2),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.peakamp_03_setupDone=!1,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 1}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){switch(RNBO_UNUSED(r),this.updateTime(e),t){case 760652352:this.line_03_target_bang();break;case 1812006465:this.peakamp_03_output_set(s)}}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_389{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(2),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.click_03_buf=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0,this.p_07=new Array}getParameterIndexForID(e){return stringCompare(e,\"number_obj-19/value\")?stringCompare(e,\"number_obj-18/value\")?INVALID_INDEX:1:0}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 1}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){this.p_07=new RNBOSubpatcher_385,this.p_07.setEngineAndPatcher(this.getEngine(),this),this.p_07.initialize(),this.p_07.setParameterOffset(this.getParameterOffset(this.p_07))}processTempoEvent(e,t){this.updateTime(e),this.p_07.processTempoEvent(e,t)}processTransportEvent(e,t){this.updateTime(e),this.p_07.processTransportEvent(e,t)}processBeatTimeEvent(e,t){this.updateTime(e),this.p_07.processBeatTimeEvent(e,t)}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){this.updateTime(e),this.p_07.processTimeSignatureEvent(e,t,r)}setParameterValue(e,t,r){switch(this.updateTime(r),e){case 0:this.numberobj_05_value_set(t);break;case 1:this.numberobj_06_value_set(t);break;default:(e-=2)<this.p_07.getNumParameters()&&this.p_07.setParameterValue(e,t,r)}}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){switch(e){case 0:return this.numberobj_05_value;case 1:return this.numberobj_06_value;default:return(e-=2)<this.p_07.getNumParameters()?this.p_07.getParameterValue(e):0}}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 2+this.p_07.getNumParameters()}getParameterName(e){switch(e){case 0:return\"numberobj_05_value\";case 1:return\"numberobj_06_value\";default:return(e-=2)<this.p_07.getNumParameters()?this.p_07.getParameterName(e):\"bogus\"}}getParameterId(e){switch(e){case 0:return\"p_obj-3/p_obj-17/number_obj-19/value\";case 1:return\"p_obj-3/p_obj-17/number_obj-18/value\";default:return(e-=2)<this.p_07.getNumParameters()?this.p_07.getParameterId(e):\"bogus\"}}getParameterInfo(e,t){switch(e){case 0:t.type=ParameterTypeNumber,t.initialValue=16,t.min=0,t.max=1,t.exponent=1,t.steps=0,t.debug=!1,t.saveable=!0,t.transmittable=!0,t.initialized=!0,t.visible=!1,t.displayName=\"\",t.unit=\"\",t.ioType=IOTypeUndefined,t.signalIndex=INVALID_INDEX;break;case 1:t.type=ParameterTypeNumber,t.initialValue=1,t.min=0,t.max=1,t.exponent=1,t.steps=0,t.debug=!1,t.saveable=!0,t.transmittable=!0,t.initialized=!0,t.visible=!1,t.displayName=\"\",t.unit=\"\",t.ioType=IOTypeUndefined,t.signalIndex=INVALID_INDEX;break;default:(e-=2)<this.p_07.getNumParameters()&&this.p_07.getParameterInfo(e,t)}}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}getParameterOffset(e){return e==this.p_07?2:0}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){switch(e){case 0:case 1:return((t=t<0?0:t>1?1:t)-0)/1;default:return(e-=2)<this.p_07.getNumParameters()?this.p_07.convertToNormalizedParameterValue(e,t):t}}convertFromNormalizedParameterValue(e,t){switch(t=t<0?0:t>1?1:t,e){case 0:case 1:return 0+1*(t=t<0?0:t>1?1:t);default:return(e-=2)<this.p_07.getNumParameters()?this.p_07.convertFromNormalizedParameterValue(e,t):t}}constrainParameterValue(e,t){return(e-=2)<this.p_07.getNumParameters()?this.p_07.constrainParameterValue(e,t):t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){switch(RNBO_UNUSED(s),RNBO_UNUSED(r),this.updateTime(e),t){case 29237386:this.loadmess_05_startupbang_bang();break;case 892732297:this.loadmess_06_startupbang_bang()}}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){switch(this.updateTime(r),e){case TAG(\"format\"):TAG(\"p_obj-3/p_obj-17/number_obj-19\")==t&&this.numberobj_05_format_set(s),TAG(\"p_obj-3/p_obj-17/number_obj-18\")==t&&this.numberobj_06_format_set(s)}this.p_07.processNumMessage(e,t,r,s)}processListMessage(e,t,r,s){RNBO_UNUSED(t),this.updateTime(r),this.p_07.processListMessage(e,t,r,s)}processBangMessage(e,t,r){switch(this.updateTime(r),e){case TAG(\"startupbang\"):TAG(\"p_obj-3/p_obj-17/loadmess_obj-41\")==t&&this.loadmess_05_startupbang_bang(),TAG(\"p_obj-3/p_obj-17/loadmess_obj-4\")==t&&this.loadmess_06_startupbang_bang()}this.p_07.processBangMessage(e,t,r)}resolveTag(e){switch(e){case TAG(\"setup\"):return\"setup\";case TAG(\"p_obj-3/p_obj-17/number_obj-19\"):return\"p_obj-3/p_obj-17/number_obj-19\";case TAG(\"p_obj-3/p_obj-17/number_obj-18\"):return\"p_obj-3/p_obj-17/number_obj-18\";case TAG(\"format\"):return\"format\";case TAG(\"startupbang\"):return\"startupbang\";case TAG(\"p_obj-3/p_obj-17/loadmess_obj-41\"):return\"p_obj-3/p_obj-17/loadmess_obj-41\";case TAG(\"p_obj-3/p_obj-17/loadmess_obj-4\"):return\"p_obj-3/p_obj-17/loadmess_obj-4\"}var t=this.p_07.resolveTag(e);return t||null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){this.p_07.processDataViewUpdate(e,t)}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_386{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(2),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.peakamp_04_setupDone=!1,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 1}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){switch(RNBO_UNUSED(r),this.updateTime(e),t){case 760652352:this.line_04_target_bang();break;case 1812006465:this.peakamp_04_output_set(s)}}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_390{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(2),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.click_04_buf=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0,this.p_08=new Array}getParameterIndexForID(e){return stringCompare(e,\"number_obj-19/value\")?stringCompare(e,\"number_obj-18/value\")?INVALID_INDEX:1:0}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 1}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){this.p_08=new RNBOSubpatcher_386,this.p_08.setEngineAndPatcher(this.getEngine(),this),this.p_08.initialize(),this.p_08.setParameterOffset(this.getParameterOffset(this.p_08))}processTempoEvent(e,t){this.updateTime(e),this.p_08.processTempoEvent(e,t)}processTransportEvent(e,t){this.updateTime(e),this.p_08.processTransportEvent(e,t)}processBeatTimeEvent(e,t){this.updateTime(e),this.p_08.processBeatTimeEvent(e,t)}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){this.updateTime(e),this.p_08.processTimeSignatureEvent(e,t,r)}setParameterValue(e,t,r){switch(this.updateTime(r),e){case 0:this.numberobj_07_value_set(t);break;case 1:this.numberobj_08_value_set(t);break;default:(e-=2)<this.p_08.getNumParameters()&&this.p_08.setParameterValue(e,t,r)}}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){switch(e){case 0:return this.numberobj_07_value;case 1:return this.numberobj_08_value;default:return(e-=2)<this.p_08.getNumParameters()?this.p_08.getParameterValue(e):0}}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 2+this.p_08.getNumParameters()}getParameterName(e){switch(e){case 0:return\"numberobj_07_value\";case 1:return\"numberobj_08_value\";default:return(e-=2)<this.p_08.getNumParameters()?this.p_08.getParameterName(e):\"bogus\"}}getParameterId(e){switch(e){case 0:return\"p_obj-3/p_obj-18/number_obj-19/value\";case 1:return\"p_obj-3/p_obj-18/number_obj-18/value\";default:return(e-=2)<this.p_08.getNumParameters()?this.p_08.getParameterId(e):\"bogus\"}}getParameterInfo(e,t){switch(e){case 0:t.type=ParameterTypeNumber,t.initialValue=16,t.min=0,t.max=1,t.exponent=1,t.steps=0,t.debug=!1,t.saveable=!0,t.transmittable=!0,t.initialized=!0,t.visible=!1,t.displayName=\"\",t.unit=\"\",t.ioType=IOTypeUndefined,t.signalIndex=INVALID_INDEX;break;case 1:t.type=ParameterTypeNumber,t.initialValue=1,t.min=0,t.max=1,t.exponent=1,t.steps=0,t.debug=!1,t.saveable=!0,t.transmittable=!0,t.initialized=!0,t.visible=!1,t.displayName=\"\",t.unit=\"\",t.ioType=IOTypeUndefined,t.signalIndex=INVALID_INDEX;break;default:(e-=2)<this.p_08.getNumParameters()&&this.p_08.getParameterInfo(e,t)}}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}getParameterOffset(e){return e==this.p_08?2:0}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){switch(e){case 0:case 1:return((t=t<0?0:t>1?1:t)-0)/1;default:return(e-=2)<this.p_08.getNumParameters()?this.p_08.convertToNormalizedParameterValue(e,t):t}}convertFromNormalizedParameterValue(e,t){switch(t=t<0?0:t>1?1:t,e){case 0:case 1:return 0+1*(t=t<0?0:t>1?1:t);default:return(e-=2)<this.p_08.getNumParameters()?this.p_08.convertFromNormalizedParameterValue(e,t):t}}constrainParameterValue(e,t){return(e-=2)<this.p_08.getNumParameters()?this.p_08.constrainParameterValue(e,t):t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){switch(RNBO_UNUSED(s),RNBO_UNUSED(r),this.updateTime(e),t){case 29237386:this.loadmess_07_startupbang_bang();break;case 892732297:this.loadmess_08_startupbang_bang()}}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){switch(this.updateTime(r),e){case TAG(\"format\"):TAG(\"p_obj-3/p_obj-18/number_obj-19\")==t&&this.numberobj_07_format_set(s),TAG(\"p_obj-3/p_obj-18/number_obj-18\")==t&&this.numberobj_08_format_set(s)}this.p_08.processNumMessage(e,t,r,s)}processListMessage(e,t,r,s){RNBO_UNUSED(t),this.updateTime(r),this.p_08.processListMessage(e,t,r,s)}processBangMessage(e,t,r){switch(this.updateTime(r),e){case TAG(\"startupbang\"):TAG(\"p_obj-3/p_obj-18/loadmess_obj-41\")==t&&this.loadmess_07_startupbang_bang(),TAG(\"p_obj-3/p_obj-18/loadmess_obj-4\")==t&&this.loadmess_08_startupbang_bang()}this.p_08.processBangMessage(e,t,r)}resolveTag(e){switch(e){case TAG(\"setup\"):return\"setup\";case TAG(\"p_obj-3/p_obj-18/number_obj-19\"):return\"p_obj-3/p_obj-18/number_obj-19\";case TAG(\"p_obj-3/p_obj-18/number_obj-18\"):return\"p_obj-3/p_obj-18/number_obj-18\";case TAG(\"format\"):return\"format\";case TAG(\"startupbang\"):return\"startupbang\";case TAG(\"p_obj-3/p_obj-18/loadmess_obj-41\"):return\"p_obj-3/p_obj-18/loadmess_obj-41\";case TAG(\"p_obj-3/p_obj-18/loadmess_obj-4\"):return\"p_obj-3/p_obj-18/loadmess_obj-4\"}var t=this.p_08.resolveTag(e);return t||null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){this.p_08.processDataViewUpdate(e,t)}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_402{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(1),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.edge_05_setupDone=!1,this.edge_06_setupDone=!1,this.edge_07_setupDone=!1,this.edge_08_setupDone=!1,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0,this.p_09=new Array,this.p_10=new Array,this.p_11=new Array,this.p_12=new Array}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 4}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){this.p_09=new RNBOSubpatcher_387,this.p_09.setEngineAndPatcher(this.getEngine(),this),this.p_09.initialize(),this.p_09.setParameterOffset(this.getParameterOffset(this.p_09)),this.p_10=new RNBOSubpatcher_388,this.p_10.setEngineAndPatcher(this.getEngine(),this),this.p_10.initialize(),this.p_10.setParameterOffset(this.getParameterOffset(this.p_10)),this.p_11=new RNBOSubpatcher_389,this.p_11.setEngineAndPatcher(this.getEngine(),this),this.p_11.initialize(),this.p_11.setParameterOffset(this.getParameterOffset(this.p_11)),this.p_12=new RNBOSubpatcher_390,this.p_12.setEngineAndPatcher(this.getEngine(),this),this.p_12.initialize(),this.p_12.setParameterOffset(this.getParameterOffset(this.p_12))}processTempoEvent(e,t){this.updateTime(e),this.p_09.processTempoEvent(e,t),this.p_10.processTempoEvent(e,t),this.p_11.processTempoEvent(e,t),this.p_12.processTempoEvent(e,t)}processTransportEvent(e,t){this.updateTime(e),this.p_09.processTransportEvent(e,t),this.p_10.processTransportEvent(e,t),this.p_11.processTransportEvent(e,t),this.p_12.processTransportEvent(e,t)}processBeatTimeEvent(e,t){this.updateTime(e),this.p_09.processBeatTimeEvent(e,t),this.p_10.processBeatTimeEvent(e,t),this.p_11.processBeatTimeEvent(e,t),this.p_12.processBeatTimeEvent(e,t)}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){this.updateTime(e),this.p_09.processTimeSignatureEvent(e,t,r),this.p_10.processTimeSignatureEvent(e,t,r),this.p_11.processTimeSignatureEvent(e,t,r),this.p_12.processTimeSignatureEvent(e,t,r)}setParameterValue(e,t,r){RNBO_UNUSED(t),this.updateTime(r),(e-=0)<this.p_09.getNumParameters()&&this.p_09.setParameterValue(e,t,r),(e-=this.p_09.getNumParameters())<this.p_10.getNumParameters()&&this.p_10.setParameterValue(e,t,r),(e-=this.p_10.getNumParameters())<this.p_11.getNumParameters()&&this.p_11.setParameterValue(e,t,r),(e-=this.p_11.getNumParameters())<this.p_12.getNumParameters()&&this.p_12.setParameterValue(e,t,r)}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return(e-=0)<this.p_09.getNumParameters()?this.p_09.getParameterValue(e):(e-=this.p_09.getNumParameters())<this.p_10.getNumParameters()?this.p_10.getParameterValue(e):(e-=this.p_10.getNumParameters())<this.p_11.getNumParameters()?this.p_11.getParameterValue(e):(e-=this.p_11.getNumParameters())<this.p_12.getNumParameters()?this.p_12.getParameterValue(e):0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0+this.p_09.getNumParameters()+this.p_10.getNumParameters()+this.p_11.getNumParameters()+this.p_12.getNumParameters()}getParameterName(e){return(e-=0)<this.p_09.getNumParameters()?this.p_09.getParameterName(e):(e-=this.p_09.getNumParameters())<this.p_10.getNumParameters()?this.p_10.getParameterName(e):(e-=this.p_10.getNumParameters())<this.p_11.getNumParameters()?this.p_11.getParameterName(e):(e-=this.p_11.getNumParameters())<this.p_12.getNumParameters()?this.p_12.getParameterName(e):\"bogus\"}getParameterId(e){return(e-=0)<this.p_09.getNumParameters()?this.p_09.getParameterId(e):(e-=this.p_09.getNumParameters())<this.p_10.getNumParameters()?this.p_10.getParameterId(e):(e-=this.p_10.getNumParameters())<this.p_11.getNumParameters()?this.p_11.getParameterId(e):(e-=this.p_11.getNumParameters())<this.p_12.getNumParameters()?this.p_12.getParameterId(e):\"bogus\"}getParameterInfo(e,t){(e-=0)<this.p_09.getNumParameters()&&this.p_09.getParameterInfo(e,t),(e-=this.p_09.getNumParameters())<this.p_10.getNumParameters()&&this.p_10.getParameterInfo(e,t),(e-=this.p_10.getNumParameters())<this.p_11.getNumParameters()&&this.p_11.getParameterInfo(e,t),(e-=this.p_11.getNumParameters())<this.p_12.getNumParameters()&&this.p_12.getParameterInfo(e,t)}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}getParameterOffset(e){return e==this.p_09?0:e==this.p_10?0+this.p_09.getNumParameters():e==this.p_11?0+this.p_09.getNumParameters()+this.p_10.getNumParameters():e==this.p_12?0+this.p_09.getNumParameters()+this.p_10.getNumParameters()+this.p_11.getNumParameters():0}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return(e-=0)<this.p_09.getNumParameters()?this.p_09.convertToNormalizedParameterValue(e,t):(e-=this.p_09.getNumParameters())<this.p_10.getNumParameters()?this.p_10.convertToNormalizedParameterValue(e,t):(e-=this.p_10.getNumParameters())<this.p_11.getNumParameters()?this.p_11.convertToNormalizedParameterValue(e,t):(e-=this.p_11.getNumParameters())<this.p_12.getNumParameters()?this.p_12.convertToNormalizedParameterValue(e,t):t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t,(e-=0)<this.p_09.getNumParameters()?this.p_09.convertFromNormalizedParameterValue(e,t):(e-=this.p_09.getNumParameters())<this.p_10.getNumParameters()?this.p_10.convertFromNormalizedParameterValue(e,t):(e-=this.p_10.getNumParameters())<this.p_11.getNumParameters()?this.p_11.convertFromNormalizedParameterValue(e,t):(e-=this.p_11.getNumParameters())<this.p_12.getNumParameters()?this.p_12.convertFromNormalizedParameterValue(e,t):t}constrainParameterValue(e,t){return(e-=0)<this.p_09.getNumParameters()?this.p_09.constrainParameterValue(e,t):(e-=this.p_09.getNumParameters())<this.p_10.getNumParameters()?this.p_10.constrainParameterValue(e,t):(e-=this.p_10.getNumParameters())<this.p_11.getNumParameters()?this.p_11.constrainParameterValue(e,t):(e-=this.p_11.getNumParameters())<this.p_12.getNumParameters()?this.p_12.constrainParameterValue(e,t):t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){switch(RNBO_UNUSED(s),RNBO_UNUSED(r),this.updateTime(e),t){case 1577528346:this.edge_05_onout_bang();break;case-1966461100:this.edge_05_offout_bang();break;case-2015609447:this.edge_06_onout_bang();break;case-407339627:this.edge_06_offout_bang();break;case-1313779944:this.edge_07_onout_bang();break;case 1151781846:this.edge_07_offout_bang();break;case-611950441:this.edge_08_onout_bang();break;case-1584063977:this.edge_08_offout_bang()}}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"polymetric_params\"):this.inport_06_value_number_set(s);break;case TAG(\"state\"):this.inport_07_value_number_set(s)}this.p_09.processNumMessage(e,t,r,s),this.p_10.processNumMessage(e,t,r,s),this.p_11.processNumMessage(e,t,r,s),this.p_12.processNumMessage(e,t,r,s)}processListMessage(e,t,r,s){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"polymetric_params\"):this.inport_06_value_list_set(s);break;case TAG(\"state\"):this.inport_07_value_list_set(s)}this.p_09.processListMessage(e,t,r,s),this.p_10.processListMessage(e,t,r,s),this.p_11.processListMessage(e,t,r,s),this.p_12.processListMessage(e,t,r,s)}processBangMessage(e,t,r){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"polymetric_params\"):this.inport_06_value_bang_bang();break;case TAG(\"state\"):this.inport_07_value_bang_bang()}this.p_09.processBangMessage(e,t,r),this.p_10.processBangMessage(e,t,r),this.p_11.processBangMessage(e,t,r),this.p_12.processBangMessage(e,t,r)}resolveTag(e){switch(e){case TAG(\"pips\"):return\"pips\";case TAG(\"\"):return\"\";case TAG(\"blip\"):return\"blip\";case TAG(\"polymetric_params\"):return\"polymetric_params\";case TAG(\"state\"):return\"state\"}var t=this.p_09.resolveTag(e);if(t)return t;var r=this.p_10.resolveTag(e);if(r)return r;var s=this.p_11.resolveTag(e);if(s)return s;var a=this.p_12.resolveTag(e);return a||null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){this.p_09.processDataViewUpdate(e,t),this.p_10.processDataViewUpdate(e,t),this.p_11.processDataViewUpdate(e,t),this.p_12.processDataViewUpdate(e,t)}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_403{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.edge_09_setupDone=!1,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 4}getNumOutputChannels(){return 1}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){switch(RNBO_UNUSED(s),RNBO_UNUSED(r),this.updateTime(e),t){case-611950441:this.edge_09_onout_bang();break;case-1584063977:this.edge_09_offout_bang()}}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"chordfollow\"):this.inport_08_value_number_set(s);break;case TAG(\"state\"):this.inport_09_value_number_set(s)}}processListMessage(e,t,r,s){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"chordfollow\"):this.inport_08_value_list_set(s);break;case TAG(\"state\"):this.inport_09_value_list_set(s)}}processBangMessage(e,t,r){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"chordfollow\"):this.inport_08_value_bang_bang();break;case TAG(\"state\"):this.inport_09_value_bang_bang()}}resolveTag(e){switch(e){case TAG(\"blip\"):return\"blip\";case TAG(\"\"):return\"\";case TAG(\"chordfollow\"):return\"chordfollow\";case TAG(\"state\"):return\"state\"}return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_391{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(4),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.edge_10_setupDone=!1,this.gen_05_setupDone=!1,this.peek_tilde_05_buffer=0,this.ip_09_sigbuf=0,this.ip_09_setupDone=!1,this.latch_tilde_09_setupDone=!1,this.latch_tilde_10_setupDone=!1,this.ip_10_sigbuf=0,this.ip_10_setupDone=!1,this.peek_tilde_05_bufferobj=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 1}getNumOutputChannels(){return 1}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){switch(RNBO_UNUSED(s),RNBO_UNUSED(r),this.updateTime(e),t){case-611950441:this.edge_10_onout_bang();break;case-1584063977:this.edge_10_offout_bang()}}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"state\"):this.inport_10_value_number_set(s)}}processListMessage(e,t,r,s){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"state\"):this.inport_10_value_list_set(s)}}processBangMessage(e,t,r){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"state\"):this.inport_10_value_bang_bang()}}resolveTag(e){switch(e){case TAG(\"state\"):return\"state\";case TAG(\"\"):return\"\"}return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}zeroDataRef(e){e.setZero()}processDataViewUpdate(e,t){this.updateTime(t),-2!=e&&0!=e&&1!=e&&2!=e&&3!=e&&4!=e&&5!=e&&6!=e&&7!=e&&8!=e&&9!=e&&10!=e&&11!=e&&12!=e&&13!=e&&14!=e&&15!=e&&16!=e&&17!=e&&18!=e&&19!=e&&20!=e&&21!=e&&22!=e&&23!=e&&24!=e&&25!=e&&26!=e&&27!=e&&28!=e&&29!=e&&30!=e&&31!=e&&32!=e&&33!=e||(this.peek_tilde_05_buffer=new Float32MultiBuffer(this.peek_tilde_05_bufferobj))}initialize(){this.peek_tilde_05_bufferobj=initMultiRef(this.getPatcher().getPatcher().b_dot_1,this.getPatcher().getPatcher().b_dot_2,this.getPatcher().getPatcher().b_dot_3,this.getPatcher().getPatcher().b_dot_4,this.getPatcher().getPatcher().b_dot_5,this.getPatcher().getPatcher().b_dot_6,this.getPatcher().getPatcher().b_dot_7,this.getPatcher().getPatcher().b_dot_8,this.getPatcher().getPatcher().b_dot_9,this.getPatcher().getPatcher().b_dot_10,this.getPatcher().getPatcher().b_dot_11,this.getPatcher().getPatcher().b_dot_12,this.getPatcher().getPatcher().b_dot_13,this.getPatcher().getPatcher().b_dot_14,this.getPatcher().getPatcher().b_dot_15,this.getPatcher().getPatcher().b_dot_16,this.getPatcher().getPatcher().b_dot_17,this.getPatcher().getPatcher().b_dot_18,this.getPatcher().getPatcher().b_dot_19,this.getPatcher().getPatcher().b_dot_20,this.getPatcher().getPatcher().b_dot_21,this.getPatcher().getPatcher().b_dot_22,this.getPatcher().getPatcher().b_dot_23,this.getPatcher().getPatcher().b_dot_24,this.getPatcher().getPatcher().b_dot_25,this.getPatcher().getPatcher().b_dot_26,this.getPatcher().getPatcher().b_dot_27,this.getPatcher().getPatcher().b_dot_28,this.getPatcher().getPatcher().b_dot_29,this.getPatcher().getPatcher().b_dot_30,this.getPatcher().getPatcher().b_dot_31,this.getPatcher().getPatcher().b_dot_32,this.getPatcher().getPatcher().b_dot_33,this.getPatcher().getPatcher().b_dot_34),this.assign_defaults(),this.setState(),this.peek_tilde_05_bufferobj.setIndex(-2),this.peek_tilde_05_buffer=new Float32MultiBuffer(this.peek_tilde_05_bufferobj)}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_392{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_393{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return stringCompare(e,\"message_obj-5/bangval\")?stringCompare(e,\"message_obj-7/bangval\")?stringCompare(e,\"message_obj-20/bangval\")?stringCompare(e,\"message_obj-24/bangval\")?stringCompare(e,\"message_obj-26/bangval\")?stringCompare(e,\"message_obj-27/bangval\")?stringCompare(e,\"message_obj-28/bangval\")?INVALID_INDEX:6:5:4:3:2:1:0}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){switch(RNBO_UNUSED(t),this.updateTime(r),e){case 0:this.message_01_bangval_bang();break;case 1:this.message_02_bangval_bang();break;case 2:this.message_03_bangval_bang();break;case 3:this.message_04_bangval_bang();break;case 4:this.message_05_bangval_bang();break;case 5:this.message_06_bangval_bang();break;case 6:this.message_07_bangval_bang()}}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 7}getParameterName(e){switch(e){case 0:return\"message_01_bangval\";case 1:return\"message_02_bangval\";case 2:return\"message_03_bangval\";case 3:return\"message_04_bangval\";case 4:return\"message_05_bangval\";case 5:return\"message_06_bangval\";case 6:return\"message_07_bangval\";default:return\"bogus\"}}getParameterId(e){switch(e){case 0:return\"p_obj-17/p_obj-29/message_obj-5/bangval\";case 1:return\"p_obj-17/p_obj-29/message_obj-7/bangval\";case 2:return\"p_obj-17/p_obj-29/message_obj-20/bangval\";case 3:return\"p_obj-17/p_obj-29/message_obj-24/bangval\";case 4:return\"p_obj-17/p_obj-29/message_obj-26/bangval\";case 5:return\"p_obj-17/p_obj-29/message_obj-27/bangval\";case 6:return\"p_obj-17/p_obj-29/message_obj-28/bangval\";default:return\"bogus\"}}getParameterInfo(e,t){switch(e){case 0:case 1:case 2:case 3:case 4:case 5:case 6:t.type=ParameterTypeBang,t.initialValue=0,t.min=0,t.max=1,t.exponent=1,t.steps=0,t.debug=!1,t.saveable=!0,t.transmittable=!0,t.initialized=!1,t.visible=!1,t.displayName=\"\",t.unit=\"\",t.ioType=IOTypeUndefined,t.signalIndex=INVALID_INDEX}}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_404{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0,this.p_13=new Array,this.p_14=new Array,this.p_15=new Array}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 1}getNumOutputChannels(){return 1}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){this.p_13=new RNBOSubpatcher_391,this.p_13.setEngineAndPatcher(this.getEngine(),this),this.p_13.initialize(),this.p_13.setParameterOffset(this.getParameterOffset(this.p_13)),this.p_14=new RNBOSubpatcher_392,this.p_14.setEngineAndPatcher(this.getEngine(),this),this.p_14.initialize(),this.p_14.setParameterOffset(this.getParameterOffset(this.p_14)),this.p_15=new RNBOSubpatcher_393,this.p_15.setEngineAndPatcher(this.getEngine(),this),this.p_15.initialize(),this.p_15.setParameterOffset(this.getParameterOffset(this.p_15))}processTempoEvent(e,t){this.updateTime(e),this.p_13.processTempoEvent(e,t),this.p_14.processTempoEvent(e,t),this.p_15.processTempoEvent(e,t)}processTransportEvent(e,t){this.updateTime(e),this.p_13.processTransportEvent(e,t),this.p_14.processTransportEvent(e,t),this.p_15.processTransportEvent(e,t)}processBeatTimeEvent(e,t){this.updateTime(e),this.p_13.processBeatTimeEvent(e,t),this.p_14.processBeatTimeEvent(e,t),this.p_15.processBeatTimeEvent(e,t)}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){this.updateTime(e),this.p_13.processTimeSignatureEvent(e,t,r),this.p_14.processTimeSignatureEvent(e,t,r),this.p_15.processTimeSignatureEvent(e,t,r)}setParameterValue(e,t,r){RNBO_UNUSED(t),this.updateTime(r),(e-=0)<this.p_13.getNumParameters()&&this.p_13.setParameterValue(e,t,r),(e-=this.p_13.getNumParameters())<this.p_14.getNumParameters()&&this.p_14.setParameterValue(e,t,r),(e-=this.p_14.getNumParameters())<this.p_15.getNumParameters()&&this.p_15.setParameterValue(e,t,r)}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return(e-=0)<this.p_13.getNumParameters()?this.p_13.getParameterValue(e):(e-=this.p_13.getNumParameters())<this.p_14.getNumParameters()?this.p_14.getParameterValue(e):(e-=this.p_14.getNumParameters())<this.p_15.getNumParameters()?this.p_15.getParameterValue(e):0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0+this.p_13.getNumParameters()+this.p_14.getNumParameters()+this.p_15.getNumParameters()}getParameterName(e){return(e-=0)<this.p_13.getNumParameters()?this.p_13.getParameterName(e):(e-=this.p_13.getNumParameters())<this.p_14.getNumParameters()?this.p_14.getParameterName(e):(e-=this.p_14.getNumParameters())<this.p_15.getNumParameters()?this.p_15.getParameterName(e):\"bogus\"}getParameterId(e){return(e-=0)<this.p_13.getNumParameters()?this.p_13.getParameterId(e):(e-=this.p_13.getNumParameters())<this.p_14.getNumParameters()?this.p_14.getParameterId(e):(e-=this.p_14.getNumParameters())<this.p_15.getNumParameters()?this.p_15.getParameterId(e):\"bogus\"}getParameterInfo(e,t){(e-=0)<this.p_13.getNumParameters()&&this.p_13.getParameterInfo(e,t),(e-=this.p_13.getNumParameters())<this.p_14.getNumParameters()&&this.p_14.getParameterInfo(e,t),(e-=this.p_14.getNumParameters())<this.p_15.getNumParameters()&&this.p_15.getParameterInfo(e,t)}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}getParameterOffset(e){return e==this.p_13?0:e==this.p_14?0+this.p_13.getNumParameters():e==this.p_15?0+this.p_13.getNumParameters()+this.p_14.getNumParameters():0}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return(e-=0)<this.p_13.getNumParameters()?this.p_13.convertToNormalizedParameterValue(e,t):(e-=this.p_13.getNumParameters())<this.p_14.getNumParameters()?this.p_14.convertToNormalizedParameterValue(e,t):(e-=this.p_14.getNumParameters())<this.p_15.getNumParameters()?this.p_15.convertToNormalizedParameterValue(e,t):t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t,(e-=0)<this.p_13.getNumParameters()?this.p_13.convertFromNormalizedParameterValue(e,t):(e-=this.p_13.getNumParameters())<this.p_14.getNumParameters()?this.p_14.convertFromNormalizedParameterValue(e,t):(e-=this.p_14.getNumParameters())<this.p_15.getNumParameters()?this.p_15.convertFromNormalizedParameterValue(e,t):t}constrainParameterValue(e,t){return(e-=0)<this.p_13.getNumParameters()?this.p_13.constrainParameterValue(e,t):(e-=this.p_13.getNumParameters())<this.p_14.getNumParameters()?this.p_14.constrainParameterValue(e,t):(e-=this.p_14.getNumParameters())<this.p_15.getNumParameters()?this.p_15.constrainParameterValue(e,t):t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"chordsampler\"):this.inport_11_value_number_set(s);break;case TAG(\"chordscale\"):this.inport_12_value_number_set(s)}this.p_13.processNumMessage(e,t,r,s),this.p_14.processNumMessage(e,t,r,s),this.p_15.processNumMessage(e,t,r,s)}processListMessage(e,t,r,s){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"chordsampler\"):this.inport_11_value_list_set(s);break;case TAG(\"chordscale\"):this.inport_12_value_list_set(s)}this.p_13.processListMessage(e,t,r,s),this.p_14.processListMessage(e,t,r,s),this.p_15.processListMessage(e,t,r,s)}processBangMessage(e,t,r){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"chordsampler\"):this.inport_11_value_bang_bang();break;case TAG(\"chordscale\"):this.inport_12_value_bang_bang()}this.p_13.processBangMessage(e,t,r),this.p_14.processBangMessage(e,t,r),this.p_15.processBangMessage(e,t,r)}resolveTag(e){switch(e){case TAG(\"chordsampler\"):return\"chordsampler\";case TAG(\"\"):return\"\";case TAG(\"chordscale\"):return\"chordscale\"}var t=this.p_13.resolveTag(e);if(t)return t;var r=this.p_14.resolveTag(e);if(r)return r;var s=this.p_15.resolveTag(e);return s||null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){this.p_13.processDataViewUpdate(e,t),this.p_14.processDataViewUpdate(e,t),this.p_15.processDataViewUpdate(e,t)}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_394{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(2),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 1}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){switch(RNBO_UNUSED(s),RNBO_UNUSED(r),this.updateTime(e),t){case 760652352:this.line_05_target_bang()}}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_396{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(2),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.click_05_buf=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0,this.p_16=new Array}getParameterIndexForID(e){return stringCompare(e,\"toggle_obj-9/value\")?INVALID_INDEX:0}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 1}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){this.p_16=new RNBOSubpatcher_394,this.p_16.setEngineAndPatcher(this.getEngine(),this),this.p_16.initialize(),this.p_16.setParameterOffset(this.getParameterOffset(this.p_16))}processTempoEvent(e,t){this.updateTime(e),this.p_16.processTempoEvent(e,t)}processTransportEvent(e,t){this.updateTime(e),this.p_16.processTransportEvent(e,t)}processBeatTimeEvent(e,t){this.updateTime(e),this.p_16.processBeatTimeEvent(e,t)}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){this.updateTime(e),this.p_16.processTimeSignatureEvent(e,t,r)}setParameterValue(e,t,r){switch(this.updateTime(r),e){case 0:this.toggle_01_value_set(t);break;default:(e-=1)<this.p_16.getNumParameters()&&this.p_16.setParameterValue(e,t,r)}}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){switch(e){case 0:return this.toggle_01_value;default:return(e-=1)<this.p_16.getNumParameters()?this.p_16.getParameterValue(e):0}}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 1+this.p_16.getNumParameters()}getParameterName(e){switch(e){case 0:return\"toggle_01_value\";default:return(e-=1)<this.p_16.getNumParameters()?this.p_16.getParameterName(e):\"bogus\"}}getParameterId(e){switch(e){case 0:return\"p_obj-1/p_obj-2/toggle_obj-9/value\";default:return(e-=1)<this.p_16.getNumParameters()?this.p_16.getParameterId(e):\"bogus\"}}getParameterInfo(e,t){switch(e){case 0:t.type=ParameterTypeNumber,t.initialValue=0,t.min=0,t.max=1,t.exponent=1,t.steps=0,t.debug=!1,t.saveable=!0,t.transmittable=!0,t.initialized=!0,t.visible=!1,t.displayName=\"\",t.unit=\"\",t.ioType=IOTypeUndefined,t.signalIndex=INVALID_INDEX;break;default:(e-=1)<this.p_16.getNumParameters()&&this.p_16.getParameterInfo(e,t)}}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}getParameterOffset(e){return e==this.p_16?1:0}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){switch(e){case 0:return((t=t<0?0:t>1?1:t)-0)/1;default:return(e-=1)<this.p_16.getNumParameters()?this.p_16.convertToNormalizedParameterValue(e,t):t}}convertFromNormalizedParameterValue(e,t){switch(t=t<0?0:t>1?1:t,e){case 0:return 0+1*(t=t<0?0:t>1?1:t);default:return(e-=1)<this.p_16.getNumParameters()?this.p_16.convertFromNormalizedParameterValue(e,t):t}}constrainParameterValue(e,t){return(e-=1)<this.p_16.getNumParameters()?this.p_16.constrainParameterValue(e,t):t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){RNBO_UNUSED(t),this.updateTime(r),this.p_16.processNumMessage(e,t,r,s)}processListMessage(e,t,r,s){RNBO_UNUSED(t),this.updateTime(r),this.p_16.processListMessage(e,t,r,s)}processBangMessage(e,t,r){RNBO_UNUSED(t),this.updateTime(r),this.p_16.processBangMessage(e,t,r)}resolveTag(e){var t=this.p_16.resolveTag(e);return t||null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){this.p_16.processDataViewUpdate(e,t)}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_395{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(2),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 1}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){switch(RNBO_UNUSED(s),RNBO_UNUSED(r),this.updateTime(e),t){case 760652352:this.line_06_target_bang()}}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_397{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(2),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.click_06_buf=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0,this.p_17=new Array}getParameterIndexForID(e){return stringCompare(e,\"toggle_obj-9/value\")?INVALID_INDEX:0}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 1}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){this.p_17=new RNBOSubpatcher_395,this.p_17.setEngineAndPatcher(this.getEngine(),this),this.p_17.initialize(),this.p_17.setParameterOffset(this.getParameterOffset(this.p_17))}processTempoEvent(e,t){this.updateTime(e),this.p_17.processTempoEvent(e,t)}processTransportEvent(e,t){this.updateTime(e),this.p_17.processTransportEvent(e,t)}processBeatTimeEvent(e,t){this.updateTime(e),this.p_17.processBeatTimeEvent(e,t)}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){this.updateTime(e),this.p_17.processTimeSignatureEvent(e,t,r)}setParameterValue(e,t,r){switch(this.updateTime(r),e){case 0:this.toggle_02_value_set(t);break;default:(e-=1)<this.p_17.getNumParameters()&&this.p_17.setParameterValue(e,t,r)}}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){switch(e){case 0:return this.toggle_02_value;default:return(e-=1)<this.p_17.getNumParameters()?this.p_17.getParameterValue(e):0}}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 1+this.p_17.getNumParameters()}getParameterName(e){switch(e){case 0:return\"toggle_02_value\";default:return(e-=1)<this.p_17.getNumParameters()?this.p_17.getParameterName(e):\"bogus\"}}getParameterId(e){switch(e){case 0:return\"p_obj-1/p_obj-12/toggle_obj-9/value\";default:return(e-=1)<this.p_17.getNumParameters()?this.p_17.getParameterId(e):\"bogus\"}}getParameterInfo(e,t){switch(e){case 0:t.type=ParameterTypeNumber,t.initialValue=0,t.min=0,t.max=1,t.exponent=1,t.steps=0,t.debug=!1,t.saveable=!0,t.transmittable=!0,t.initialized=!0,t.visible=!1,t.displayName=\"\",t.unit=\"\",t.ioType=IOTypeUndefined,t.signalIndex=INVALID_INDEX;break;default:(e-=1)<this.p_17.getNumParameters()&&this.p_17.getParameterInfo(e,t)}}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}getParameterOffset(e){return e==this.p_17?1:0}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){switch(e){case 0:return((t=t<0?0:t>1?1:t)-0)/1;default:return(e-=1)<this.p_17.getNumParameters()?this.p_17.convertToNormalizedParameterValue(e,t):t}}convertFromNormalizedParameterValue(e,t){switch(t=t<0?0:t>1?1:t,e){case 0:return 0+1*(t=t<0?0:t>1?1:t);default:return(e-=1)<this.p_17.getNumParameters()?this.p_17.convertFromNormalizedParameterValue(e,t):t}}constrainParameterValue(e,t){return(e-=1)<this.p_17.getNumParameters()?this.p_17.constrainParameterValue(e,t):t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){RNBO_UNUSED(t),this.updateTime(r),this.p_17.processNumMessage(e,t,r,s)}processListMessage(e,t,r,s){RNBO_UNUSED(t),this.updateTime(r),this.p_17.processListMessage(e,t,r,s)}processBangMessage(e,t,r){RNBO_UNUSED(t),this.updateTime(r),this.p_17.processBangMessage(e,t,r)}resolveTag(e){var t=this.p_17.resolveTag(e);return t||null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){this.p_17.processDataViewUpdate(e,t)}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_405{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(1),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.edge_11_setupDone=!1,this.edge_12_setupDone=!1,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0,this.p_18=new Array,this.p_19=new Array}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 2}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){this.p_18=new RNBOSubpatcher_396,this.p_18.setEngineAndPatcher(this.getEngine(),this),this.p_18.initialize(),this.p_18.setParameterOffset(this.getParameterOffset(this.p_18)),this.p_19=new RNBOSubpatcher_397,this.p_19.setEngineAndPatcher(this.getEngine(),this),this.p_19.initialize(),this.p_19.setParameterOffset(this.getParameterOffset(this.p_19))}processTempoEvent(e,t){this.updateTime(e),this.p_18.processTempoEvent(e,t),this.p_19.processTempoEvent(e,t)}processTransportEvent(e,t){this.updateTime(e),this.p_18.processTransportEvent(e,t),this.p_19.processTransportEvent(e,t)}processBeatTimeEvent(e,t){this.updateTime(e),this.p_18.processBeatTimeEvent(e,t),this.p_19.processBeatTimeEvent(e,t)}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){this.updateTime(e),this.p_18.processTimeSignatureEvent(e,t,r),this.p_19.processTimeSignatureEvent(e,t,r)}setParameterValue(e,t,r){RNBO_UNUSED(t),this.updateTime(r),(e-=0)<this.p_18.getNumParameters()&&this.p_18.setParameterValue(e,t,r),(e-=this.p_18.getNumParameters())<this.p_19.getNumParameters()&&this.p_19.setParameterValue(e,t,r)}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return(e-=0)<this.p_18.getNumParameters()?this.p_18.getParameterValue(e):(e-=this.p_18.getNumParameters())<this.p_19.getNumParameters()?this.p_19.getParameterValue(e):0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0+this.p_18.getNumParameters()+this.p_19.getNumParameters()}getParameterName(e){return(e-=0)<this.p_18.getNumParameters()?this.p_18.getParameterName(e):(e-=this.p_18.getNumParameters())<this.p_19.getNumParameters()?this.p_19.getParameterName(e):\"bogus\"}getParameterId(e){return(e-=0)<this.p_18.getNumParameters()?this.p_18.getParameterId(e):(e-=this.p_18.getNumParameters())<this.p_19.getNumParameters()?this.p_19.getParameterId(e):\"bogus\"}getParameterInfo(e,t){(e-=0)<this.p_18.getNumParameters()&&this.p_18.getParameterInfo(e,t),(e-=this.p_18.getNumParameters())<this.p_19.getNumParameters()&&this.p_19.getParameterInfo(e,t)}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}getParameterOffset(e){return e==this.p_18?0:e==this.p_19?0+this.p_18.getNumParameters():0}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return(e-=0)<this.p_18.getNumParameters()?this.p_18.convertToNormalizedParameterValue(e,t):(e-=this.p_18.getNumParameters())<this.p_19.getNumParameters()?this.p_19.convertToNormalizedParameterValue(e,t):t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t,(e-=0)<this.p_18.getNumParameters()?this.p_18.convertFromNormalizedParameterValue(e,t):(e-=this.p_18.getNumParameters())<this.p_19.getNumParameters()?this.p_19.convertFromNormalizedParameterValue(e,t):t}constrainParameterValue(e,t){return(e-=0)<this.p_18.getNumParameters()?this.p_18.constrainParameterValue(e,t):(e-=this.p_18.getNumParameters())<this.p_19.getNumParameters()?this.p_19.constrainParameterValue(e,t):t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){switch(RNBO_UNUSED(s),RNBO_UNUSED(r),this.updateTime(e),t){case-1313779944:this.edge_11_onout_bang();break;case 1151781846:this.edge_11_offout_bang();break;case-611950441:this.edge_12_onout_bang();break;case-1584063977:this.edge_12_offout_bang()}}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"state\"):this.inport_13_value_number_set(s);break;case TAG(\"retrigger_params\"):this.inport_14_value_number_set(s)}this.p_18.processNumMessage(e,t,r,s),this.p_19.processNumMessage(e,t,r,s)}processListMessage(e,t,r,s){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"state\"):this.inport_13_value_list_set(s);break;case TAG(\"retrigger_params\"):this.inport_14_value_list_set(s)}this.p_18.processListMessage(e,t,r,s),this.p_19.processListMessage(e,t,r,s)}processBangMessage(e,t,r){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"state\"):this.inport_13_value_bang_bang();break;case TAG(\"retrigger_params\"):this.inport_14_value_bang_bang()}this.p_18.processBangMessage(e,t,r),this.p_19.processBangMessage(e,t,r)}resolveTag(e){switch(e){case TAG(\"blip\"):return\"blip\";case TAG(\"\"):return\"\";case TAG(\"state\"):return\"state\";case TAG(\"retrigger_params\"):return\"retrigger_params\"}var t=this.p_18.resolveTag(e);if(t)return t;var r=this.p_19.resolveTag(e);return r||null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){this.p_18.processDataViewUpdate(e,t),this.p_19.processDataViewUpdate(e,t)}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_398{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(4),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.edge_13_setupDone=!1,this.gen_06_setupDone=!1,this.peek_tilde_06_buffer=0,this.ip_11_sigbuf=0,this.ip_11_setupDone=!1,this.latch_tilde_11_setupDone=!1,this.latch_tilde_12_setupDone=!1,this.ip_12_sigbuf=0,this.ip_12_setupDone=!1,this.peek_tilde_06_bufferobj=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 1}getNumOutputChannels(){return 1}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){switch(RNBO_UNUSED(s),RNBO_UNUSED(r),this.updateTime(e),t){case 1577528346:this.edge_13_onout_bang();break;case-1966461100:this.edge_13_offout_bang()}}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"state\"):this.inport_15_value_number_set(s)}}processListMessage(e,t,r,s){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"state\"):this.inport_15_value_list_set(s)}}processBangMessage(e,t,r){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"state\"):this.inport_15_value_bang_bang()}}resolveTag(e){switch(e){case TAG(\"state\"):return\"state\";case TAG(\"\"):return\"\"}return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}zeroDataRef(e){e.setZero()}processDataViewUpdate(e,t){this.updateTime(t),-2!=e&&0!=e&&1!=e&&2!=e&&3!=e&&4!=e&&5!=e&&6!=e&&7!=e&&8!=e&&9!=e&&10!=e&&11!=e&&12!=e&&13!=e&&14!=e&&15!=e&&16!=e&&17!=e&&18!=e&&19!=e&&20!=e&&21!=e&&22!=e&&23!=e&&24!=e&&25!=e&&26!=e&&27!=e&&28!=e&&29!=e&&30!=e&&31!=e&&32!=e&&33!=e||(this.peek_tilde_06_buffer=new Float32MultiBuffer(this.peek_tilde_06_bufferobj))}initialize(){this.peek_tilde_06_bufferobj=initMultiRef(this.getPatcher().getPatcher().b_dot_1,this.getPatcher().getPatcher().b_dot_2,this.getPatcher().getPatcher().b_dot_3,this.getPatcher().getPatcher().b_dot_4,this.getPatcher().getPatcher().b_dot_5,this.getPatcher().getPatcher().b_dot_6,this.getPatcher().getPatcher().b_dot_7,this.getPatcher().getPatcher().b_dot_8,this.getPatcher().getPatcher().b_dot_9,this.getPatcher().getPatcher().b_dot_10,this.getPatcher().getPatcher().b_dot_11,this.getPatcher().getPatcher().b_dot_12,this.getPatcher().getPatcher().b_dot_13,this.getPatcher().getPatcher().b_dot_14,this.getPatcher().getPatcher().b_dot_15,this.getPatcher().getPatcher().b_dot_16,this.getPatcher().getPatcher().b_dot_17,this.getPatcher().getPatcher().b_dot_18,this.getPatcher().getPatcher().b_dot_19,this.getPatcher().getPatcher().b_dot_20,this.getPatcher().getPatcher().b_dot_21,this.getPatcher().getPatcher().b_dot_22,this.getPatcher().getPatcher().b_dot_23,this.getPatcher().getPatcher().b_dot_24,this.getPatcher().getPatcher().b_dot_25,this.getPatcher().getPatcher().b_dot_26,this.getPatcher().getPatcher().b_dot_27,this.getPatcher().getPatcher().b_dot_28,this.getPatcher().getPatcher().b_dot_29,this.getPatcher().getPatcher().b_dot_30,this.getPatcher().getPatcher().b_dot_31,this.getPatcher().getPatcher().b_dot_32,this.getPatcher().getPatcher().b_dot_33,this.getPatcher().getPatcher().b_dot_34),this.assign_defaults(),this.setState(),this.peek_tilde_06_bufferobj.setIndex(-2),this.peek_tilde_06_buffer=new Float32MultiBuffer(this.peek_tilde_06_bufferobj)}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_399{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(4),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.edge_14_setupDone=!1,this.gen_07_setupDone=!1,this.peek_tilde_07_buffer=0,this.ip_13_sigbuf=0,this.ip_13_setupDone=!1,this.latch_tilde_13_setupDone=!1,this.latch_tilde_14_setupDone=!1,this.ip_14_sigbuf=0,this.ip_14_setupDone=!1,this.peek_tilde_07_bufferobj=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 1}getNumOutputChannels(){return 1}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){switch(RNBO_UNUSED(s),RNBO_UNUSED(r),this.updateTime(e),t){case 1577528346:this.edge_14_onout_bang();break;case-1966461100:this.edge_14_offout_bang()}}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"state\"):this.inport_16_value_number_set(s)}}processListMessage(e,t,r,s){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"state\"):this.inport_16_value_list_set(s)}}processBangMessage(e,t,r){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"state\"):this.inport_16_value_bang_bang()}}resolveTag(e){switch(e){case TAG(\"state\"):return\"state\";case TAG(\"\"):return\"\"}return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}zeroDataRef(e){e.setZero()}processDataViewUpdate(e,t){this.updateTime(t),-2!=e&&0!=e&&1!=e&&2!=e&&3!=e&&4!=e&&5!=e&&6!=e&&7!=e&&8!=e&&9!=e&&10!=e&&11!=e&&12!=e&&13!=e&&14!=e&&15!=e&&16!=e&&17!=e&&18!=e&&19!=e&&20!=e&&21!=e&&22!=e&&23!=e&&24!=e&&25!=e&&26!=e&&27!=e&&28!=e&&29!=e&&30!=e&&31!=e&&32!=e&&33!=e||(this.peek_tilde_07_buffer=new Float32MultiBuffer(this.peek_tilde_07_bufferobj))}initialize(){this.peek_tilde_07_bufferobj=initMultiRef(this.getPatcher().getPatcher().b_dot_1,this.getPatcher().getPatcher().b_dot_2,this.getPatcher().getPatcher().b_dot_3,this.getPatcher().getPatcher().b_dot_4,this.getPatcher().getPatcher().b_dot_5,this.getPatcher().getPatcher().b_dot_6,this.getPatcher().getPatcher().b_dot_7,this.getPatcher().getPatcher().b_dot_8,this.getPatcher().getPatcher().b_dot_9,this.getPatcher().getPatcher().b_dot_10,this.getPatcher().getPatcher().b_dot_11,this.getPatcher().getPatcher().b_dot_12,this.getPatcher().getPatcher().b_dot_13,this.getPatcher().getPatcher().b_dot_14,this.getPatcher().getPatcher().b_dot_15,this.getPatcher().getPatcher().b_dot_16,this.getPatcher().getPatcher().b_dot_17,this.getPatcher().getPatcher().b_dot_18,this.getPatcher().getPatcher().b_dot_19,this.getPatcher().getPatcher().b_dot_20,this.getPatcher().getPatcher().b_dot_21,this.getPatcher().getPatcher().b_dot_22,this.getPatcher().getPatcher().b_dot_23,this.getPatcher().getPatcher().b_dot_24,this.getPatcher().getPatcher().b_dot_25,this.getPatcher().getPatcher().b_dot_26,this.getPatcher().getPatcher().b_dot_27,this.getPatcher().getPatcher().b_dot_28,this.getPatcher().getPatcher().b_dot_29,this.getPatcher().getPatcher().b_dot_30,this.getPatcher().getPatcher().b_dot_31,this.getPatcher().getPatcher().b_dot_32,this.getPatcher().getPatcher().b_dot_33,this.getPatcher().getPatcher().b_dot_34),this.assign_defaults(),this.setState(),this.peek_tilde_07_bufferobj.setIndex(-2),this.peek_tilde_07_buffer=new Float32MultiBuffer(this.peek_tilde_07_bufferobj)}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_406{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(2),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0,this.p_20=new Array,this.p_21=new Array}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 2}getNumOutputChannels(){return 1}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){this.p_20=new RNBOSubpatcher_398,this.p_20.setEngineAndPatcher(this.getEngine(),this),this.p_20.initialize(),this.p_20.setParameterOffset(this.getParameterOffset(this.p_20)),this.p_21=new RNBOSubpatcher_399,this.p_21.setEngineAndPatcher(this.getEngine(),this),this.p_21.initialize(),this.p_21.setParameterOffset(this.getParameterOffset(this.p_21))}processTempoEvent(e,t){this.updateTime(e),this.p_20.processTempoEvent(e,t),this.p_21.processTempoEvent(e,t)}processTransportEvent(e,t){this.updateTime(e),this.p_20.processTransportEvent(e,t),this.p_21.processTransportEvent(e,t)}processBeatTimeEvent(e,t){this.updateTime(e),this.p_20.processBeatTimeEvent(e,t),this.p_21.processBeatTimeEvent(e,t)}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){this.updateTime(e),this.p_20.processTimeSignatureEvent(e,t,r),this.p_21.processTimeSignatureEvent(e,t,r)}setParameterValue(e,t,r){RNBO_UNUSED(t),this.updateTime(r),(e-=0)<this.p_20.getNumParameters()&&this.p_20.setParameterValue(e,t,r),(e-=this.p_20.getNumParameters())<this.p_21.getNumParameters()&&this.p_21.setParameterValue(e,t,r)}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return(e-=0)<this.p_20.getNumParameters()?this.p_20.getParameterValue(e):(e-=this.p_20.getNumParameters())<this.p_21.getNumParameters()?this.p_21.getParameterValue(e):0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0+this.p_20.getNumParameters()+this.p_21.getNumParameters()}getParameterName(e){return(e-=0)<this.p_20.getNumParameters()?this.p_20.getParameterName(e):(e-=this.p_20.getNumParameters())<this.p_21.getNumParameters()?this.p_21.getParameterName(e):\"bogus\"}getParameterId(e){return(e-=0)<this.p_20.getNumParameters()?this.p_20.getParameterId(e):(e-=this.p_20.getNumParameters())<this.p_21.getNumParameters()?this.p_21.getParameterId(e):\"bogus\"}getParameterInfo(e,t){(e-=0)<this.p_20.getNumParameters()&&this.p_20.getParameterInfo(e,t),(e-=this.p_20.getNumParameters())<this.p_21.getNumParameters()&&this.p_21.getParameterInfo(e,t)}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}getParameterOffset(e){return e==this.p_20?0:e==this.p_21?0+this.p_20.getNumParameters():0}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return(e-=0)<this.p_20.getNumParameters()?this.p_20.convertToNormalizedParameterValue(e,t):(e-=this.p_20.getNumParameters())<this.p_21.getNumParameters()?this.p_21.convertToNormalizedParameterValue(e,t):t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t,(e-=0)<this.p_20.getNumParameters()?this.p_20.convertFromNormalizedParameterValue(e,t):(e-=this.p_20.getNumParameters())<this.p_21.getNumParameters()?this.p_21.convertFromNormalizedParameterValue(e,t):t}constrainParameterValue(e,t){return(e-=0)<this.p_20.getNumParameters()?this.p_20.constrainParameterValue(e,t):(e-=this.p_20.getNumParameters())<this.p_21.getNumParameters()?this.p_21.constrainParameterValue(e,t):t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"sampler_params\"):this.inport_17_value_number_set(s)}this.p_20.processNumMessage(e,t,r,s),this.p_21.processNumMessage(e,t,r,s)}processListMessage(e,t,r,s){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"sampler_params\"):this.inport_17_value_list_set(s)}this.p_20.processListMessage(e,t,r,s),this.p_21.processListMessage(e,t,r,s)}processBangMessage(e,t,r){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"sampler_params\"):this.inport_17_value_bang_bang()}this.p_20.processBangMessage(e,t,r),this.p_21.processBangMessage(e,t,r)}resolveTag(e){switch(e){case TAG(\"sampler_params\"):return\"sampler_params\";case TAG(\"\"):return\"\"}var t=this.p_20.resolveTag(e);if(t)return t;var r=this.p_21.resolveTag(e);return r||null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){this.p_20.processDataViewUpdate(e,t),this.p_21.processDataViewUpdate(e,t)}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOPatcher{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(6),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.multibuffertilde_01_buffer0=0,this.multibuffertilde_01_buffer1=0,this.multibuffertilde_01_buffer2=0,this.multibuffertilde_01_buffer3=0,this.multibuffertilde_01_buffer4=0,this.multibuffertilde_01_buffer5=0,this.multibuffertilde_01_buffer6=0,this.multibuffertilde_01_buffer7=0,this.multibuffertilde_01_buffer8=0,this.multibuffertilde_01_buffer9=0,this.multibuffertilde_01_buffer10=0,this.multibuffertilde_01_buffer11=0,this.multibuffertilde_01_buffer12=0,this.multibuffertilde_01_buffer13=0,this.multibuffertilde_01_buffer14=0,this.multibuffertilde_01_buffer15=0,this.multibuffertilde_01_buffer16=0,this.multibuffertilde_01_buffer17=0,this.multibuffertilde_01_buffer18=0,this.multibuffertilde_01_buffer19=0,this.multibuffertilde_01_buffer20=0,this.multibuffertilde_01_buffer21=0,this.multibuffertilde_01_buffer22=0,this.multibuffertilde_01_buffer23=0,this.multibuffertilde_01_buffer24=0,this.multibuffertilde_01_buffer25=0,this.multibuffertilde_01_buffer26=0,this.multibuffertilde_01_buffer27=0,this.multibuffertilde_01_buffer28=0,this.multibuffertilde_01_buffer29=0,this.multibuffertilde_01_buffer30=0,this.multibuffertilde_01_buffer31=0,this.multibuffertilde_01_buffer32=0,this.multibuffertilde_01_buffer33=0,this.multibuffertilde_01_buffer=0,this.globaltransport_tempo=0,this.globaltransport_tempoNeedsReset=!1,this.globaltransport_state=0,this.globaltransport_stateNeedsReset=!1,this.globaltransport_notify=!1,this.globaltransport_setupDone=!1,this.b_dot_1=0,this.b_dot_2=0,this.b_dot_3=0,this.b_dot_4=0,this.b_dot_5=0,this.b_dot_6=0,this.b_dot_7=0,this.b_dot_8=0,this.b_dot_9=0,this.b_dot_10=0,this.b_dot_11=0,this.b_dot_12=0,this.b_dot_13=0,this.b_dot_14=0,this.b_dot_15=0,this.b_dot_16=0,this.b_dot_17=0,this.b_dot_18=0,this.b_dot_19=0,this.b_dot_20=0,this.b_dot_21=0,this.b_dot_22=0,this.b_dot_23=0,this.b_dot_24=0,this.b_dot_25=0,this.b_dot_26=0,this.b_dot_27=0,this.b_dot_28=0,this.b_dot_29=0,this.b_dot_30=0,this.b_dot_31=0,this.b_dot_32=0,this.b_dot_33=0,this.b_dot_34=0,this.samples=0,this._voiceIndex=0,this.isMuted=1,this.paramInitIndices=[],this.paramInitOrder=[],this.p_22=new Array,this.p_23=new Array,this.p_24=new Array,this.p_25=new Array,this.p_26=new Array,this.p_27=new Array,this.p_28=new Array}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 1}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getDataRef(e){switch(e){case 0:return addressOf(this.b_dot_1);case 1:return addressOf(this.b_dot_2);case 2:return addressOf(this.b_dot_3);case 3:return addressOf(this.b_dot_4);case 4:return addressOf(this.b_dot_5);case 5:return addressOf(this.b_dot_6);case 6:return addressOf(this.b_dot_7);case 7:return addressOf(this.b_dot_8);case 8:return addressOf(this.b_dot_9);case 9:return addressOf(this.b_dot_10);case 10:return addressOf(this.b_dot_11);case 11:return addressOf(this.b_dot_12);case 12:return addressOf(this.b_dot_13);case 13:return addressOf(this.b_dot_14);case 14:return addressOf(this.b_dot_15);case 15:return addressOf(this.b_dot_16);case 16:return addressOf(this.b_dot_17);case 17:return addressOf(this.b_dot_18);case 18:return addressOf(this.b_dot_19);case 19:return addressOf(this.b_dot_20);case 20:return addressOf(this.b_dot_21);case 21:return addressOf(this.b_dot_22);case 22:return addressOf(this.b_dot_23);case 23:return addressOf(this.b_dot_24);case 24:return addressOf(this.b_dot_25);case 25:return addressOf(this.b_dot_26);case 26:return addressOf(this.b_dot_27);case 27:return addressOf(this.b_dot_28);case 28:return addressOf(this.b_dot_29);case 29:return addressOf(this.b_dot_30);case 30:return addressOf(this.b_dot_31);case 31:return addressOf(this.b_dot_32);case 32:return addressOf(this.b_dot_33);case 33:return addressOf(this.b_dot_34);default:return null}}getNumDataRefs(){return 34}fillDataRef(e,t){}zeroDataRef(e){e.setZero()}processDataViewUpdate(e,t){this.updateTime(t),0==e&&(this.multibuffertilde_01_buffer0=new Float32Buffer(this.b_dot_1)),1==e&&(this.multibuffertilde_01_buffer1=new Float32Buffer(this.b_dot_2)),2==e&&(this.multibuffertilde_01_buffer2=new Float32Buffer(this.b_dot_3)),3==e&&(this.multibuffertilde_01_buffer3=new Float32Buffer(this.b_dot_4)),4==e&&(this.multibuffertilde_01_buffer4=new Float32Buffer(this.b_dot_5)),5==e&&(this.multibuffertilde_01_buffer5=new Float32Buffer(this.b_dot_6)),6==e&&(this.multibuffertilde_01_buffer6=new Float32Buffer(this.b_dot_7)),7==e&&(this.multibuffertilde_01_buffer7=new Float32Buffer(this.b_dot_8)),8==e&&(this.multibuffertilde_01_buffer8=new Float32Buffer(this.b_dot_9)),9==e&&(this.multibuffertilde_01_buffer9=new Float32Buffer(this.b_dot_10)),10==e&&(this.multibuffertilde_01_buffer10=new Float32Buffer(this.b_dot_11)),11==e&&(this.multibuffertilde_01_buffer11=new Float32Buffer(this.b_dot_12)),12==e&&(this.multibuffertilde_01_buffer12=new Float32Buffer(this.b_dot_13)),13==e&&(this.multibuffertilde_01_buffer13=new Float32Buffer(this.b_dot_14)),14==e&&(this.multibuffertilde_01_buffer14=new Float32Buffer(this.b_dot_15)),15==e&&(this.multibuffertilde_01_buffer15=new Float32Buffer(this.b_dot_16)),16==e&&(this.multibuffertilde_01_buffer16=new Float32Buffer(this.b_dot_17)),17==e&&(this.multibuffertilde_01_buffer17=new Float32Buffer(this.b_dot_18)),18==e&&(this.multibuffertilde_01_buffer18=new Float32Buffer(this.b_dot_19)),19==e&&(this.multibuffertilde_01_buffer19=new Float32Buffer(this.b_dot_20)),20==e&&(this.multibuffertilde_01_buffer20=new Float32Buffer(this.b_dot_21)),21==e&&(this.multibuffertilde_01_buffer21=new Float32Buffer(this.b_dot_22)),22==e&&(this.multibuffertilde_01_buffer22=new Float32Buffer(this.b_dot_23)),23==e&&(this.multibuffertilde_01_buffer23=new Float32Buffer(this.b_dot_24)),24==e&&(this.multibuffertilde_01_buffer24=new Float32Buffer(this.b_dot_25)),25==e&&(this.multibuffertilde_01_buffer25=new Float32Buffer(this.b_dot_26)),26==e&&(this.multibuffertilde_01_buffer26=new Float32Buffer(this.b_dot_27)),27==e&&(this.multibuffertilde_01_buffer27=new Float32Buffer(this.b_dot_28)),28==e&&(this.multibuffertilde_01_buffer28=new Float32Buffer(this.b_dot_29)),29==e&&(this.multibuffertilde_01_buffer29=new Float32Buffer(this.b_dot_30)),30==e&&(this.multibuffertilde_01_buffer30=new Float32Buffer(this.b_dot_31)),31==e&&(this.multibuffertilde_01_buffer31=new Float32Buffer(this.b_dot_32)),32==e&&(this.multibuffertilde_01_buffer32=new Float32Buffer(this.b_dot_33)),33==e&&(this.multibuffertilde_01_buffer33=new Float32Buffer(this.b_dot_34)),-1!=e&&0!=e&&1!=e&&2!=e&&3!=e&&4!=e&&5!=e&&6!=e&&7!=e&&8!=e&&9!=e&&10!=e&&11!=e&&12!=e&&13!=e&&14!=e&&15!=e&&16!=e&&17!=e&&18!=e&&19!=e&&20!=e&&21!=e&&22!=e&&23!=e&&24!=e&&25!=e&&26!=e&&27!=e&&28!=e&&29!=e&&30!=e&&31!=e&&32!=e&&33!=e||(this.multibuffertilde_01_buffer=new Float32MultiBuffer(this.samples)),this.p_22.processDataViewUpdate(e,t),this.p_23.processDataViewUpdate(e,t),this.p_24.processDataViewUpdate(e,t),this.p_25.processDataViewUpdate(e,t),this.p_26.processDataViewUpdate(e,t),this.p_27.processDataViewUpdate(e,t),this.p_28.processDataViewUpdate(e,t)}initialize(){this.b_dot_1=initDataRef(\"b.1\",!1,null),this.b_dot_2=initDataRef(\"b.2\",!1,null),this.b_dot_3=initDataRef(\"b.3\",!1,null),this.b_dot_4=initDataRef(\"b.4\",!1,null),this.b_dot_5=initDataRef(\"b.5\",!1,null),this.b_dot_6=initDataRef(\"b.6\",!1,null),this.b_dot_7=initDataRef(\"b.7\",!1,null),this.b_dot_8=initDataRef(\"b.8\",!1,null),this.b_dot_9=initDataRef(\"b.9\",!1,null),this.b_dot_10=initDataRef(\"b.10\",!1,null),this.b_dot_11=initDataRef(\"b.11\",!1,null),this.b_dot_12=initDataRef(\"b.12\",!1,null),this.b_dot_13=initDataRef(\"b.13\",!1,null),this.b_dot_14=initDataRef(\"b.14\",!1,null),this.b_dot_15=initDataRef(\"b.15\",!1,null),this.b_dot_16=initDataRef(\"b.16\",!1,null),this.b_dot_17=initDataRef(\"b.17\",!1,null),this.b_dot_18=initDataRef(\"b.18\",!1,null),this.b_dot_19=initDataRef(\"b.19\",!1,null),this.b_dot_20=initDataRef(\"b.20\",!1,null),this.b_dot_21=initDataRef(\"b.21\",!1,null),this.b_dot_22=initDataRef(\"b.22\",!1,null),this.b_dot_23=initDataRef(\"b.23\",!1,null),this.b_dot_24=initDataRef(\"b.24\",!1,null),this.b_dot_25=initDataRef(\"b.25\",!1,null),this.b_dot_26=initDataRef(\"b.26\",!1,null),this.b_dot_27=initDataRef(\"b.27\",!1,null),this.b_dot_28=initDataRef(\"b.28\",!1,null),this.b_dot_29=initDataRef(\"b.29\",!1,null),this.b_dot_30=initDataRef(\"b.30\",!1,null),this.b_dot_31=initDataRef(\"b.31\",!1,null),this.b_dot_32=initDataRef(\"b.32\",!1,null),this.b_dot_33=initDataRef(\"b.33\",!1,null),this.b_dot_34=initDataRef(\"b.34\",!1,null),this.samples=initMultiRef(this.b_dot_1,this.b_dot_2,this.b_dot_3,this.b_dot_4,this.b_dot_5,this.b_dot_6,this.b_dot_7,this.b_dot_8,this.b_dot_9,this.b_dot_10,this.b_dot_11,this.b_dot_12,this.b_dot_13,this.b_dot_14,this.b_dot_15,this.b_dot_16,this.b_dot_17,this.b_dot_18,this.b_dot_19,this.b_dot_20,this.b_dot_21,this.b_dot_22,this.b_dot_23,this.b_dot_24,this.b_dot_25,this.b_dot_26,this.b_dot_27,this.b_dot_28,this.b_dot_29,this.b_dot_30,this.b_dot_31,this.b_dot_32,this.b_dot_33,this.b_dot_34),this.assign_defaults(),this.setState(),this.b_dot_1.setIndex(0),this.multibuffertilde_01_buffer0=new Float32Buffer(this.b_dot_1),this.b_dot_2.setIndex(1),this.multibuffertilde_01_buffer1=new Float32Buffer(this.b_dot_2),this.b_dot_3.setIndex(2),this.multibuffertilde_01_buffer2=new Float32Buffer(this.b_dot_3),this.b_dot_4.setIndex(3),this.multibuffertilde_01_buffer3=new Float32Buffer(this.b_dot_4),this.b_dot_5.setIndex(4),this.multibuffertilde_01_buffer4=new Float32Buffer(this.b_dot_5),this.b_dot_6.setIndex(5),this.multibuffertilde_01_buffer5=new Float32Buffer(this.b_dot_6),this.b_dot_7.setIndex(6),this.multibuffertilde_01_buffer6=new Float32Buffer(this.b_dot_7),this.b_dot_8.setIndex(7),this.multibuffertilde_01_buffer7=new Float32Buffer(this.b_dot_8),this.b_dot_9.setIndex(8),this.multibuffertilde_01_buffer8=new Float32Buffer(this.b_dot_9),this.b_dot_10.setIndex(9),this.multibuffertilde_01_buffer9=new Float32Buffer(this.b_dot_10),this.b_dot_11.setIndex(10),this.multibuffertilde_01_buffer10=new Float32Buffer(this.b_dot_11),this.b_dot_12.setIndex(11),this.multibuffertilde_01_buffer11=new Float32Buffer(this.b_dot_12),this.b_dot_13.setIndex(12),this.multibuffertilde_01_buffer12=new Float32Buffer(this.b_dot_13),this.b_dot_14.setIndex(13),this.multibuffertilde_01_buffer13=new Float32Buffer(this.b_dot_14),this.b_dot_15.setIndex(14),this.multibuffertilde_01_buffer14=new Float32Buffer(this.b_dot_15),this.b_dot_16.setIndex(15),this.multibuffertilde_01_buffer15=new Float32Buffer(this.b_dot_16),this.b_dot_17.setIndex(16),this.multibuffertilde_01_buffer16=new Float32Buffer(this.b_dot_17),this.b_dot_18.setIndex(17),this.multibuffertilde_01_buffer17=new Float32Buffer(this.b_dot_18),this.b_dot_19.setIndex(18),this.multibuffertilde_01_buffer18=new Float32Buffer(this.b_dot_19),this.b_dot_20.setIndex(19),this.multibuffertilde_01_buffer19=new Float32Buffer(this.b_dot_20),this.b_dot_21.setIndex(20),this.multibuffertilde_01_buffer20=new Float32Buffer(this.b_dot_21),this.b_dot_22.setIndex(21),this.multibuffertilde_01_buffer21=new Float32Buffer(this.b_dot_22),this.b_dot_23.setIndex(22),this.multibuffertilde_01_buffer22=new Float32Buffer(this.b_dot_23),this.b_dot_24.setIndex(23),this.multibuffertilde_01_buffer23=new Float32Buffer(this.b_dot_24),this.b_dot_25.setIndex(24),this.multibuffertilde_01_buffer24=new Float32Buffer(this.b_dot_25),this.b_dot_26.setIndex(25),this.multibuffertilde_01_buffer25=new Float32Buffer(this.b_dot_26),this.b_dot_27.setIndex(26),this.multibuffertilde_01_buffer26=new Float32Buffer(this.b_dot_27),this.b_dot_28.setIndex(27),this.multibuffertilde_01_buffer27=new Float32Buffer(this.b_dot_28),this.b_dot_29.setIndex(28),this.multibuffertilde_01_buffer28=new Float32Buffer(this.b_dot_29),this.b_dot_30.setIndex(29),this.multibuffertilde_01_buffer29=new Float32Buffer(this.b_dot_30),this.b_dot_31.setIndex(30),this.multibuffertilde_01_buffer30=new Float32Buffer(this.b_dot_31),this.b_dot_32.setIndex(31),this.multibuffertilde_01_buffer31=new Float32Buffer(this.b_dot_32),this.b_dot_33.setIndex(32),this.multibuffertilde_01_buffer32=new Float32Buffer(this.b_dot_33),this.b_dot_34.setIndex(33),this.multibuffertilde_01_buffer33=new Float32Buffer(this.b_dot_34),this.samples.setIndex(-1),this.multibuffertilde_01_buffer=new Float32MultiBuffer(this.samples),this.initializeObjects(),this.allocateDataRefs(),this.startup()}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){this.p_22=new RNBOSubpatcher_400,this.p_22.setEngineAndPatcher(this.getEngine(),this),this.p_22.initialize(),this.p_22.setParameterOffset(this.getParameterOffset(this.p_22)),this.p_23=new RNBOSubpatcher_401,this.p_23.setEngineAndPatcher(this.getEngine(),this),this.p_23.initialize(),this.p_23.setParameterOffset(this.getParameterOffset(this.p_23)),this.p_24=new RNBOSubpatcher_402,this.p_24.setEngineAndPatcher(this.getEngine(),this),this.p_24.initialize(),this.p_24.setParameterOffset(this.getParameterOffset(this.p_24)),this.p_25=new RNBOSubpatcher_403,this.p_25.setEngineAndPatcher(this.getEngine(),this),this.p_25.initialize(),this.p_25.setParameterOffset(this.getParameterOffset(this.p_25)),this.p_26=new RNBOSubpatcher_404,this.p_26.setEngineAndPatcher(this.getEngine(),this),this.p_26.initialize(),this.p_26.setParameterOffset(this.getParameterOffset(this.p_26)),this.p_27=new RNBOSubpatcher_405,this.p_27.setEngineAndPatcher(this.getEngine(),this),this.p_27.initialize(),this.p_27.setParameterOffset(this.getParameterOffset(this.p_27)),this.p_28=new RNBOSubpatcher_406,this.p_28.setEngineAndPatcher(this.getEngine(),this),this.p_28.initialize(),this.p_28.setParameterOffset(this.getParameterOffset(this.p_28))}processTempoEvent(e,t){this.updateTime(e),this.globaltransport_setTempo(t,!1)&&(this.p_22.processTempoEvent(e,t),this.p_23.processTempoEvent(e,t),this.p_24.processTempoEvent(e,t),this.p_25.processTempoEvent(e,t),this.p_26.processTempoEvent(e,t),this.p_27.processTempoEvent(e,t),this.p_28.processTempoEvent(e,t))}processTransportEvent(e,t){this.updateTime(e),this.globaltransport_setState(t,!1)&&(this.p_22.processTransportEvent(e,t),this.p_23.processTransportEvent(e,t),this.p_24.processTransportEvent(e,t),this.p_25.processTransportEvent(e,t),this.p_26.processTransportEvent(e,t),this.p_27.processTransportEvent(e,t),this.p_28.processTransportEvent(e,t))}processBeatTimeEvent(e,t){this.updateTime(e),this.globaltransport_setBeatTime(t,!1)&&(this.p_22.processBeatTimeEvent(e,t),this.p_23.processBeatTimeEvent(e,t),this.p_24.processBeatTimeEvent(e,t),this.p_25.processBeatTimeEvent(e,t),this.p_26.processBeatTimeEvent(e,t),this.p_27.processBeatTimeEvent(e,t),this.p_28.processBeatTimeEvent(e,t))}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){this.updateTime(e),this.globaltransport_setTimeSignature(t,r,!1)&&(this.p_22.processTimeSignatureEvent(e,t,r),this.p_23.processTimeSignatureEvent(e,t,r),this.p_24.processTimeSignatureEvent(e,t,r),this.p_25.processTimeSignatureEvent(e,t,r),this.p_26.processTimeSignatureEvent(e,t,r),this.p_27.processTimeSignatureEvent(e,t,r),this.p_28.processTimeSignatureEvent(e,t,r))}setParameterValue(e,t,r){RNBO_UNUSED(t),this.updateTime(r),(e-=0)<this.p_22.getNumParameters()&&this.p_22.setParameterValue(e,t,r),(e-=this.p_22.getNumParameters())<this.p_23.getNumParameters()&&this.p_23.setParameterValue(e,t,r),(e-=this.p_23.getNumParameters())<this.p_24.getNumParameters()&&this.p_24.setParameterValue(e,t,r),(e-=this.p_24.getNumParameters())<this.p_25.getNumParameters()&&this.p_25.setParameterValue(e,t,r),(e-=this.p_25.getNumParameters())<this.p_26.getNumParameters()&&this.p_26.setParameterValue(e,t,r),(e-=this.p_26.getNumParameters())<this.p_27.getNumParameters()&&this.p_27.setParameterValue(e,t,r),(e-=this.p_27.getNumParameters())<this.p_28.getNumParameters()&&this.p_28.setParameterValue(e,t,r)}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return(e-=0)<this.p_22.getNumParameters()?this.p_22.getParameterValue(e):(e-=this.p_22.getNumParameters())<this.p_23.getNumParameters()?this.p_23.getParameterValue(e):(e-=this.p_23.getNumParameters())<this.p_24.getNumParameters()?this.p_24.getParameterValue(e):(e-=this.p_24.getNumParameters())<this.p_25.getNumParameters()?this.p_25.getParameterValue(e):(e-=this.p_25.getNumParameters())<this.p_26.getNumParameters()?this.p_26.getParameterValue(e):(e-=this.p_26.getNumParameters())<this.p_27.getNumParameters()?this.p_27.getParameterValue(e):(e-=this.p_27.getNumParameters())<this.p_28.getNumParameters()?this.p_28.getParameterValue(e):0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0+this.p_22.getNumParameters()+this.p_23.getNumParameters()+this.p_24.getNumParameters()+this.p_25.getNumParameters()+this.p_26.getNumParameters()+this.p_27.getNumParameters()+this.p_28.getNumParameters()}getParameterName(e){return(e-=0)<this.p_22.getNumParameters()?this.p_22.getParameterName(e):(e-=this.p_22.getNumParameters())<this.p_23.getNumParameters()?this.p_23.getParameterName(e):(e-=this.p_23.getNumParameters())<this.p_24.getNumParameters()?this.p_24.getParameterName(e):(e-=this.p_24.getNumParameters())<this.p_25.getNumParameters()?this.p_25.getParameterName(e):(e-=this.p_25.getNumParameters())<this.p_26.getNumParameters()?this.p_26.getParameterName(e):(e-=this.p_26.getNumParameters())<this.p_27.getNumParameters()?this.p_27.getParameterName(e):(e-=this.p_27.getNumParameters())<this.p_28.getNumParameters()?this.p_28.getParameterName(e):\"bogus\"}getParameterId(e){return(e-=0)<this.p_22.getNumParameters()?this.p_22.getParameterId(e):(e-=this.p_22.getNumParameters())<this.p_23.getNumParameters()?this.p_23.getParameterId(e):(e-=this.p_23.getNumParameters())<this.p_24.getNumParameters()?this.p_24.getParameterId(e):(e-=this.p_24.getNumParameters())<this.p_25.getNumParameters()?this.p_25.getParameterId(e):(e-=this.p_25.getNumParameters())<this.p_26.getNumParameters()?this.p_26.getParameterId(e):(e-=this.p_26.getNumParameters())<this.p_27.getNumParameters()?this.p_27.getParameterId(e):(e-=this.p_27.getNumParameters())<this.p_28.getNumParameters()?this.p_28.getParameterId(e):\"bogus\"}getParameterInfo(e,t){(e-=0)<this.p_22.getNumParameters()&&this.p_22.getParameterInfo(e,t),(e-=this.p_22.getNumParameters())<this.p_23.getNumParameters()&&this.p_23.getParameterInfo(e,t),(e-=this.p_23.getNumParameters())<this.p_24.getNumParameters()&&this.p_24.getParameterInfo(e,t),(e-=this.p_24.getNumParameters())<this.p_25.getNumParameters()&&this.p_25.getParameterInfo(e,t),(e-=this.p_25.getNumParameters())<this.p_26.getNumParameters()&&this.p_26.getParameterInfo(e,t),(e-=this.p_26.getNumParameters())<this.p_27.getNumParameters()&&this.p_27.getParameterInfo(e,t),(e-=this.p_27.getNumParameters())<this.p_28.getNumParameters()&&this.p_28.getParameterInfo(e,t)}sendParameter(e){this.getEngine().notifyParameterValueChanged(e,this.getParameterValue(e))}getParameterOffset(e){return e==this.p_22?0:e==this.p_23?0+this.p_22.getNumParameters():e==this.p_24?0+this.p_22.getNumParameters()+this.p_23.getNumParameters():e==this.p_25?0+this.p_22.getNumParameters()+this.p_23.getNumParameters()+this.p_24.getNumParameters():e==this.p_26?0+this.p_22.getNumParameters()+this.p_23.getNumParameters()+this.p_24.getNumParameters()+this.p_25.getNumParameters():e==this.p_27?0+this.p_22.getNumParameters()+this.p_23.getNumParameters()+this.p_24.getNumParameters()+this.p_25.getNumParameters()+this.p_26.getNumParameters():e==this.p_28?0+this.p_22.getNumParameters()+this.p_23.getNumParameters()+this.p_24.getNumParameters()+this.p_25.getNumParameters()+this.p_26.getNumParameters()+this.p_27.getNumParameters():0}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return(e-=0)<this.p_22.getNumParameters()?this.p_22.convertToNormalizedParameterValue(e,t):(e-=this.p_22.getNumParameters())<this.p_23.getNumParameters()?this.p_23.convertToNormalizedParameterValue(e,t):(e-=this.p_23.getNumParameters())<this.p_24.getNumParameters()?this.p_24.convertToNormalizedParameterValue(e,t):(e-=this.p_24.getNumParameters())<this.p_25.getNumParameters()?this.p_25.convertToNormalizedParameterValue(e,t):(e-=this.p_25.getNumParameters())<this.p_26.getNumParameters()?this.p_26.convertToNormalizedParameterValue(e,t):(e-=this.p_26.getNumParameters())<this.p_27.getNumParameters()?this.p_27.convertToNormalizedParameterValue(e,t):(e-=this.p_27.getNumParameters())<this.p_28.getNumParameters()?this.p_28.convertToNormalizedParameterValue(e,t):t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t,(e-=0)<this.p_22.getNumParameters()?this.p_22.convertFromNormalizedParameterValue(e,t):(e-=this.p_22.getNumParameters())<this.p_23.getNumParameters()?this.p_23.convertFromNormalizedParameterValue(e,t):(e-=this.p_23.getNumParameters())<this.p_24.getNumParameters()?this.p_24.convertFromNormalizedParameterValue(e,t):(e-=this.p_24.getNumParameters())<this.p_25.getNumParameters()?this.p_25.convertFromNormalizedParameterValue(e,t):(e-=this.p_25.getNumParameters())<this.p_26.getNumParameters()?this.p_26.convertFromNormalizedParameterValue(e,t):(e-=this.p_26.getNumParameters())<this.p_27.getNumParameters()?this.p_27.convertFromNormalizedParameterValue(e,t):(e-=this.p_27.getNumParameters())<this.p_28.getNumParameters()?this.p_28.convertFromNormalizedParameterValue(e,t):t}constrainParameterValue(e,t){return(e-=0)<this.p_22.getNumParameters()?this.p_22.constrainParameterValue(e,t):(e-=this.p_22.getNumParameters())<this.p_23.getNumParameters()?this.p_23.constrainParameterValue(e,t):(e-=this.p_23.getNumParameters())<this.p_24.getNumParameters()?this.p_24.constrainParameterValue(e,t):(e-=this.p_24.getNumParameters())<this.p_25.getNumParameters()?this.p_25.constrainParameterValue(e,t):(e-=this.p_25.getNumParameters())<this.p_26.getNumParameters()?this.p_26.constrainParameterValue(e,t):(e-=this.p_26.getNumParameters())<this.p_27.getNumParameters()?this.p_27.constrainParameterValue(e,t):(e-=this.p_27.getNumParameters())<this.p_28.getNumParameters()?this.p_28.constrainParameterValue(e,t):t}scheduleParamInit(e,t){this.paramInitIndices.push(e),this.paramInitOrder.push(t)}processParamInitEvents(){this.listquicksort(this.paramInitOrder,this.paramInitIndices,0,this.paramInitOrder.length-1,!0);for(var e=0;e<this.paramInitOrder.length;e++)this.getEngine().scheduleParameterChange(this.paramInitIndices[e],this.getParameterValue(this.paramInitIndices[e]),0)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"state\"):this.inport_18_value_number_set(s);break;case TAG(\"rate\"):this.inport_19_value_number_set(s);break;case TAG(\"global_cycle\"):this.inport_20_value_number_set(s)}this.p_22.processNumMessage(e,t,r,s),this.p_23.processNumMessage(e,t,r,s),this.p_24.processNumMessage(e,t,r,s),this.p_25.processNumMessage(e,t,r,s),this.p_26.processNumMessage(e,t,r,s),this.p_27.processNumMessage(e,t,r,s),this.p_28.processNumMessage(e,t,r,s)}processListMessage(e,t,r,s){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"state\"):this.inport_18_value_list_set(s);break;case TAG(\"rate\"):this.inport_19_value_list_set(s);break;case TAG(\"global_cycle\"):this.inport_20_value_list_set(s)}this.p_22.processListMessage(e,t,r,s),this.p_23.processListMessage(e,t,r,s),this.p_24.processListMessage(e,t,r,s),this.p_25.processListMessage(e,t,r,s),this.p_26.processListMessage(e,t,r,s),this.p_27.processListMessage(e,t,r,s),this.p_28.processListMessage(e,t,r,s)}processBangMessage(e,t,r){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"state\"):this.inport_18_value_bang_bang();break;case TAG(\"rate\"):this.inport_19_value_bang_bang();break;case TAG(\"global_cycle\"):this.inport_20_value_bang_bang()}this.p_22.processBangMessage(e,t,r),this.p_23.processBangMessage(e,t,r),this.p_24.processBangMessage(e,t,r),this.p_25.processBangMessage(e,t,r),this.p_26.processBangMessage(e,t,r),this.p_27.processBangMessage(e,t,r),this.p_28.processBangMessage(e,t,r)}resolveTag(e){switch(e){case TAG(\"state\"):return\"state\";case TAG(\"\"):return\"\";case TAG(\"rate\"):return\"rate\";case TAG(\"global_cycle\"):return\"global_cycle\"}var t=this.p_22.resolveTag(e);if(t)return t;var r=this.p_23.resolveTag(e);if(r)return r;var s=this.p_24.resolveTag(e);if(s)return s;var a=this.p_25.resolveTag(e);if(a)return a;var i=this.p_26.resolveTag(e);if(i)return i;var n=this.p_27.resolveTag(e);if(n)return n;var h=this.p_28.resolveTag(e);return h||\"\"}getNumMessages(){return 11}getMessageInfo(e){switch(e){case 0:return{tag:\"state\",type:Inport};case 1:return{tag:\"rate\",type:Inport};case 2:return{tag:\"global_cycle\",type:Inport};case 3:return{tag:\"sampler_params\",type:Inport};case 4:return{tag:\"pips\",type:Outport};case 5:return{tag:\"blip\",type:Outport};case 6:return{tag:\"polymetric_params\",type:Inport};case 7:return{tag:\"chordfollow\",type:Inport};case 8:return{tag:\"chordsampler\",type:Inport};case 9:return{tag:\"chordscale\",type:Inport};case 10:return{tag:\"retrigger_params\",type:Inport}}return NullMessageInfo}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this}}rnboObj=new RNBOPatcher;",
  "wasm": "",
  "wasmEncoding": "base64",
  "presets": [
    {
      "name": "main",
      "preset": {
        "__sps": {
          "p_obj-1": {
            "__sps": {
              "p_obj-12": {
                "__sps": {
                  "p_obj-60": {}
                }
              },
              "p_obj-2": {
                "__sps": {
                  "p_obj-60": {}
                }
              }
            }
          },
          "p_obj-17": {
            "__sps": {
              "p_obj-25": {},
              "p_obj-29": {},
              "p_obj-3": {}
            }
          },
          "p_obj-18": {
            "__sps": {
              "p_obj-2": {},
              "p_obj-4": {}
            }
          },
          "p_obj-3": {
            "__sps": {
              "p_obj-14": {
                "__sps": {
                  "p_obj-60": {}
                }
              },
              "p_obj-16": {
                "__sps": {
                  "p_obj-60": {}
                }
              },
              "p_obj-17": {
                "__sps": {
                  "p_obj-60": {}
                }
              },
              "p_obj-18": {
                "__sps": {
                  "p_obj-60": {}
                }
              }
            }
          },
          "p_obj-50": {},
          "p_obj-57": {
            "__sps": {
              "p_obj-2": {},
              "p_obj-4": {},
              "p_obj-6": {},
              "p_obj-8": {}
            }
          },
          "p_obj-64": {}
        }
      }
    }
  ]
}