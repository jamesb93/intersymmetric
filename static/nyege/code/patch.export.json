{
	"desc": {
		"parameters": [],
		"numParameters": 0,
		"numSignalInParameters": 0,
		"numSignalOutParameters": 0,
		"numInputChannels": 0,
		"numOutputChannels": 1,
		"numMidiInputPorts": 0,
		"numMidiOutputPorts": 0,
		"externalDataRefs": [
			{
				"id": "b23"
			},
			{
				"id": "b22"
			},
			{
				"id": "b21"
			},
			{
				"id": "b20"
			},
			{
				"id": "b3"
			},
			{
				"id": "b2"
			},
			{
				"id": "b1"
			},
			{
				"id": "b0"
			},
			{
				"id": "b27"
			},
			{
				"id": "b26"
			},
			{
				"id": "b25"
			},
			{
				"id": "b24"
			},
			{
				"id": "b7"
			},
			{
				"id": "b6"
			},
			{
				"id": "b5"
			},
			{
				"id": "b4"
			},
			{
				"id": "b31"
			},
			{
				"id": "b30"
			},
			{
				"id": "b29"
			},
			{
				"id": "b28"
			},
			{
				"id": "b11"
			},
			{
				"id": "b10"
			},
			{
				"id": "b9"
			},
			{
				"id": "b8"
			},
			{
				"id": "b33"
			},
			{
				"id": "b32"
			},
			{
				"id": "b15"
			},
			{
				"id": "b14"
			},
			{
				"id": "b13"
			},
			{
				"id": "b12"
			},
			{
				"id": "b19"
			},
			{
				"id": "b18"
			},
			{
				"id": "b17"
			},
			{
				"id": "b16"
			}
		],
		"patcherSerial": 0,
		"inports": [
			"rate",
			"range",
			"subdiv",
			"global_cycle",
			"retrigger_cycle",
			"chord_params",
			"sound",
			"pitch",
			"length"
		],
		"outports": [],
		"inlets": [],
		"outlets": [
			{
				"type": "signal",
				"index": 1,
				"tag": "out1"
			}
		],
		"paramConversion": {
			"applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
			"convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_17.getNumParameters())\n            return this.p_17.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_17.getNumParameters();\n\n        if (index < this.p_18.getNumParameters())\n            return this.p_18.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_18.getNumParameters();\n\n        if (index < this.p_19.getNumParameters())\n            return this.p_19.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_19.getNumParameters();\n\n        if (index < this.p_20.getNumParameters())\n            return this.p_20.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_20.getNumParameters();\n\n        if (index < this.p_21.getNumParameters())\n            return this.p_21.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_21.getNumParameters();\n\n        if (index < this.p_22.getNumParameters())\n            return this.p_22.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_22.getNumParameters();\n\n        if (index < this.p_23.getNumParameters())\n            return this.p_23.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
			"convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_17.getNumParameters())\n            return this.p_17.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_17.getNumParameters();\n\n        if (index < this.p_18.getNumParameters())\n            return this.p_18.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_18.getNumParameters();\n\n        if (index < this.p_19.getNumParameters())\n            return this.p_19.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_19.getNumParameters();\n\n        if (index < this.p_20.getNumParameters())\n            return this.p_20.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_20.getNumParameters();\n\n        if (index < this.p_21.getNumParameters())\n            return this.p_21.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_21.getNumParameters();\n\n        if (index < this.p_22.getNumParameters())\n            return this.p_22.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_22.getNumParameters();\n\n        if (index < this.p_23.getNumParameters())\n            return this.p_23.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
			"getNumParameters": "function getNumParameters() {\n    return 0 + this.p_17.getNumParameters() + this.p_18.getNumParameters() + this.p_19.getNumParameters() + this.p_20.getNumParameters() + this.p_21.getNumParameters() + this.p_22.getNumParameters() + this.p_23.getNumParameters();\n}",
			"constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_17.getNumParameters())\n            return this.p_17.constrainParameterValue(index, value);\n\n        index -= this.p_17.getNumParameters();\n\n        if (index < this.p_18.getNumParameters())\n            return this.p_18.constrainParameterValue(index, value);\n\n        index -= this.p_18.getNumParameters();\n\n        if (index < this.p_19.getNumParameters())\n            return this.p_19.constrainParameterValue(index, value);\n\n        index -= this.p_19.getNumParameters();\n\n        if (index < this.p_20.getNumParameters())\n            return this.p_20.constrainParameterValue(index, value);\n\n        index -= this.p_20.getNumParameters();\n\n        if (index < this.p_21.getNumParameters())\n            return this.p_21.constrainParameterValue(index, value);\n\n        index -= this.p_21.getNumParameters();\n\n        if (index < this.p_22.getNumParameters())\n            return this.p_22.constrainParameterValue(index, value);\n\n        index -= this.p_22.getNumParameters();\n\n        if (index < this.p_23.getNumParameters())\n            return this.p_23.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
			"subpatches": {
				"p_17": {
					"applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
					"convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_01.getNumParameters())\n            return this.p_01.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_01.getNumParameters();\n\n        if (index < this.p_02.getNumParameters())\n            return this.p_02.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_02.getNumParameters();\n\n        if (index < this.p_03.getNumParameters())\n            return this.p_03.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_03.getNumParameters();\n\n        if (index < this.p_04.getNumParameters())\n            return this.p_04.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
					"convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_01.getNumParameters())\n            return this.p_01.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_01.getNumParameters();\n\n        if (index < this.p_02.getNumParameters())\n            return this.p_02.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_02.getNumParameters();\n\n        if (index < this.p_03.getNumParameters())\n            return this.p_03.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_03.getNumParameters();\n\n        if (index < this.p_04.getNumParameters())\n            return this.p_04.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
					"getNumParameters": "function getNumParameters() {\n    return 0 + this.p_01.getNumParameters() + this.p_02.getNumParameters() + this.p_03.getNumParameters() + this.p_04.getNumParameters();\n}",
					"constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_01.getNumParameters())\n            return this.p_01.constrainParameterValue(index, value);\n\n        index -= this.p_01.getNumParameters();\n\n        if (index < this.p_02.getNumParameters())\n            return this.p_02.constrainParameterValue(index, value);\n\n        index -= this.p_02.getNumParameters();\n\n        if (index < this.p_03.getNumParameters())\n            return this.p_03.constrainParameterValue(index, value);\n\n        index -= this.p_03.getNumParameters();\n\n        if (index < this.p_04.getNumParameters())\n            return this.p_04.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
					"subpatches": {
						"p_01": {
							"applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
							"convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
							"convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
							"getNumParameters": "function getNumParameters() {\n    return 0;\n}",
							"constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
							"subpatches": {},
							"isPolyphonic": false
						},
						"p_02": {
							"applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
							"convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
							"convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
							"getNumParameters": "function getNumParameters() {\n    return 0;\n}",
							"constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
							"subpatches": {},
							"isPolyphonic": false
						},
						"p_03": {
							"applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
							"convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
							"convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
							"getNumParameters": "function getNumParameters() {\n    return 0;\n}",
							"constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
							"subpatches": {},
							"isPolyphonic": false
						},
						"p_04": {
							"applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
							"convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
							"convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
							"getNumParameters": "function getNumParameters() {\n    return 0;\n}",
							"constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
							"subpatches": {},
							"isPolyphonic": false
						}
					},
					"isPolyphonic": false
				},
				"p_18": {
					"applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
					"convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_05.getNumParameters())\n            return this.p_05.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_05.getNumParameters();\n\n        if (index < this.p_06.getNumParameters())\n            return this.p_06.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_06.getNumParameters();\n\n        if (index < this.p_07.getNumParameters())\n            return this.p_07.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_07.getNumParameters();\n\n        if (index < this.p_08.getNumParameters())\n            return this.p_08.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_08.getNumParameters();\n\n        if (index < this.p_09.getNumParameters())\n            return this.p_09.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
					"convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_05.getNumParameters())\n            return this.p_05.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_05.getNumParameters();\n\n        if (index < this.p_06.getNumParameters())\n            return this.p_06.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_06.getNumParameters();\n\n        if (index < this.p_07.getNumParameters())\n            return this.p_07.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_07.getNumParameters();\n\n        if (index < this.p_08.getNumParameters())\n            return this.p_08.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_08.getNumParameters();\n\n        if (index < this.p_09.getNumParameters())\n            return this.p_09.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
					"getNumParameters": "function getNumParameters() {\n    return 0 + this.p_05.getNumParameters() + this.p_06.getNumParameters() + this.p_07.getNumParameters() + this.p_08.getNumParameters() + this.p_09.getNumParameters();\n}",
					"constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_05.getNumParameters())\n            return this.p_05.constrainParameterValue(index, value);\n\n        index -= this.p_05.getNumParameters();\n\n        if (index < this.p_06.getNumParameters())\n            return this.p_06.constrainParameterValue(index, value);\n\n        index -= this.p_06.getNumParameters();\n\n        if (index < this.p_07.getNumParameters())\n            return this.p_07.constrainParameterValue(index, value);\n\n        index -= this.p_07.getNumParameters();\n\n        if (index < this.p_08.getNumParameters())\n            return this.p_08.constrainParameterValue(index, value);\n\n        index -= this.p_08.getNumParameters();\n\n        if (index < this.p_09.getNumParameters())\n            return this.p_09.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
					"subpatches": {
						"p_05": {
							"applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
							"convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
							"convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
							"getNumParameters": "function getNumParameters() {\n    return 0;\n}",
							"constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
							"subpatches": {},
							"isPolyphonic": false
						},
						"p_06": {
							"applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
							"convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
							"convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
							"getNumParameters": "function getNumParameters() {\n    return 0;\n}",
							"constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
							"subpatches": {},
							"isPolyphonic": false
						},
						"p_07": {
							"applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
							"convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
							"convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
							"getNumParameters": "function getNumParameters() {\n    return 0;\n}",
							"constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
							"subpatches": {},
							"isPolyphonic": false
						},
						"p_08": {
							"applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
							"convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
							"convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
							"getNumParameters": "function getNumParameters() {\n    return 0;\n}",
							"constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
							"subpatches": {},
							"isPolyphonic": false
						},
						"p_09": {
							"applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
							"convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
							"convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
							"getNumParameters": "function getNumParameters() {\n    return 0;\n}",
							"constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
							"subpatches": {},
							"isPolyphonic": false
						}
					},
					"isPolyphonic": false
				},
				"p_19": {
					"applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
					"convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_10.getNumParameters())\n            return this.p_10.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_10.getNumParameters();\n\n        if (index < this.p_11.getNumParameters())\n            return this.p_11.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
					"convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_10.getNumParameters())\n            return this.p_10.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_10.getNumParameters();\n\n        if (index < this.p_11.getNumParameters())\n            return this.p_11.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
					"getNumParameters": "function getNumParameters() {\n    return 0 + this.p_10.getNumParameters() + this.p_11.getNumParameters();\n}",
					"constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_10.getNumParameters())\n            return this.p_10.constrainParameterValue(index, value);\n\n        index -= this.p_10.getNumParameters();\n\n        if (index < this.p_11.getNumParameters())\n            return this.p_11.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
					"subpatches": {
						"p_10": {
							"applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
							"convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
							"convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
							"getNumParameters": "function getNumParameters() {\n    return 0;\n}",
							"constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
							"subpatches": {},
							"isPolyphonic": false
						},
						"p_11": {
							"applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
							"convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
							"convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
							"getNumParameters": "function getNumParameters() {\n    return 0;\n}",
							"constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
							"subpatches": {},
							"isPolyphonic": false
						}
					},
					"isPolyphonic": false
				},
				"p_20": {
					"applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
					"convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_12.getNumParameters())\n            return this.p_12.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_12.getNumParameters();\n\n        if (index < this.p_13.getNumParameters())\n            return this.p_13.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
					"convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_12.getNumParameters())\n            return this.p_12.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_12.getNumParameters();\n\n        if (index < this.p_13.getNumParameters())\n            return this.p_13.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
					"getNumParameters": "function getNumParameters() {\n    return 0 + this.p_12.getNumParameters() + this.p_13.getNumParameters();\n}",
					"constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_12.getNumParameters())\n            return this.p_12.constrainParameterValue(index, value);\n\n        index -= this.p_12.getNumParameters();\n\n        if (index < this.p_13.getNumParameters())\n            return this.p_13.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
					"subpatches": {
						"p_12": {
							"applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
							"convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
							"convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
							"getNumParameters": "function getNumParameters() {\n    return 0;\n}",
							"constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
							"subpatches": {},
							"isPolyphonic": false
						},
						"p_13": {
							"applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
							"convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
							"convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
							"getNumParameters": "function getNumParameters() {\n    return 0;\n}",
							"constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
							"subpatches": {},
							"isPolyphonic": false
						}
					},
					"isPolyphonic": false
				},
				"p_21": {
					"applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
					"convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_14.getNumParameters())\n            return this.p_14.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
					"convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_14.getNumParameters())\n            return this.p_14.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
					"getNumParameters": "function getNumParameters() {\n    return 0 + this.p_14.getNumParameters();\n}",
					"constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_14.getNumParameters())\n            return this.p_14.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
					"subpatches": {
						"p_14": {
							"applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
							"convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
							"convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
							"getNumParameters": "function getNumParameters() {\n    return 0;\n}",
							"constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
							"subpatches": {},
							"isPolyphonic": false
						}
					},
					"isPolyphonic": false
				},
				"p_22": {
					"applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
					"convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_15.getNumParameters())\n            return this.p_15.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_15.getNumParameters();\n\n        if (index < this.p_16.getNumParameters())\n            return this.p_16.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
					"convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_15.getNumParameters())\n            return this.p_15.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_15.getNumParameters();\n\n        if (index < this.p_16.getNumParameters())\n            return this.p_16.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
					"getNumParameters": "function getNumParameters() {\n    return 0 + this.p_15.getNumParameters() + this.p_16.getNumParameters();\n}",
					"constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_15.getNumParameters())\n            return this.p_15.constrainParameterValue(index, value);\n\n        index -= this.p_15.getNumParameters();\n\n        if (index < this.p_16.getNumParameters())\n            return this.p_16.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
					"subpatches": {
						"p_15": {
							"applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
							"convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
							"convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
							"getNumParameters": "function getNumParameters() {\n    return 0;\n}",
							"constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
							"subpatches": {},
							"isPolyphonic": false
						},
						"p_16": {
							"applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
							"convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
							"convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
							"getNumParameters": "function getNumParameters() {\n    return 0;\n}",
							"constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
							"subpatches": {},
							"isPolyphonic": false
						}
					},
					"isPolyphonic": false
				},
				"p_23": {
					"applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
					"convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
					"convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
					"getNumParameters": "function getNumParameters() {\n    return 0;\n}",
					"constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
					"subpatches": {},
					"isPolyphonic": false
				}
			},
			"isPolyphonic": false
		},
		"rnboVersion": "0.17.0-dev.31",
		"meta": {
			"architecture": "x64",
			"maxversion": "8.5.0",
			"filename": "nyege.maxpat"
		},
		"options": {
			"classname": "rnbomatic",
			"minifyOutput": true
		}
	},
	"src": "class RNBOSubpatcher_152{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(2),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.groove_01_buffer=0,this.groove_01_playStatus=0,this.groove_01_setupDone=!1,this.data_01_buffer=0,this.data_01_setupDone=!1,this.data_02_buffer=0,this.data_02_setupDone=!1,this.data_03_buffer=0,this.data_03_setupDone=!1,this.data_04_buffer=0,this.data_04_setupDone=!1,this.data_05_buffer=0,this.data_05_setupDone=!1,this.data_06_buffer=0,this.data_06_setupDone=!1,this.data_07_buffer=0,this.data_07_setupDone=!1,this.data_08_buffer=0,this.data_08_setupDone=!1,this.data_09_buffer=0,this.data_09_setupDone=!1,this.data_10_buffer=0,this.data_10_setupDone=!1,this.data_11_buffer=0,this.data_11_setupDone=!1,this.data_12_buffer=0,this.data_12_setupDone=!1,this.data_13_buffer=0,this.data_13_setupDone=!1,this.data_14_buffer=0,this.data_14_setupDone=!1,this.data_15_buffer=0,this.data_15_setupDone=!1,this.data_16_buffer=0,this.data_16_setupDone=!1,this.data_17_buffer=0,this.data_17_setupDone=!1,this.data_18_buffer=0,this.data_18_setupDone=!1,this.data_19_buffer=0,this.data_19_setupDone=!1,this.data_20_buffer=0,this.data_20_setupDone=!1,this.data_21_buffer=0,this.data_21_setupDone=!1,this.data_22_buffer=0,this.data_22_setupDone=!1,this.data_23_buffer=0,this.data_23_setupDone=!1,this.data_24_buffer=0,this.data_24_setupDone=!1,this.data_25_buffer=0,this.data_25_setupDone=!1,this.data_26_buffer=0,this.data_26_setupDone=!1,this.data_27_buffer=0,this.data_27_setupDone=!1,this.data_28_buffer=0,this.data_28_setupDone=!1,this.data_29_buffer=0,this.data_29_setupDone=!1,this.data_30_buffer=0,this.data_30_setupDone=!1,this.data_31_buffer=0,this.data_31_setupDone=!1,this.data_32_buffer=0,this.data_32_setupDone=!1,this.data_33_buffer=0,this.data_33_setupDone=!1,this.data_34_buffer=0,this.data_34_setupDone=!1,this.groove_01_bufferobj=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,a,r){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 1}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,a){}setParameterValue(e,t,a){}processParameterEvent(e,t,a){this.setParameterValue(e,t,a)}processNormalizedParameterEvent(e,t,a){this.setParameterValueNormalized(e,t,a)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let a=1/(t-1);e=1*rnbo_fround(e/a*1/1)*a}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,a,r){switch(RNBO_UNUSED(r),RNBO_UNUSED(a),this.updateTime(e),t){case-798469121:this.line_01_target_bang()}}processOutletAtCurrentTime(e,t,a){}processOutletEvent(e,t,a,r){this.updateTime(r),this.processOutletAtCurrentTime(e,t,a)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,a,r){}processListMessage(e,t,a,r){}processBangMessage(e,t,a){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}zeroDataRef(e){e.setZero()}processDataViewUpdate(e,t){this.updateTime(t),-1!=e&&7!=e&&6!=e&&5!=e&&4!=e&&15!=e&&14!=e&&13!=e&&12!=e&&23!=e&&22!=e&&21!=e&&20!=e&&29!=e&&28!=e&&27!=e&&26!=e&&33!=e&&32!=e&&31!=e&&30!=e&&3!=e&&2!=e&&1!=e&&0!=e&&11!=e&&10!=e&&9!=e&&8!=e&&19!=e&&18!=e&&17!=e&&16!=e&&25!=e&&24!=e||(this.groove_01_buffer=new Float32MultiBuffer(this.groove_01_bufferobj)),0==e&&(this.data_01_buffer=new Float32Buffer(this.getPatcher().getPatcher().b23),this.data_01_bufferUpdated()),1==e&&(this.data_02_buffer=new Float32Buffer(this.getPatcher().getPatcher().b22),this.data_02_bufferUpdated()),2==e&&(this.data_03_buffer=new Float32Buffer(this.getPatcher().getPatcher().b21),this.data_03_bufferUpdated()),3==e&&(this.data_04_buffer=new Float32Buffer(this.getPatcher().getPatcher().b20),this.data_04_bufferUpdated()),4==e&&(this.data_05_buffer=new Float32Buffer(this.getPatcher().getPatcher().b3),this.data_05_bufferUpdated()),5==e&&(this.data_06_buffer=new Float32Buffer(this.getPatcher().getPatcher().b2),this.data_06_bufferUpdated()),6==e&&(this.data_07_buffer=new Float32Buffer(this.getPatcher().getPatcher().b1),this.data_07_bufferUpdated()),7==e&&(this.data_08_buffer=new Float32Buffer(this.getPatcher().getPatcher().b0),this.data_08_bufferUpdated()),8==e&&(this.data_09_buffer=new Float32Buffer(this.getPatcher().getPatcher().b27),this.data_09_bufferUpdated()),9==e&&(this.data_10_buffer=new Float32Buffer(this.getPatcher().getPatcher().b26),this.data_10_bufferUpdated()),10==e&&(this.data_11_buffer=new Float32Buffer(this.getPatcher().getPatcher().b25),this.data_11_bufferUpdated()),11==e&&(this.data_12_buffer=new Float32Buffer(this.getPatcher().getPatcher().b24),this.data_12_bufferUpdated()),12==e&&(this.data_13_buffer=new Float32Buffer(this.getPatcher().getPatcher().b7),this.data_13_bufferUpdated()),13==e&&(this.data_14_buffer=new Float32Buffer(this.getPatcher().getPatcher().b6),this.data_14_bufferUpdated()),14==e&&(this.data_15_buffer=new Float32Buffer(this.getPatcher().getPatcher().b5),this.data_15_bufferUpdated()),15==e&&(this.data_16_buffer=new Float32Buffer(this.getPatcher().getPatcher().b4),this.data_16_bufferUpdated()),16==e&&(this.data_17_buffer=new Float32Buffer(this.getPatcher().getPatcher().b31),this.data_17_bufferUpdated()),17==e&&(this.data_18_buffer=new Float32Buffer(this.getPatcher().getPatcher().b30),this.data_18_bufferUpdated()),18==e&&(this.data_19_buffer=new Float32Buffer(this.getPatcher().getPatcher().b29),this.data_19_bufferUpdated()),19==e&&(this.data_20_buffer=new Float32Buffer(this.getPatcher().getPatcher().b28),this.data_20_bufferUpdated()),20==e&&(this.data_21_buffer=new Float32Buffer(this.getPatcher().getPatcher().b11),this.data_21_bufferUpdated()),21==e&&(this.data_22_buffer=new Float32Buffer(this.getPatcher().getPatcher().b10),this.data_22_bufferUpdated()),22==e&&(this.data_23_buffer=new Float32Buffer(this.getPatcher().getPatcher().b9),this.data_23_bufferUpdated()),23==e&&(this.data_24_buffer=new Float32Buffer(this.getPatcher().getPatcher().b8),this.data_24_bufferUpdated()),24==e&&(this.data_25_buffer=new Float32Buffer(this.getPatcher().getPatcher().b33),this.data_25_bufferUpdated()),25==e&&(this.data_26_buffer=new Float32Buffer(this.getPatcher().getPatcher().b32),this.data_26_bufferUpdated()),26==e&&(this.data_27_buffer=new Float32Buffer(this.getPatcher().getPatcher().b15),this.data_27_bufferUpdated()),27==e&&(this.data_28_buffer=new Float32Buffer(this.getPatcher().getPatcher().b14),this.data_28_bufferUpdated()),28==e&&(this.data_29_buffer=new Float32Buffer(this.getPatcher().getPatcher().b13),this.data_29_bufferUpdated()),29==e&&(this.data_30_buffer=new Float32Buffer(this.getPatcher().getPatcher().b12),this.data_30_bufferUpdated()),30==e&&(this.data_31_buffer=new Float32Buffer(this.getPatcher().getPatcher().b19),this.data_31_bufferUpdated()),31==e&&(this.data_32_buffer=new Float32Buffer(this.getPatcher().getPatcher().b18),this.data_32_bufferUpdated()),32==e&&(this.data_33_buffer=new Float32Buffer(this.getPatcher().getPatcher().b17),this.data_33_bufferUpdated()),33==e&&(this.data_34_buffer=new Float32Buffer(this.getPatcher().getPatcher().b16),this.data_34_bufferUpdated())}initialize(){this.groove_01_bufferobj=initMultiRef(this.getPatcher().getPatcher().b0,this.getPatcher().getPatcher().b1,this.getPatcher().getPatcher().b2,this.getPatcher().getPatcher().b3,this.getPatcher().getPatcher().b4,this.getPatcher().getPatcher().b5,this.getPatcher().getPatcher().b6,this.getPatcher().getPatcher().b7,this.getPatcher().getPatcher().b8,this.getPatcher().getPatcher().b9,this.getPatcher().getPatcher().b10,this.getPatcher().getPatcher().b11,this.getPatcher().getPatcher().b12,this.getPatcher().getPatcher().b13,this.getPatcher().getPatcher().b14,this.getPatcher().getPatcher().b15,this.getPatcher().getPatcher().b16,this.getPatcher().getPatcher().b17,this.getPatcher().getPatcher().b18,this.getPatcher().getPatcher().b19,this.getPatcher().getPatcher().b20,this.getPatcher().getPatcher().b21,this.getPatcher().getPatcher().b22,this.getPatcher().getPatcher().b23,this.getPatcher().getPatcher().b24,this.getPatcher().getPatcher().b25,this.getPatcher().getPatcher().b26,this.getPatcher().getPatcher().b27,this.getPatcher().getPatcher().b28,this.getPatcher().getPatcher().b29,this.getPatcher().getPatcher().b30,this.getPatcher().getPatcher().b31,this.getPatcher().getPatcher().b32,this.getPatcher().getPatcher().b33),this.assign_defaults(),this.setState(),this.groove_01_bufferobj.setIndex(-1),this.groove_01_buffer=new Float32MultiBuffer(this.groove_01_bufferobj),this.data_01_buffer=new Float32Buffer(this.getPatcher().getPatcher().b23),this.data_02_buffer=new Float32Buffer(this.getPatcher().getPatcher().b22),this.data_03_buffer=new Float32Buffer(this.getPatcher().getPatcher().b21),this.data_04_buffer=new Float32Buffer(this.getPatcher().getPatcher().b20),this.data_05_buffer=new Float32Buffer(this.getPatcher().getPatcher().b3),this.data_06_buffer=new Float32Buffer(this.getPatcher().getPatcher().b2),this.data_07_buffer=new Float32Buffer(this.getPatcher().getPatcher().b1),this.data_08_buffer=new Float32Buffer(this.getPatcher().getPatcher().b0),this.data_09_buffer=new Float32Buffer(this.getPatcher().getPatcher().b27),this.data_10_buffer=new Float32Buffer(this.getPatcher().getPatcher().b26),this.data_11_buffer=new Float32Buffer(this.getPatcher().getPatcher().b25),this.data_12_buffer=new Float32Buffer(this.getPatcher().getPatcher().b24),this.data_13_buffer=new Float32Buffer(this.getPatcher().getPatcher().b7),this.data_14_buffer=new Float32Buffer(this.getPatcher().getPatcher().b6),this.data_15_buffer=new Float32Buffer(this.getPatcher().getPatcher().b5),this.data_16_buffer=new Float32Buffer(this.getPatcher().getPatcher().b4),this.data_17_buffer=new Float32Buffer(this.getPatcher().getPatcher().b31),this.data_18_buffer=new Float32Buffer(this.getPatcher().getPatcher().b30),this.data_19_buffer=new Float32Buffer(this.getPatcher().getPatcher().b29),this.data_20_buffer=new Float32Buffer(this.getPatcher().getPatcher().b28),this.data_21_buffer=new Float32Buffer(this.getPatcher().getPatcher().b11),this.data_22_buffer=new Float32Buffer(this.getPatcher().getPatcher().b10),this.data_23_buffer=new Float32Buffer(this.getPatcher().getPatcher().b9),this.data_24_buffer=new Float32Buffer(this.getPatcher().getPatcher().b8),this.data_25_buffer=new Float32Buffer(this.getPatcher().getPatcher().b33),this.data_26_buffer=new Float32Buffer(this.getPatcher().getPatcher().b32),this.data_27_buffer=new Float32Buffer(this.getPatcher().getPatcher().b15),this.data_28_buffer=new Float32Buffer(this.getPatcher().getPatcher().b14),this.data_29_buffer=new Float32Buffer(this.getPatcher().getPatcher().b13),this.data_30_buffer=new Float32Buffer(this.getPatcher().getPatcher().b12),this.data_31_buffer=new Float32Buffer(this.getPatcher().getPatcher().b19),this.data_32_buffer=new Float32Buffer(this.getPatcher().getPatcher().b18),this.data_33_buffer=new Float32Buffer(this.getPatcher().getPatcher().b17),this.data_34_buffer=new Float32Buffer(this.getPatcher().getPatcher().b16)}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_153{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(2),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.groove_02_buffer=0,this.groove_02_playStatus=0,this.groove_02_setupDone=!1,this.data_35_buffer=0,this.data_35_setupDone=!1,this.data_36_buffer=0,this.data_36_setupDone=!1,this.data_37_buffer=0,this.data_37_setupDone=!1,this.data_38_buffer=0,this.data_38_setupDone=!1,this.data_39_buffer=0,this.data_39_setupDone=!1,this.data_40_buffer=0,this.data_40_setupDone=!1,this.data_41_buffer=0,this.data_41_setupDone=!1,this.data_42_buffer=0,this.data_42_setupDone=!1,this.data_43_buffer=0,this.data_43_setupDone=!1,this.data_44_buffer=0,this.data_44_setupDone=!1,this.data_45_buffer=0,this.data_45_setupDone=!1,this.data_46_buffer=0,this.data_46_setupDone=!1,this.data_47_buffer=0,this.data_47_setupDone=!1,this.data_48_buffer=0,this.data_48_setupDone=!1,this.data_49_buffer=0,this.data_49_setupDone=!1,this.data_50_buffer=0,this.data_50_setupDone=!1,this.data_51_buffer=0,this.data_51_setupDone=!1,this.data_52_buffer=0,this.data_52_setupDone=!1,this.data_53_buffer=0,this.data_53_setupDone=!1,this.data_54_buffer=0,this.data_54_setupDone=!1,this.data_55_buffer=0,this.data_55_setupDone=!1,this.data_56_buffer=0,this.data_56_setupDone=!1,this.data_57_buffer=0,this.data_57_setupDone=!1,this.data_58_buffer=0,this.data_58_setupDone=!1,this.data_59_buffer=0,this.data_59_setupDone=!1,this.data_60_buffer=0,this.data_60_setupDone=!1,this.data_61_buffer=0,this.data_61_setupDone=!1,this.data_62_buffer=0,this.data_62_setupDone=!1,this.data_63_buffer=0,this.data_63_setupDone=!1,this.data_64_buffer=0,this.data_64_setupDone=!1,this.data_65_buffer=0,this.data_65_setupDone=!1,this.data_66_buffer=0,this.data_66_setupDone=!1,this.data_67_buffer=0,this.data_67_setupDone=!1,this.data_68_buffer=0,this.data_68_setupDone=!1,this.groove_02_bufferobj=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,a,r){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 1}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,a){}setParameterValue(e,t,a){}processParameterEvent(e,t,a){this.setParameterValue(e,t,a)}processNormalizedParameterEvent(e,t,a){this.setParameterValueNormalized(e,t,a)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let a=1/(t-1);e=1*rnbo_fround(e/a*1/1)*a}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,a,r){switch(RNBO_UNUSED(r),RNBO_UNUSED(a),this.updateTime(e),t){case-798469121:this.line_02_target_bang()}}processOutletAtCurrentTime(e,t,a){}processOutletEvent(e,t,a,r){this.updateTime(r),this.processOutletAtCurrentTime(e,t,a)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,a,r){}processListMessage(e,t,a,r){}processBangMessage(e,t,a){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}zeroDataRef(e){e.setZero()}processDataViewUpdate(e,t){this.updateTime(t),-1!=e&&7!=e&&6!=e&&5!=e&&4!=e&&15!=e&&14!=e&&13!=e&&12!=e&&23!=e&&22!=e&&21!=e&&20!=e&&29!=e&&28!=e&&27!=e&&26!=e&&33!=e&&32!=e&&31!=e&&30!=e&&3!=e&&2!=e&&1!=e&&0!=e&&11!=e&&10!=e&&9!=e&&8!=e&&19!=e&&18!=e&&17!=e&&16!=e&&25!=e&&24!=e||(this.groove_02_buffer=new Float32MultiBuffer(this.groove_02_bufferobj)),0==e&&(this.data_35_buffer=new Float32Buffer(this.getPatcher().getPatcher().b23),this.data_35_bufferUpdated()),1==e&&(this.data_36_buffer=new Float32Buffer(this.getPatcher().getPatcher().b22),this.data_36_bufferUpdated()),2==e&&(this.data_37_buffer=new Float32Buffer(this.getPatcher().getPatcher().b21),this.data_37_bufferUpdated()),3==e&&(this.data_38_buffer=new Float32Buffer(this.getPatcher().getPatcher().b20),this.data_38_bufferUpdated()),4==e&&(this.data_39_buffer=new Float32Buffer(this.getPatcher().getPatcher().b3),this.data_39_bufferUpdated()),5==e&&(this.data_40_buffer=new Float32Buffer(this.getPatcher().getPatcher().b2),this.data_40_bufferUpdated()),6==e&&(this.data_41_buffer=new Float32Buffer(this.getPatcher().getPatcher().b1),this.data_41_bufferUpdated()),7==e&&(this.data_42_buffer=new Float32Buffer(this.getPatcher().getPatcher().b0),this.data_42_bufferUpdated()),8==e&&(this.data_43_buffer=new Float32Buffer(this.getPatcher().getPatcher().b27),this.data_43_bufferUpdated()),9==e&&(this.data_44_buffer=new Float32Buffer(this.getPatcher().getPatcher().b26),this.data_44_bufferUpdated()),10==e&&(this.data_45_buffer=new Float32Buffer(this.getPatcher().getPatcher().b25),this.data_45_bufferUpdated()),11==e&&(this.data_46_buffer=new Float32Buffer(this.getPatcher().getPatcher().b24),this.data_46_bufferUpdated()),12==e&&(this.data_47_buffer=new Float32Buffer(this.getPatcher().getPatcher().b7),this.data_47_bufferUpdated()),13==e&&(this.data_48_buffer=new Float32Buffer(this.getPatcher().getPatcher().b6),this.data_48_bufferUpdated()),14==e&&(this.data_49_buffer=new Float32Buffer(this.getPatcher().getPatcher().b5),this.data_49_bufferUpdated()),15==e&&(this.data_50_buffer=new Float32Buffer(this.getPatcher().getPatcher().b4),this.data_50_bufferUpdated()),16==e&&(this.data_51_buffer=new Float32Buffer(this.getPatcher().getPatcher().b31),this.data_51_bufferUpdated()),17==e&&(this.data_52_buffer=new Float32Buffer(this.getPatcher().getPatcher().b30),this.data_52_bufferUpdated()),18==e&&(this.data_53_buffer=new Float32Buffer(this.getPatcher().getPatcher().b29),this.data_53_bufferUpdated()),19==e&&(this.data_54_buffer=new Float32Buffer(this.getPatcher().getPatcher().b28),this.data_54_bufferUpdated()),20==e&&(this.data_55_buffer=new Float32Buffer(this.getPatcher().getPatcher().b11),this.data_55_bufferUpdated()),21==e&&(this.data_56_buffer=new Float32Buffer(this.getPatcher().getPatcher().b10),this.data_56_bufferUpdated()),22==e&&(this.data_57_buffer=new Float32Buffer(this.getPatcher().getPatcher().b9),this.data_57_bufferUpdated()),23==e&&(this.data_58_buffer=new Float32Buffer(this.getPatcher().getPatcher().b8),this.data_58_bufferUpdated()),24==e&&(this.data_59_buffer=new Float32Buffer(this.getPatcher().getPatcher().b33),this.data_59_bufferUpdated()),25==e&&(this.data_60_buffer=new Float32Buffer(this.getPatcher().getPatcher().b32),this.data_60_bufferUpdated()),26==e&&(this.data_61_buffer=new Float32Buffer(this.getPatcher().getPatcher().b15),this.data_61_bufferUpdated()),27==e&&(this.data_62_buffer=new Float32Buffer(this.getPatcher().getPatcher().b14),this.data_62_bufferUpdated()),28==e&&(this.data_63_buffer=new Float32Buffer(this.getPatcher().getPatcher().b13),this.data_63_bufferUpdated()),29==e&&(this.data_64_buffer=new Float32Buffer(this.getPatcher().getPatcher().b12),this.data_64_bufferUpdated()),30==e&&(this.data_65_buffer=new Float32Buffer(this.getPatcher().getPatcher().b19),this.data_65_bufferUpdated()),31==e&&(this.data_66_buffer=new Float32Buffer(this.getPatcher().getPatcher().b18),this.data_66_bufferUpdated()),32==e&&(this.data_67_buffer=new Float32Buffer(this.getPatcher().getPatcher().b17),this.data_67_bufferUpdated()),33==e&&(this.data_68_buffer=new Float32Buffer(this.getPatcher().getPatcher().b16),this.data_68_bufferUpdated())}initialize(){this.groove_02_bufferobj=initMultiRef(this.getPatcher().getPatcher().b0,this.getPatcher().getPatcher().b1,this.getPatcher().getPatcher().b2,this.getPatcher().getPatcher().b3,this.getPatcher().getPatcher().b4,this.getPatcher().getPatcher().b5,this.getPatcher().getPatcher().b6,this.getPatcher().getPatcher().b7,this.getPatcher().getPatcher().b8,this.getPatcher().getPatcher().b9,this.getPatcher().getPatcher().b10,this.getPatcher().getPatcher().b11,this.getPatcher().getPatcher().b12,this.getPatcher().getPatcher().b13,this.getPatcher().getPatcher().b14,this.getPatcher().getPatcher().b15,this.getPatcher().getPatcher().b16,this.getPatcher().getPatcher().b17,this.getPatcher().getPatcher().b18,this.getPatcher().getPatcher().b19,this.getPatcher().getPatcher().b20,this.getPatcher().getPatcher().b21,this.getPatcher().getPatcher().b22,this.getPatcher().getPatcher().b23,this.getPatcher().getPatcher().b24,this.getPatcher().getPatcher().b25,this.getPatcher().getPatcher().b26,this.getPatcher().getPatcher().b27,this.getPatcher().getPatcher().b28,this.getPatcher().getPatcher().b29,this.getPatcher().getPatcher().b30,this.getPatcher().getPatcher().b31,this.getPatcher().getPatcher().b32,this.getPatcher().getPatcher().b33),this.assign_defaults(),this.setState(),this.groove_02_bufferobj.setIndex(-1),this.groove_02_buffer=new Float32MultiBuffer(this.groove_02_bufferobj),this.data_35_buffer=new Float32Buffer(this.getPatcher().getPatcher().b23),this.data_36_buffer=new Float32Buffer(this.getPatcher().getPatcher().b22),this.data_37_buffer=new Float32Buffer(this.getPatcher().getPatcher().b21),this.data_38_buffer=new Float32Buffer(this.getPatcher().getPatcher().b20),this.data_39_buffer=new Float32Buffer(this.getPatcher().getPatcher().b3),this.data_40_buffer=new Float32Buffer(this.getPatcher().getPatcher().b2),this.data_41_buffer=new Float32Buffer(this.getPatcher().getPatcher().b1),this.data_42_buffer=new Float32Buffer(this.getPatcher().getPatcher().b0),this.data_43_buffer=new Float32Buffer(this.getPatcher().getPatcher().b27),this.data_44_buffer=new Float32Buffer(this.getPatcher().getPatcher().b26),this.data_45_buffer=new Float32Buffer(this.getPatcher().getPatcher().b25),this.data_46_buffer=new Float32Buffer(this.getPatcher().getPatcher().b24),this.data_47_buffer=new Float32Buffer(this.getPatcher().getPatcher().b7),this.data_48_buffer=new Float32Buffer(this.getPatcher().getPatcher().b6),this.data_49_buffer=new Float32Buffer(this.getPatcher().getPatcher().b5),this.data_50_buffer=new Float32Buffer(this.getPatcher().getPatcher().b4),this.data_51_buffer=new Float32Buffer(this.getPatcher().getPatcher().b31),this.data_52_buffer=new Float32Buffer(this.getPatcher().getPatcher().b30),this.data_53_buffer=new Float32Buffer(this.getPatcher().getPatcher().b29),this.data_54_buffer=new Float32Buffer(this.getPatcher().getPatcher().b28),this.data_55_buffer=new Float32Buffer(this.getPatcher().getPatcher().b11),this.data_56_buffer=new Float32Buffer(this.getPatcher().getPatcher().b10),this.data_57_buffer=new Float32Buffer(this.getPatcher().getPatcher().b9),this.data_58_buffer=new Float32Buffer(this.getPatcher().getPatcher().b8),this.data_59_buffer=new Float32Buffer(this.getPatcher().getPatcher().b33),this.data_60_buffer=new Float32Buffer(this.getPatcher().getPatcher().b32),this.data_61_buffer=new Float32Buffer(this.getPatcher().getPatcher().b15),this.data_62_buffer=new Float32Buffer(this.getPatcher().getPatcher().b14),this.data_63_buffer=new Float32Buffer(this.getPatcher().getPatcher().b13),this.data_64_buffer=new Float32Buffer(this.getPatcher().getPatcher().b12),this.data_65_buffer=new Float32Buffer(this.getPatcher().getPatcher().b19),this.data_66_buffer=new Float32Buffer(this.getPatcher().getPatcher().b18),this.data_67_buffer=new Float32Buffer(this.getPatcher().getPatcher().b17),this.data_68_buffer=new Float32Buffer(this.getPatcher().getPatcher().b16)}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_154{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(2),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.groove_03_buffer=0,this.groove_03_playStatus=0,this.groove_03_setupDone=!1,this.data_69_buffer=0,this.data_69_setupDone=!1,this.data_70_buffer=0,this.data_70_setupDone=!1,this.data_71_buffer=0,this.data_71_setupDone=!1,this.data_72_buffer=0,this.data_72_setupDone=!1,this.data_73_buffer=0,this.data_73_setupDone=!1,this.data_74_buffer=0,this.data_74_setupDone=!1,this.data_75_buffer=0,this.data_75_setupDone=!1,this.data_76_buffer=0,this.data_76_setupDone=!1,this.data_77_buffer=0,this.data_77_setupDone=!1,this.data_78_buffer=0,this.data_78_setupDone=!1,this.data_79_buffer=0,this.data_79_setupDone=!1,this.data_80_buffer=0,this.data_80_setupDone=!1,this.data_81_buffer=0,this.data_81_setupDone=!1,this.data_82_buffer=0,this.data_82_setupDone=!1,this.data_83_buffer=0,this.data_83_setupDone=!1,this.data_84_buffer=0,this.data_84_setupDone=!1,this.data_85_buffer=0,this.data_85_setupDone=!1,this.data_86_buffer=0,this.data_86_setupDone=!1,this.data_87_buffer=0,this.data_87_setupDone=!1,this.data_88_buffer=0,this.data_88_setupDone=!1,this.data_89_buffer=0,this.data_89_setupDone=!1,this.data_90_buffer=0,this.data_90_setupDone=!1,this.data_91_buffer=0,this.data_91_setupDone=!1,this.data_92_buffer=0,this.data_92_setupDone=!1,this.data_93_buffer=0,this.data_93_setupDone=!1,this.data_94_buffer=0,this.data_94_setupDone=!1,this.data_95_buffer=0,this.data_95_setupDone=!1,this.data_96_buffer=0,this.data_96_setupDone=!1,this.data_97_buffer=0,this.data_97_setupDone=!1,this.data_98_buffer=0,this.data_98_setupDone=!1,this.data_99_buffer=0,this.data_99_setupDone=!1,this.data_100_buffer=0,this.data_100_setupDone=!1,this.data_101_buffer=0,this.data_101_setupDone=!1,this.data_102_buffer=0,this.data_102_setupDone=!1,this.groove_03_bufferobj=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,a,r){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 1}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,a){}setParameterValue(e,t,a){}processParameterEvent(e,t,a){this.setParameterValue(e,t,a)}processNormalizedParameterEvent(e,t,a){this.setParameterValueNormalized(e,t,a)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let a=1/(t-1);e=1*rnbo_fround(e/a*1/1)*a}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,a,r){switch(RNBO_UNUSED(r),RNBO_UNUSED(a),this.updateTime(e),t){case-798469121:this.line_03_target_bang()}}processOutletAtCurrentTime(e,t,a){}processOutletEvent(e,t,a,r){this.updateTime(r),this.processOutletAtCurrentTime(e,t,a)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,a,r){}processListMessage(e,t,a,r){}processBangMessage(e,t,a){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}zeroDataRef(e){e.setZero()}processDataViewUpdate(e,t){this.updateTime(t),-1!=e&&7!=e&&6!=e&&5!=e&&4!=e&&15!=e&&14!=e&&13!=e&&12!=e&&23!=e&&22!=e&&21!=e&&20!=e&&29!=e&&28!=e&&27!=e&&26!=e&&33!=e&&32!=e&&31!=e&&30!=e&&3!=e&&2!=e&&1!=e&&0!=e&&11!=e&&10!=e&&9!=e&&8!=e&&19!=e&&18!=e&&17!=e&&16!=e&&25!=e&&24!=e||(this.groove_03_buffer=new Float32MultiBuffer(this.groove_03_bufferobj)),0==e&&(this.data_69_buffer=new Float32Buffer(this.getPatcher().getPatcher().b23),this.data_69_bufferUpdated()),1==e&&(this.data_70_buffer=new Float32Buffer(this.getPatcher().getPatcher().b22),this.data_70_bufferUpdated()),2==e&&(this.data_71_buffer=new Float32Buffer(this.getPatcher().getPatcher().b21),this.data_71_bufferUpdated()),3==e&&(this.data_72_buffer=new Float32Buffer(this.getPatcher().getPatcher().b20),this.data_72_bufferUpdated()),4==e&&(this.data_73_buffer=new Float32Buffer(this.getPatcher().getPatcher().b3),this.data_73_bufferUpdated()),5==e&&(this.data_74_buffer=new Float32Buffer(this.getPatcher().getPatcher().b2),this.data_74_bufferUpdated()),6==e&&(this.data_75_buffer=new Float32Buffer(this.getPatcher().getPatcher().b1),this.data_75_bufferUpdated()),7==e&&(this.data_76_buffer=new Float32Buffer(this.getPatcher().getPatcher().b0),this.data_76_bufferUpdated()),8==e&&(this.data_77_buffer=new Float32Buffer(this.getPatcher().getPatcher().b27),this.data_77_bufferUpdated()),9==e&&(this.data_78_buffer=new Float32Buffer(this.getPatcher().getPatcher().b26),this.data_78_bufferUpdated()),10==e&&(this.data_79_buffer=new Float32Buffer(this.getPatcher().getPatcher().b25),this.data_79_bufferUpdated()),11==e&&(this.data_80_buffer=new Float32Buffer(this.getPatcher().getPatcher().b24),this.data_80_bufferUpdated()),12==e&&(this.data_81_buffer=new Float32Buffer(this.getPatcher().getPatcher().b7),this.data_81_bufferUpdated()),13==e&&(this.data_82_buffer=new Float32Buffer(this.getPatcher().getPatcher().b6),this.data_82_bufferUpdated()),14==e&&(this.data_83_buffer=new Float32Buffer(this.getPatcher().getPatcher().b5),this.data_83_bufferUpdated()),15==e&&(this.data_84_buffer=new Float32Buffer(this.getPatcher().getPatcher().b4),this.data_84_bufferUpdated()),16==e&&(this.data_85_buffer=new Float32Buffer(this.getPatcher().getPatcher().b31),this.data_85_bufferUpdated()),17==e&&(this.data_86_buffer=new Float32Buffer(this.getPatcher().getPatcher().b30),this.data_86_bufferUpdated()),18==e&&(this.data_87_buffer=new Float32Buffer(this.getPatcher().getPatcher().b29),this.data_87_bufferUpdated()),19==e&&(this.data_88_buffer=new Float32Buffer(this.getPatcher().getPatcher().b28),this.data_88_bufferUpdated()),20==e&&(this.data_89_buffer=new Float32Buffer(this.getPatcher().getPatcher().b11),this.data_89_bufferUpdated()),21==e&&(this.data_90_buffer=new Float32Buffer(this.getPatcher().getPatcher().b10),this.data_90_bufferUpdated()),22==e&&(this.data_91_buffer=new Float32Buffer(this.getPatcher().getPatcher().b9),this.data_91_bufferUpdated()),23==e&&(this.data_92_buffer=new Float32Buffer(this.getPatcher().getPatcher().b8),this.data_92_bufferUpdated()),24==e&&(this.data_93_buffer=new Float32Buffer(this.getPatcher().getPatcher().b33),this.data_93_bufferUpdated()),25==e&&(this.data_94_buffer=new Float32Buffer(this.getPatcher().getPatcher().b32),this.data_94_bufferUpdated()),26==e&&(this.data_95_buffer=new Float32Buffer(this.getPatcher().getPatcher().b15),this.data_95_bufferUpdated()),27==e&&(this.data_96_buffer=new Float32Buffer(this.getPatcher().getPatcher().b14),this.data_96_bufferUpdated()),28==e&&(this.data_97_buffer=new Float32Buffer(this.getPatcher().getPatcher().b13),this.data_97_bufferUpdated()),29==e&&(this.data_98_buffer=new Float32Buffer(this.getPatcher().getPatcher().b12),this.data_98_bufferUpdated()),30==e&&(this.data_99_buffer=new Float32Buffer(this.getPatcher().getPatcher().b19),this.data_99_bufferUpdated()),31==e&&(this.data_100_buffer=new Float32Buffer(this.getPatcher().getPatcher().b18),this.data_100_bufferUpdated()),32==e&&(this.data_101_buffer=new Float32Buffer(this.getPatcher().getPatcher().b17),this.data_101_bufferUpdated()),33==e&&(this.data_102_buffer=new Float32Buffer(this.getPatcher().getPatcher().b16),this.data_102_bufferUpdated())}initialize(){this.groove_03_bufferobj=initMultiRef(this.getPatcher().getPatcher().b0,this.getPatcher().getPatcher().b1,this.getPatcher().getPatcher().b2,this.getPatcher().getPatcher().b3,this.getPatcher().getPatcher().b4,this.getPatcher().getPatcher().b5,this.getPatcher().getPatcher().b6,this.getPatcher().getPatcher().b7,this.getPatcher().getPatcher().b8,this.getPatcher().getPatcher().b9,this.getPatcher().getPatcher().b10,this.getPatcher().getPatcher().b11,this.getPatcher().getPatcher().b12,this.getPatcher().getPatcher().b13,this.getPatcher().getPatcher().b14,this.getPatcher().getPatcher().b15,this.getPatcher().getPatcher().b16,this.getPatcher().getPatcher().b17,this.getPatcher().getPatcher().b18,this.getPatcher().getPatcher().b19,this.getPatcher().getPatcher().b20,this.getPatcher().getPatcher().b21,this.getPatcher().getPatcher().b22,this.getPatcher().getPatcher().b23,this.getPatcher().getPatcher().b24,this.getPatcher().getPatcher().b25,this.getPatcher().getPatcher().b26,this.getPatcher().getPatcher().b27,this.getPatcher().getPatcher().b28,this.getPatcher().getPatcher().b29,this.getPatcher().getPatcher().b30,this.getPatcher().getPatcher().b31,this.getPatcher().getPatcher().b32,this.getPatcher().getPatcher().b33),this.assign_defaults(),this.setState(),this.groove_03_bufferobj.setIndex(-1),this.groove_03_buffer=new Float32MultiBuffer(this.groove_03_bufferobj),this.data_69_buffer=new Float32Buffer(this.getPatcher().getPatcher().b23),this.data_70_buffer=new Float32Buffer(this.getPatcher().getPatcher().b22),this.data_71_buffer=new Float32Buffer(this.getPatcher().getPatcher().b21),this.data_72_buffer=new Float32Buffer(this.getPatcher().getPatcher().b20),this.data_73_buffer=new Float32Buffer(this.getPatcher().getPatcher().b3),this.data_74_buffer=new Float32Buffer(this.getPatcher().getPatcher().b2),this.data_75_buffer=new Float32Buffer(this.getPatcher().getPatcher().b1),this.data_76_buffer=new Float32Buffer(this.getPatcher().getPatcher().b0),this.data_77_buffer=new Float32Buffer(this.getPatcher().getPatcher().b27),this.data_78_buffer=new Float32Buffer(this.getPatcher().getPatcher().b26),this.data_79_buffer=new Float32Buffer(this.getPatcher().getPatcher().b25),this.data_80_buffer=new Float32Buffer(this.getPatcher().getPatcher().b24),this.data_81_buffer=new Float32Buffer(this.getPatcher().getPatcher().b7),this.data_82_buffer=new Float32Buffer(this.getPatcher().getPatcher().b6),this.data_83_buffer=new Float32Buffer(this.getPatcher().getPatcher().b5),this.data_84_buffer=new Float32Buffer(this.getPatcher().getPatcher().b4),this.data_85_buffer=new Float32Buffer(this.getPatcher().getPatcher().b31),this.data_86_buffer=new Float32Buffer(this.getPatcher().getPatcher().b30),this.data_87_buffer=new Float32Buffer(this.getPatcher().getPatcher().b29),this.data_88_buffer=new Float32Buffer(this.getPatcher().getPatcher().b28),this.data_89_buffer=new Float32Buffer(this.getPatcher().getPatcher().b11),this.data_90_buffer=new Float32Buffer(this.getPatcher().getPatcher().b10),this.data_91_buffer=new Float32Buffer(this.getPatcher().getPatcher().b9),this.data_92_buffer=new Float32Buffer(this.getPatcher().getPatcher().b8),this.data_93_buffer=new Float32Buffer(this.getPatcher().getPatcher().b33),this.data_94_buffer=new Float32Buffer(this.getPatcher().getPatcher().b32),this.data_95_buffer=new Float32Buffer(this.getPatcher().getPatcher().b15),this.data_96_buffer=new Float32Buffer(this.getPatcher().getPatcher().b14),this.data_97_buffer=new Float32Buffer(this.getPatcher().getPatcher().b13),this.data_98_buffer=new Float32Buffer(this.getPatcher().getPatcher().b12),this.data_99_buffer=new Float32Buffer(this.getPatcher().getPatcher().b19),this.data_100_buffer=new Float32Buffer(this.getPatcher().getPatcher().b18),this.data_101_buffer=new Float32Buffer(this.getPatcher().getPatcher().b17),this.data_102_buffer=new Float32Buffer(this.getPatcher().getPatcher().b16)}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_155{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(2),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.groove_04_buffer=0,this.groove_04_playStatus=0,this.groove_04_setupDone=!1,this.data_103_buffer=0,this.data_103_setupDone=!1,this.data_104_buffer=0,this.data_104_setupDone=!1,this.data_105_buffer=0,this.data_105_setupDone=!1,this.data_106_buffer=0,this.data_106_setupDone=!1,this.data_107_buffer=0,this.data_107_setupDone=!1,this.data_108_buffer=0,this.data_108_setupDone=!1,this.data_109_buffer=0,this.data_109_setupDone=!1,this.data_110_buffer=0,this.data_110_setupDone=!1,this.data_111_buffer=0,this.data_111_setupDone=!1,this.data_112_buffer=0,this.data_112_setupDone=!1,this.data_113_buffer=0,this.data_113_setupDone=!1,this.data_114_buffer=0,this.data_114_setupDone=!1,this.data_115_buffer=0,this.data_115_setupDone=!1,this.data_116_buffer=0,this.data_116_setupDone=!1,this.data_117_buffer=0,this.data_117_setupDone=!1,this.data_118_buffer=0,this.data_118_setupDone=!1,this.data_119_buffer=0,this.data_119_setupDone=!1,this.data_120_buffer=0,this.data_120_setupDone=!1,this.data_121_buffer=0,this.data_121_setupDone=!1,this.data_122_buffer=0,this.data_122_setupDone=!1,this.data_123_buffer=0,this.data_123_setupDone=!1,this.data_124_buffer=0,this.data_124_setupDone=!1,this.data_125_buffer=0,this.data_125_setupDone=!1,this.data_126_buffer=0,this.data_126_setupDone=!1,this.data_127_buffer=0,this.data_127_setupDone=!1,this.data_128_buffer=0,this.data_128_setupDone=!1,this.data_129_buffer=0,this.data_129_setupDone=!1,this.data_130_buffer=0,this.data_130_setupDone=!1,this.data_131_buffer=0,this.data_131_setupDone=!1,this.data_132_buffer=0,this.data_132_setupDone=!1,this.data_133_buffer=0,this.data_133_setupDone=!1,this.data_134_buffer=0,this.data_134_setupDone=!1,this.data_135_buffer=0,this.data_135_setupDone=!1,this.data_136_buffer=0,this.data_136_setupDone=!1,this.groove_04_bufferobj=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,a,r){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 1}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,a){}setParameterValue(e,t,a){}processParameterEvent(e,t,a){this.setParameterValue(e,t,a)}processNormalizedParameterEvent(e,t,a){this.setParameterValueNormalized(e,t,a)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let a=1/(t-1);e=1*rnbo_fround(e/a*1/1)*a}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,a,r){switch(RNBO_UNUSED(r),RNBO_UNUSED(a),this.updateTime(e),t){case-798469121:this.line_04_target_bang()}}processOutletAtCurrentTime(e,t,a){}processOutletEvent(e,t,a,r){this.updateTime(r),this.processOutletAtCurrentTime(e,t,a)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,a,r){}processListMessage(e,t,a,r){}processBangMessage(e,t,a){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}zeroDataRef(e){e.setZero()}processDataViewUpdate(e,t){this.updateTime(t),-1!=e&&7!=e&&6!=e&&5!=e&&4!=e&&15!=e&&14!=e&&13!=e&&12!=e&&23!=e&&22!=e&&21!=e&&20!=e&&29!=e&&28!=e&&27!=e&&26!=e&&33!=e&&32!=e&&31!=e&&30!=e&&3!=e&&2!=e&&1!=e&&0!=e&&11!=e&&10!=e&&9!=e&&8!=e&&19!=e&&18!=e&&17!=e&&16!=e&&25!=e&&24!=e||(this.groove_04_buffer=new Float32MultiBuffer(this.groove_04_bufferobj)),0==e&&(this.data_103_buffer=new Float32Buffer(this.getPatcher().getPatcher().b23),this.data_103_bufferUpdated()),1==e&&(this.data_104_buffer=new Float32Buffer(this.getPatcher().getPatcher().b22),this.data_104_bufferUpdated()),2==e&&(this.data_105_buffer=new Float32Buffer(this.getPatcher().getPatcher().b21),this.data_105_bufferUpdated()),3==e&&(this.data_106_buffer=new Float32Buffer(this.getPatcher().getPatcher().b20),this.data_106_bufferUpdated()),4==e&&(this.data_107_buffer=new Float32Buffer(this.getPatcher().getPatcher().b3),this.data_107_bufferUpdated()),5==e&&(this.data_108_buffer=new Float32Buffer(this.getPatcher().getPatcher().b2),this.data_108_bufferUpdated()),6==e&&(this.data_109_buffer=new Float32Buffer(this.getPatcher().getPatcher().b1),this.data_109_bufferUpdated()),7==e&&(this.data_110_buffer=new Float32Buffer(this.getPatcher().getPatcher().b0),this.data_110_bufferUpdated()),8==e&&(this.data_111_buffer=new Float32Buffer(this.getPatcher().getPatcher().b27),this.data_111_bufferUpdated()),9==e&&(this.data_112_buffer=new Float32Buffer(this.getPatcher().getPatcher().b26),this.data_112_bufferUpdated()),10==e&&(this.data_113_buffer=new Float32Buffer(this.getPatcher().getPatcher().b25),this.data_113_bufferUpdated()),11==e&&(this.data_114_buffer=new Float32Buffer(this.getPatcher().getPatcher().b24),this.data_114_bufferUpdated()),12==e&&(this.data_115_buffer=new Float32Buffer(this.getPatcher().getPatcher().b7),this.data_115_bufferUpdated()),13==e&&(this.data_116_buffer=new Float32Buffer(this.getPatcher().getPatcher().b6),this.data_116_bufferUpdated()),14==e&&(this.data_117_buffer=new Float32Buffer(this.getPatcher().getPatcher().b5),this.data_117_bufferUpdated()),15==e&&(this.data_118_buffer=new Float32Buffer(this.getPatcher().getPatcher().b4),this.data_118_bufferUpdated()),16==e&&(this.data_119_buffer=new Float32Buffer(this.getPatcher().getPatcher().b31),this.data_119_bufferUpdated()),17==e&&(this.data_120_buffer=new Float32Buffer(this.getPatcher().getPatcher().b30),this.data_120_bufferUpdated()),18==e&&(this.data_121_buffer=new Float32Buffer(this.getPatcher().getPatcher().b29),this.data_121_bufferUpdated()),19==e&&(this.data_122_buffer=new Float32Buffer(this.getPatcher().getPatcher().b28),this.data_122_bufferUpdated()),20==e&&(this.data_123_buffer=new Float32Buffer(this.getPatcher().getPatcher().b11),this.data_123_bufferUpdated()),21==e&&(this.data_124_buffer=new Float32Buffer(this.getPatcher().getPatcher().b10),this.data_124_bufferUpdated()),22==e&&(this.data_125_buffer=new Float32Buffer(this.getPatcher().getPatcher().b9),this.data_125_bufferUpdated()),23==e&&(this.data_126_buffer=new Float32Buffer(this.getPatcher().getPatcher().b8),this.data_126_bufferUpdated()),24==e&&(this.data_127_buffer=new Float32Buffer(this.getPatcher().getPatcher().b33),this.data_127_bufferUpdated()),25==e&&(this.data_128_buffer=new Float32Buffer(this.getPatcher().getPatcher().b32),this.data_128_bufferUpdated()),26==e&&(this.data_129_buffer=new Float32Buffer(this.getPatcher().getPatcher().b15),this.data_129_bufferUpdated()),27==e&&(this.data_130_buffer=new Float32Buffer(this.getPatcher().getPatcher().b14),this.data_130_bufferUpdated()),28==e&&(this.data_131_buffer=new Float32Buffer(this.getPatcher().getPatcher().b13),this.data_131_bufferUpdated()),29==e&&(this.data_132_buffer=new Float32Buffer(this.getPatcher().getPatcher().b12),this.data_132_bufferUpdated()),30==e&&(this.data_133_buffer=new Float32Buffer(this.getPatcher().getPatcher().b19),this.data_133_bufferUpdated()),31==e&&(this.data_134_buffer=new Float32Buffer(this.getPatcher().getPatcher().b18),this.data_134_bufferUpdated()),32==e&&(this.data_135_buffer=new Float32Buffer(this.getPatcher().getPatcher().b17),this.data_135_bufferUpdated()),33==e&&(this.data_136_buffer=new Float32Buffer(this.getPatcher().getPatcher().b16),this.data_136_bufferUpdated())}initialize(){this.groove_04_bufferobj=initMultiRef(this.getPatcher().getPatcher().b0,this.getPatcher().getPatcher().b1,this.getPatcher().getPatcher().b2,this.getPatcher().getPatcher().b3,this.getPatcher().getPatcher().b4,this.getPatcher().getPatcher().b5,this.getPatcher().getPatcher().b6,this.getPatcher().getPatcher().b7,this.getPatcher().getPatcher().b8,this.getPatcher().getPatcher().b9,this.getPatcher().getPatcher().b10,this.getPatcher().getPatcher().b11,this.getPatcher().getPatcher().b12,this.getPatcher().getPatcher().b13,this.getPatcher().getPatcher().b14,this.getPatcher().getPatcher().b15,this.getPatcher().getPatcher().b16,this.getPatcher().getPatcher().b17,this.getPatcher().getPatcher().b18,this.getPatcher().getPatcher().b19,this.getPatcher().getPatcher().b20,this.getPatcher().getPatcher().b21,this.getPatcher().getPatcher().b22,this.getPatcher().getPatcher().b23,this.getPatcher().getPatcher().b24,this.getPatcher().getPatcher().b25,this.getPatcher().getPatcher().b26,this.getPatcher().getPatcher().b27,this.getPatcher().getPatcher().b28,this.getPatcher().getPatcher().b29,this.getPatcher().getPatcher().b30,this.getPatcher().getPatcher().b31,this.getPatcher().getPatcher().b32,this.getPatcher().getPatcher().b33),this.assign_defaults(),this.setState(),this.groove_04_bufferobj.setIndex(-1),this.groove_04_buffer=new Float32MultiBuffer(this.groove_04_bufferobj),this.data_103_buffer=new Float32Buffer(this.getPatcher().getPatcher().b23),this.data_104_buffer=new Float32Buffer(this.getPatcher().getPatcher().b22),this.data_105_buffer=new Float32Buffer(this.getPatcher().getPatcher().b21),this.data_106_buffer=new Float32Buffer(this.getPatcher().getPatcher().b20),this.data_107_buffer=new Float32Buffer(this.getPatcher().getPatcher().b3),this.data_108_buffer=new Float32Buffer(this.getPatcher().getPatcher().b2),this.data_109_buffer=new Float32Buffer(this.getPatcher().getPatcher().b1),this.data_110_buffer=new Float32Buffer(this.getPatcher().getPatcher().b0),this.data_111_buffer=new Float32Buffer(this.getPatcher().getPatcher().b27),this.data_112_buffer=new Float32Buffer(this.getPatcher().getPatcher().b26),this.data_113_buffer=new Float32Buffer(this.getPatcher().getPatcher().b25),this.data_114_buffer=new Float32Buffer(this.getPatcher().getPatcher().b24),this.data_115_buffer=new Float32Buffer(this.getPatcher().getPatcher().b7),this.data_116_buffer=new Float32Buffer(this.getPatcher().getPatcher().b6),this.data_117_buffer=new Float32Buffer(this.getPatcher().getPatcher().b5),this.data_118_buffer=new Float32Buffer(this.getPatcher().getPatcher().b4),this.data_119_buffer=new Float32Buffer(this.getPatcher().getPatcher().b31),this.data_120_buffer=new Float32Buffer(this.getPatcher().getPatcher().b30),this.data_121_buffer=new Float32Buffer(this.getPatcher().getPatcher().b29),this.data_122_buffer=new Float32Buffer(this.getPatcher().getPatcher().b28),this.data_123_buffer=new Float32Buffer(this.getPatcher().getPatcher().b11),this.data_124_buffer=new Float32Buffer(this.getPatcher().getPatcher().b10),this.data_125_buffer=new Float32Buffer(this.getPatcher().getPatcher().b9),this.data_126_buffer=new Float32Buffer(this.getPatcher().getPatcher().b8),this.data_127_buffer=new Float32Buffer(this.getPatcher().getPatcher().b33),this.data_128_buffer=new Float32Buffer(this.getPatcher().getPatcher().b32),this.data_129_buffer=new Float32Buffer(this.getPatcher().getPatcher().b15),this.data_130_buffer=new Float32Buffer(this.getPatcher().getPatcher().b14),this.data_131_buffer=new Float32Buffer(this.getPatcher().getPatcher().b13),this.data_132_buffer=new Float32Buffer(this.getPatcher().getPatcher().b12),this.data_133_buffer=new Float32Buffer(this.getPatcher().getPatcher().b19),this.data_134_buffer=new Float32Buffer(this.getPatcher().getPatcher().b18),this.data_135_buffer=new Float32Buffer(this.getPatcher().getPatcher().b17),this.data_136_buffer=new Float32Buffer(this.getPatcher().getPatcher().b16)}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_168{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(4),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.edge_01_setupDone=!1,this.edge_02_setupDone=!1,this.edge_03_setupDone=!1,this.edge_04_setupDone=!1,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0,this.p_01=new Array,this.p_02=new Array,this.p_03=new Array,this.p_04=new Array}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,a,r){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 4}getNumOutputChannels(){return 1}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){this.p_01=new RNBOSubpatcher_152,this.p_01.setEngineAndPatcher(this.getEngine(),this),this.p_01.initialize(),this.p_01.setParameterOffset(this.getParameterOffset(this.p_01)),this.p_02=new RNBOSubpatcher_153,this.p_02.setEngineAndPatcher(this.getEngine(),this),this.p_02.initialize(),this.p_02.setParameterOffset(this.getParameterOffset(this.p_02)),this.p_03=new RNBOSubpatcher_154,this.p_03.setEngineAndPatcher(this.getEngine(),this),this.p_03.initialize(),this.p_03.setParameterOffset(this.getParameterOffset(this.p_03)),this.p_04=new RNBOSubpatcher_155,this.p_04.setEngineAndPatcher(this.getEngine(),this),this.p_04.initialize(),this.p_04.setParameterOffset(this.getParameterOffset(this.p_04))}processTempoEvent(e,t){this.updateTime(e),this.p_01.processTempoEvent(e,t),this.p_02.processTempoEvent(e,t),this.p_03.processTempoEvent(e,t),this.p_04.processTempoEvent(e,t)}processTransportEvent(e,t){this.updateTime(e),this.p_01.processTransportEvent(e,t),this.p_02.processTransportEvent(e,t),this.p_03.processTransportEvent(e,t),this.p_04.processTransportEvent(e,t)}processBeatTimeEvent(e,t){this.updateTime(e),this.p_01.processBeatTimeEvent(e,t),this.p_02.processBeatTimeEvent(e,t),this.p_03.processBeatTimeEvent(e,t),this.p_04.processBeatTimeEvent(e,t)}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,a){this.updateTime(e),this.p_01.processTimeSignatureEvent(e,t,a),this.p_02.processTimeSignatureEvent(e,t,a),this.p_03.processTimeSignatureEvent(e,t,a),this.p_04.processTimeSignatureEvent(e,t,a)}setParameterValue(e,t,a){RNBO_UNUSED(t),this.updateTime(a),(e-=0)<this.p_01.getNumParameters()&&this.p_01.setParameterValue(e,t,a),(e-=this.p_01.getNumParameters())<this.p_02.getNumParameters()&&this.p_02.setParameterValue(e,t,a),(e-=this.p_02.getNumParameters())<this.p_03.getNumParameters()&&this.p_03.setParameterValue(e,t,a),(e-=this.p_03.getNumParameters())<this.p_04.getNumParameters()&&this.p_04.setParameterValue(e,t,a)}processParameterEvent(e,t,a){this.setParameterValue(e,t,a)}processNormalizedParameterEvent(e,t,a){this.setParameterValueNormalized(e,t,a)}getParameterValue(e){return(e-=0)<this.p_01.getNumParameters()?this.p_01.getParameterValue(e):(e-=this.p_01.getNumParameters())<this.p_02.getNumParameters()?this.p_02.getParameterValue(e):(e-=this.p_02.getNumParameters())<this.p_03.getNumParameters()?this.p_03.getParameterValue(e):(e-=this.p_03.getNumParameters())<this.p_04.getNumParameters()?this.p_04.getParameterValue(e):0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0+this.p_01.getNumParameters()+this.p_02.getNumParameters()+this.p_03.getNumParameters()+this.p_04.getNumParameters()}getParameterName(e){return(e-=0)<this.p_01.getNumParameters()?this.p_01.getParameterName(e):(e-=this.p_01.getNumParameters())<this.p_02.getNumParameters()?this.p_02.getParameterName(e):(e-=this.p_02.getNumParameters())<this.p_03.getNumParameters()?this.p_03.getParameterName(e):(e-=this.p_03.getNumParameters())<this.p_04.getNumParameters()?this.p_04.getParameterName(e):\"bogus\"}getParameterId(e){return(e-=0)<this.p_01.getNumParameters()?this.p_01.getParameterId(e):(e-=this.p_01.getNumParameters())<this.p_02.getNumParameters()?this.p_02.getParameterId(e):(e-=this.p_02.getNumParameters())<this.p_03.getNumParameters()?this.p_03.getParameterId(e):(e-=this.p_03.getNumParameters())<this.p_04.getNumParameters()?this.p_04.getParameterId(e):\"bogus\"}getParameterInfo(e,t){(e-=0)<this.p_01.getNumParameters()&&this.p_01.getParameterInfo(e,t),(e-=this.p_01.getNumParameters())<this.p_02.getNumParameters()&&this.p_02.getParameterInfo(e,t),(e-=this.p_02.getNumParameters())<this.p_03.getNumParameters()&&this.p_03.getParameterInfo(e,t),(e-=this.p_03.getNumParameters())<this.p_04.getNumParameters()&&this.p_04.getParameterInfo(e,t)}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}getParameterOffset(e){return e==this.p_01?0:e==this.p_02?0+this.p_01.getNumParameters():e==this.p_03?0+this.p_01.getNumParameters()+this.p_02.getNumParameters():e==this.p_04?0+this.p_01.getNumParameters()+this.p_02.getNumParameters()+this.p_03.getNumParameters():0}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let a=1/(t-1);e=1*rnbo_fround(e/a*1/1)*a}return e}convertToNormalizedParameterValue(e,t){return(e-=0)<this.p_01.getNumParameters()?this.p_01.convertToNormalizedParameterValue(e,t):(e-=this.p_01.getNumParameters())<this.p_02.getNumParameters()?this.p_02.convertToNormalizedParameterValue(e,t):(e-=this.p_02.getNumParameters())<this.p_03.getNumParameters()?this.p_03.convertToNormalizedParameterValue(e,t):(e-=this.p_03.getNumParameters())<this.p_04.getNumParameters()?this.p_04.convertToNormalizedParameterValue(e,t):t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t,(e-=0)<this.p_01.getNumParameters()?this.p_01.convertFromNormalizedParameterValue(e,t):(e-=this.p_01.getNumParameters())<this.p_02.getNumParameters()?this.p_02.convertFromNormalizedParameterValue(e,t):(e-=this.p_02.getNumParameters())<this.p_03.getNumParameters()?this.p_03.convertFromNormalizedParameterValue(e,t):(e-=this.p_03.getNumParameters())<this.p_04.getNumParameters()?this.p_04.convertFromNormalizedParameterValue(e,t):t}constrainParameterValue(e,t){return(e-=0)<this.p_01.getNumParameters()?this.p_01.constrainParameterValue(e,t):(e-=this.p_01.getNumParameters())<this.p_02.getNumParameters()?this.p_02.constrainParameterValue(e,t):(e-=this.p_02.getNumParameters())<this.p_03.getNumParameters()?this.p_03.constrainParameterValue(e,t):(e-=this.p_03.getNumParameters())<this.p_04.getNumParameters()?this.p_04.constrainParameterValue(e,t):t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,a,r){switch(RNBO_UNUSED(r),RNBO_UNUSED(a),this.updateTime(e),t){case 1577528346:this.edge_01_onout_bang();break;case-1966461100:this.edge_01_offout_bang();break;case-2015609447:this.edge_02_onout_bang();break;case-407339627:this.edge_02_offout_bang();break;case-1313779944:this.edge_03_onout_bang();break;case 1151781846:this.edge_03_offout_bang();break;case-611950441:this.edge_04_onout_bang();break;case-1584063977:this.edge_04_offout_bang()}}processOutletAtCurrentTime(e,t,a){}processOutletEvent(e,t,a,r){this.updateTime(r),this.processOutletAtCurrentTime(e,t,a)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,a,r){RNBO_UNUSED(t),this.updateTime(a),this.p_01.processNumMessage(e,t,a,r),this.p_02.processNumMessage(e,t,a,r),this.p_03.processNumMessage(e,t,a,r),this.p_04.processNumMessage(e,t,a,r)}processListMessage(e,t,a,r){RNBO_UNUSED(t),this.updateTime(a),this.p_01.processListMessage(e,t,a,r),this.p_02.processListMessage(e,t,a,r),this.p_03.processListMessage(e,t,a,r),this.p_04.processListMessage(e,t,a,r)}processBangMessage(e,t,a){RNBO_UNUSED(t),this.updateTime(a),this.p_01.processBangMessage(e,t,a),this.p_02.processBangMessage(e,t,a),this.p_03.processBangMessage(e,t,a),this.p_04.processBangMessage(e,t,a)}resolveTag(e){var t=this.p_01.resolveTag(e);if(t)return t;var a=this.p_02.resolveTag(e);if(a)return a;var r=this.p_03.resolveTag(e);if(r)return r;var s=this.p_04.resolveTag(e);return s||null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){this.p_01.processDataViewUpdate(e,t),this.p_02.processDataViewUpdate(e,t),this.p_03.processDataViewUpdate(e,t),this.p_04.processDataViewUpdate(e,t)}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_156{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(5),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.delta_tilde_01_setupDone=!1,this.delta_tilde_02_setupDone=!1,this.peakamp_01_setupDone=!1,this.ip_01_sigbuf=0,this.ip_01_setupDone=!1,this.delta_tilde_03_setupDone=!1,this.peakamp_02_setupDone=!1,this.ip_02_sigbuf=0,this.ip_02_setupDone=!1,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,a,r){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 1}getNumOutputChannels(){return 1}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,a){}setParameterValue(e,t,a){}processParameterEvent(e,t,a){this.setParameterValue(e,t,a)}processNormalizedParameterEvent(e,t,a){this.setParameterValueNormalized(e,t,a)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let a=1/(t-1);e=1*rnbo_fround(e/a*1/1)*a}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,a,r){switch(RNBO_UNUSED(a),this.updateTime(e),t){case 252884992:this.peakamp_01_output_set(r);break;case 1812006465:this.peakamp_02_output_set(r)}}processOutletAtCurrentTime(e,t,a){}processOutletEvent(e,t,a,r){this.updateTime(r),this.processOutletAtCurrentTime(e,t,a)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,a,r){}processListMessage(e,t,a,r){}processBangMessage(e,t,a){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_157{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(5),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.delta_tilde_04_setupDone=!1,this.delta_tilde_05_setupDone=!1,this.peakamp_03_setupDone=!1,this.ip_03_sigbuf=0,this.ip_03_setupDone=!1,this.delta_tilde_06_setupDone=!1,this.peakamp_04_setupDone=!1,this.ip_04_sigbuf=0,this.ip_04_setupDone=!1,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,a,r){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 1}getNumOutputChannels(){return 1}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,a){}setParameterValue(e,t,a){}processParameterEvent(e,t,a){this.setParameterValue(e,t,a)}processNormalizedParameterEvent(e,t,a){this.setParameterValueNormalized(e,t,a)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let a=1/(t-1);e=1*rnbo_fround(e/a*1/1)*a}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,a,r){switch(RNBO_UNUSED(a),this.updateTime(e),t){case 252884992:this.peakamp_03_output_set(r);break;case 1812006465:this.peakamp_04_output_set(r)}}processOutletAtCurrentTime(e,t,a){}processOutletEvent(e,t,a,r){this.updateTime(r),this.processOutletAtCurrentTime(e,t,a)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,a,r){}processListMessage(e,t,a,r){}processBangMessage(e,t,a){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_158{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(5),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.delta_tilde_07_setupDone=!1,this.delta_tilde_08_setupDone=!1,this.peakamp_05_setupDone=!1,this.ip_05_sigbuf=0,this.ip_05_setupDone=!1,this.delta_tilde_09_setupDone=!1,this.peakamp_06_setupDone=!1,this.ip_06_sigbuf=0,this.ip_06_setupDone=!1,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,a,r){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 1}getNumOutputChannels(){return 1}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,a){}setParameterValue(e,t,a){}processParameterEvent(e,t,a){this.setParameterValue(e,t,a)}processNormalizedParameterEvent(e,t,a){this.setParameterValueNormalized(e,t,a)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let a=1/(t-1);e=1*rnbo_fround(e/a*1/1)*a}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,a,r){switch(RNBO_UNUSED(a),this.updateTime(e),t){case 252884992:this.peakamp_05_output_set(r);break;case 1812006465:this.peakamp_06_output_set(r)}}processOutletAtCurrentTime(e,t,a){}processOutletEvent(e,t,a,r){this.updateTime(r),this.processOutletAtCurrentTime(e,t,a)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,a,r){}processListMessage(e,t,a,r){}processBangMessage(e,t,a){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_159{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(5),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.delta_tilde_10_setupDone=!1,this.delta_tilde_11_setupDone=!1,this.peakamp_07_setupDone=!1,this.ip_07_sigbuf=0,this.ip_07_setupDone=!1,this.delta_tilde_12_setupDone=!1,this.peakamp_08_setupDone=!1,this.ip_08_sigbuf=0,this.ip_08_setupDone=!1,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,a,r){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 1}getNumOutputChannels(){return 1}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,a){}setParameterValue(e,t,a){}processParameterEvent(e,t,a){this.setParameterValue(e,t,a)}processNormalizedParameterEvent(e,t,a){this.setParameterValueNormalized(e,t,a)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let a=1/(t-1);e=1*rnbo_fround(e/a*1/1)*a}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,a,r){switch(RNBO_UNUSED(a),this.updateTime(e),t){case 252884992:this.peakamp_07_output_set(r);break;case 1812006465:this.peakamp_08_output_set(r)}}processOutletAtCurrentTime(e,t,a){}processOutletEvent(e,t,a,r){this.updateTime(r),this.processOutletAtCurrentTime(e,t,a)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,a,r){}processListMessage(e,t,a,r){}processBangMessage(e,t,a){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_160{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,a,r){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,a){}setParameterValue(e,t,a){}processParameterEvent(e,t,a){this.setParameterValue(e,t,a)}processNormalizedParameterEvent(e,t,a){this.setParameterValueNormalized(e,t,a)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let a=1/(t-1);e=1*rnbo_fround(e/a*1/1)*a}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,a,r){}processOutletAtCurrentTime(e,t,a){}processOutletEvent(e,t,a,r){this.updateTime(r),this.processOutletAtCurrentTime(e,t,a)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,a,r){}processListMessage(e,t,a,r){}processBangMessage(e,t,a){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_169{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0,this.p_05=new Array,this.p_06=new Array,this.p_07=new Array,this.p_08=new Array,this.p_09=new Array}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,a,r){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 1}getNumOutputChannels(){return 4}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){this.p_05=new RNBOSubpatcher_156,this.p_05.setEngineAndPatcher(this.getEngine(),this),this.p_05.initialize(),this.p_05.setParameterOffset(this.getParameterOffset(this.p_05)),this.p_06=new RNBOSubpatcher_157,this.p_06.setEngineAndPatcher(this.getEngine(),this),this.p_06.initialize(),this.p_06.setParameterOffset(this.getParameterOffset(this.p_06)),this.p_07=new RNBOSubpatcher_158,this.p_07.setEngineAndPatcher(this.getEngine(),this),this.p_07.initialize(),this.p_07.setParameterOffset(this.getParameterOffset(this.p_07)),this.p_08=new RNBOSubpatcher_159,this.p_08.setEngineAndPatcher(this.getEngine(),this),this.p_08.initialize(),this.p_08.setParameterOffset(this.getParameterOffset(this.p_08)),this.p_09=new RNBOSubpatcher_160,this.p_09.setEngineAndPatcher(this.getEngine(),this),this.p_09.initialize(),this.p_09.setParameterOffset(this.getParameterOffset(this.p_09))}processTempoEvent(e,t){this.updateTime(e),this.p_05.processTempoEvent(e,t),this.p_06.processTempoEvent(e,t),this.p_07.processTempoEvent(e,t),this.p_08.processTempoEvent(e,t),this.p_09.processTempoEvent(e,t)}processTransportEvent(e,t){this.updateTime(e),this.p_05.processTransportEvent(e,t),this.p_06.processTransportEvent(e,t),this.p_07.processTransportEvent(e,t),this.p_08.processTransportEvent(e,t),this.p_09.processTransportEvent(e,t)}processBeatTimeEvent(e,t){this.updateTime(e),this.p_05.processBeatTimeEvent(e,t),this.p_06.processBeatTimeEvent(e,t),this.p_07.processBeatTimeEvent(e,t),this.p_08.processBeatTimeEvent(e,t),this.p_09.processBeatTimeEvent(e,t)}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,a){this.updateTime(e),this.p_05.processTimeSignatureEvent(e,t,a),this.p_06.processTimeSignatureEvent(e,t,a),this.p_07.processTimeSignatureEvent(e,t,a),this.p_08.processTimeSignatureEvent(e,t,a),this.p_09.processTimeSignatureEvent(e,t,a)}setParameterValue(e,t,a){RNBO_UNUSED(t),this.updateTime(a),(e-=0)<this.p_05.getNumParameters()&&this.p_05.setParameterValue(e,t,a),(e-=this.p_05.getNumParameters())<this.p_06.getNumParameters()&&this.p_06.setParameterValue(e,t,a),(e-=this.p_06.getNumParameters())<this.p_07.getNumParameters()&&this.p_07.setParameterValue(e,t,a),(e-=this.p_07.getNumParameters())<this.p_08.getNumParameters()&&this.p_08.setParameterValue(e,t,a),(e-=this.p_08.getNumParameters())<this.p_09.getNumParameters()&&this.p_09.setParameterValue(e,t,a)}processParameterEvent(e,t,a){this.setParameterValue(e,t,a)}processNormalizedParameterEvent(e,t,a){this.setParameterValueNormalized(e,t,a)}getParameterValue(e){return(e-=0)<this.p_05.getNumParameters()?this.p_05.getParameterValue(e):(e-=this.p_05.getNumParameters())<this.p_06.getNumParameters()?this.p_06.getParameterValue(e):(e-=this.p_06.getNumParameters())<this.p_07.getNumParameters()?this.p_07.getParameterValue(e):(e-=this.p_07.getNumParameters())<this.p_08.getNumParameters()?this.p_08.getParameterValue(e):(e-=this.p_08.getNumParameters())<this.p_09.getNumParameters()?this.p_09.getParameterValue(e):0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0+this.p_05.getNumParameters()+this.p_06.getNumParameters()+this.p_07.getNumParameters()+this.p_08.getNumParameters()+this.p_09.getNumParameters()}getParameterName(e){return(e-=0)<this.p_05.getNumParameters()?this.p_05.getParameterName(e):(e-=this.p_05.getNumParameters())<this.p_06.getNumParameters()?this.p_06.getParameterName(e):(e-=this.p_06.getNumParameters())<this.p_07.getNumParameters()?this.p_07.getParameterName(e):(e-=this.p_07.getNumParameters())<this.p_08.getNumParameters()?this.p_08.getParameterName(e):(e-=this.p_08.getNumParameters())<this.p_09.getNumParameters()?this.p_09.getParameterName(e):\"bogus\"}getParameterId(e){return(e-=0)<this.p_05.getNumParameters()?this.p_05.getParameterId(e):(e-=this.p_05.getNumParameters())<this.p_06.getNumParameters()?this.p_06.getParameterId(e):(e-=this.p_06.getNumParameters())<this.p_07.getNumParameters()?this.p_07.getParameterId(e):(e-=this.p_07.getNumParameters())<this.p_08.getNumParameters()?this.p_08.getParameterId(e):(e-=this.p_08.getNumParameters())<this.p_09.getNumParameters()?this.p_09.getParameterId(e):\"bogus\"}getParameterInfo(e,t){(e-=0)<this.p_05.getNumParameters()&&this.p_05.getParameterInfo(e,t),(e-=this.p_05.getNumParameters())<this.p_06.getNumParameters()&&this.p_06.getParameterInfo(e,t),(e-=this.p_06.getNumParameters())<this.p_07.getNumParameters()&&this.p_07.getParameterInfo(e,t),(e-=this.p_07.getNumParameters())<this.p_08.getNumParameters()&&this.p_08.getParameterInfo(e,t),(e-=this.p_08.getNumParameters())<this.p_09.getNumParameters()&&this.p_09.getParameterInfo(e,t)}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}getParameterOffset(e){return e==this.p_05?0:e==this.p_06?0+this.p_05.getNumParameters():e==this.p_07?0+this.p_05.getNumParameters()+this.p_06.getNumParameters():e==this.p_08?0+this.p_05.getNumParameters()+this.p_06.getNumParameters()+this.p_07.getNumParameters():e==this.p_09?0+this.p_05.getNumParameters()+this.p_06.getNumParameters()+this.p_07.getNumParameters()+this.p_08.getNumParameters():0}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let a=1/(t-1);e=1*rnbo_fround(e/a*1/1)*a}return e}convertToNormalizedParameterValue(e,t){return(e-=0)<this.p_05.getNumParameters()?this.p_05.convertToNormalizedParameterValue(e,t):(e-=this.p_05.getNumParameters())<this.p_06.getNumParameters()?this.p_06.convertToNormalizedParameterValue(e,t):(e-=this.p_06.getNumParameters())<this.p_07.getNumParameters()?this.p_07.convertToNormalizedParameterValue(e,t):(e-=this.p_07.getNumParameters())<this.p_08.getNumParameters()?this.p_08.convertToNormalizedParameterValue(e,t):(e-=this.p_08.getNumParameters())<this.p_09.getNumParameters()?this.p_09.convertToNormalizedParameterValue(e,t):t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t,(e-=0)<this.p_05.getNumParameters()?this.p_05.convertFromNormalizedParameterValue(e,t):(e-=this.p_05.getNumParameters())<this.p_06.getNumParameters()?this.p_06.convertFromNormalizedParameterValue(e,t):(e-=this.p_06.getNumParameters())<this.p_07.getNumParameters()?this.p_07.convertFromNormalizedParameterValue(e,t):(e-=this.p_07.getNumParameters())<this.p_08.getNumParameters()?this.p_08.convertFromNormalizedParameterValue(e,t):(e-=this.p_08.getNumParameters())<this.p_09.getNumParameters()?this.p_09.convertFromNormalizedParameterValue(e,t):t}constrainParameterValue(e,t){return(e-=0)<this.p_05.getNumParameters()?this.p_05.constrainParameterValue(e,t):(e-=this.p_05.getNumParameters())<this.p_06.getNumParameters()?this.p_06.constrainParameterValue(e,t):(e-=this.p_06.getNumParameters())<this.p_07.getNumParameters()?this.p_07.constrainParameterValue(e,t):(e-=this.p_07.getNumParameters())<this.p_08.getNumParameters()?this.p_08.constrainParameterValue(e,t):(e-=this.p_08.getNumParameters())<this.p_09.getNumParameters()?this.p_09.constrainParameterValue(e,t):t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,a,r){}processOutletAtCurrentTime(e,t,a){}processOutletEvent(e,t,a,r){this.updateTime(r),this.processOutletAtCurrentTime(e,t,a)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,a,r){RNBO_UNUSED(t),this.updateTime(a),this.p_05.processNumMessage(e,t,a,r),this.p_06.processNumMessage(e,t,a,r),this.p_07.processNumMessage(e,t,a,r),this.p_08.processNumMessage(e,t,a,r),this.p_09.processNumMessage(e,t,a,r)}processListMessage(e,t,a,r){RNBO_UNUSED(t),this.updateTime(a),this.p_05.processListMessage(e,t,a,r),this.p_06.processListMessage(e,t,a,r),this.p_07.processListMessage(e,t,a,r),this.p_08.processListMessage(e,t,a,r),this.p_09.processListMessage(e,t,a,r)}processBangMessage(e,t,a){RNBO_UNUSED(t),this.updateTime(a),this.p_05.processBangMessage(e,t,a),this.p_06.processBangMessage(e,t,a),this.p_07.processBangMessage(e,t,a),this.p_08.processBangMessage(e,t,a),this.p_09.processBangMessage(e,t,a)}resolveTag(e){var t=this.p_05.resolveTag(e);if(t)return t;var a=this.p_06.resolveTag(e);if(a)return a;var r=this.p_07.resolveTag(e);if(r)return r;var s=this.p_08.resolveTag(e);if(s)return s;var i=this.p_09.resolveTag(e);return i||null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){this.p_05.processDataViewUpdate(e,t),this.p_06.processDataViewUpdate(e,t),this.p_07.processDataViewUpdate(e,t),this.p_08.processDataViewUpdate(e,t),this.p_09.processDataViewUpdate(e,t)}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_161{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(2),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.groove_05_buffer=0,this.groove_05_playStatus=0,this.groove_05_setupDone=!1,this.data_137_buffer=0,this.data_137_setupDone=!1,this.data_138_buffer=0,this.data_138_setupDone=!1,this.data_139_buffer=0,this.data_139_setupDone=!1,this.data_140_buffer=0,this.data_140_setupDone=!1,this.data_141_buffer=0,this.data_141_setupDone=!1,this.data_142_buffer=0,this.data_142_setupDone=!1,this.data_143_buffer=0,this.data_143_setupDone=!1,this.data_144_buffer=0,this.data_144_setupDone=!1,this.data_145_buffer=0,this.data_145_setupDone=!1,this.data_146_buffer=0,this.data_146_setupDone=!1,this.data_147_buffer=0,this.data_147_setupDone=!1,this.data_148_buffer=0,this.data_148_setupDone=!1,this.data_149_buffer=0,this.data_149_setupDone=!1,this.data_150_buffer=0,this.data_150_setupDone=!1,this.data_151_buffer=0,this.data_151_setupDone=!1,this.data_152_buffer=0,this.data_152_setupDone=!1,this.data_153_buffer=0,this.data_153_setupDone=!1,this.data_154_buffer=0,this.data_154_setupDone=!1,this.data_155_buffer=0,this.data_155_setupDone=!1,this.data_156_buffer=0,this.data_156_setupDone=!1,this.data_157_buffer=0,this.data_157_setupDone=!1,this.data_158_buffer=0,this.data_158_setupDone=!1,this.data_159_buffer=0,this.data_159_setupDone=!1,this.data_160_buffer=0,this.data_160_setupDone=!1,this.data_161_buffer=0,this.data_161_setupDone=!1,this.data_162_buffer=0,this.data_162_setupDone=!1,this.data_163_buffer=0,this.data_163_setupDone=!1,this.data_164_buffer=0,this.data_164_setupDone=!1,this.data_165_buffer=0,this.data_165_setupDone=!1,this.data_166_buffer=0,this.data_166_setupDone=!1,this.data_167_buffer=0,this.data_167_setupDone=!1,this.data_168_buffer=0,this.data_168_setupDone=!1,this.data_169_buffer=0,this.data_169_setupDone=!1,this.data_170_buffer=0,this.data_170_setupDone=!1,this.groove_05_bufferobj=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,a,r){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 1}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,a){}setParameterValue(e,t,a){}processParameterEvent(e,t,a){this.setParameterValue(e,t,a)}processNormalizedParameterEvent(e,t,a){this.setParameterValueNormalized(e,t,a)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let a=1/(t-1);e=1*rnbo_fround(e/a*1/1)*a}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,a,r){switch(RNBO_UNUSED(r),RNBO_UNUSED(a),this.updateTime(e),t){case-798469121:this.line_05_target_bang()}}processOutletAtCurrentTime(e,t,a){}processOutletEvent(e,t,a,r){this.updateTime(r),this.processOutletAtCurrentTime(e,t,a)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,a,r){}processListMessage(e,t,a,r){}processBangMessage(e,t,a){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}zeroDataRef(e){e.setZero()}processDataViewUpdate(e,t){this.updateTime(t),-1!=e&&7!=e&&6!=e&&5!=e&&4!=e&&15!=e&&14!=e&&13!=e&&12!=e&&23!=e&&22!=e&&21!=e&&20!=e&&29!=e&&28!=e&&27!=e&&26!=e&&33!=e&&32!=e&&31!=e&&30!=e&&3!=e&&2!=e&&1!=e&&0!=e&&11!=e&&10!=e&&9!=e&&8!=e&&19!=e&&18!=e&&17!=e&&16!=e&&25!=e&&24!=e||(this.groove_05_buffer=new Float32MultiBuffer(this.groove_05_bufferobj)),0==e&&(this.data_137_buffer=new Float32Buffer(this.getPatcher().getPatcher().b23),this.data_137_bufferUpdated()),1==e&&(this.data_138_buffer=new Float32Buffer(this.getPatcher().getPatcher().b22),this.data_138_bufferUpdated()),2==e&&(this.data_139_buffer=new Float32Buffer(this.getPatcher().getPatcher().b21),this.data_139_bufferUpdated()),3==e&&(this.data_140_buffer=new Float32Buffer(this.getPatcher().getPatcher().b20),this.data_140_bufferUpdated()),4==e&&(this.data_141_buffer=new Float32Buffer(this.getPatcher().getPatcher().b3),this.data_141_bufferUpdated()),5==e&&(this.data_142_buffer=new Float32Buffer(this.getPatcher().getPatcher().b2),this.data_142_bufferUpdated()),6==e&&(this.data_143_buffer=new Float32Buffer(this.getPatcher().getPatcher().b1),this.data_143_bufferUpdated()),7==e&&(this.data_144_buffer=new Float32Buffer(this.getPatcher().getPatcher().b0),this.data_144_bufferUpdated()),8==e&&(this.data_145_buffer=new Float32Buffer(this.getPatcher().getPatcher().b27),this.data_145_bufferUpdated()),9==e&&(this.data_146_buffer=new Float32Buffer(this.getPatcher().getPatcher().b26),this.data_146_bufferUpdated()),10==e&&(this.data_147_buffer=new Float32Buffer(this.getPatcher().getPatcher().b25),this.data_147_bufferUpdated()),11==e&&(this.data_148_buffer=new Float32Buffer(this.getPatcher().getPatcher().b24),this.data_148_bufferUpdated()),12==e&&(this.data_149_buffer=new Float32Buffer(this.getPatcher().getPatcher().b7),this.data_149_bufferUpdated()),13==e&&(this.data_150_buffer=new Float32Buffer(this.getPatcher().getPatcher().b6),this.data_150_bufferUpdated()),14==e&&(this.data_151_buffer=new Float32Buffer(this.getPatcher().getPatcher().b5),this.data_151_bufferUpdated()),15==e&&(this.data_152_buffer=new Float32Buffer(this.getPatcher().getPatcher().b4),this.data_152_bufferUpdated()),16==e&&(this.data_153_buffer=new Float32Buffer(this.getPatcher().getPatcher().b31),this.data_153_bufferUpdated()),17==e&&(this.data_154_buffer=new Float32Buffer(this.getPatcher().getPatcher().b30),this.data_154_bufferUpdated()),18==e&&(this.data_155_buffer=new Float32Buffer(this.getPatcher().getPatcher().b29),this.data_155_bufferUpdated()),19==e&&(this.data_156_buffer=new Float32Buffer(this.getPatcher().getPatcher().b28),this.data_156_bufferUpdated()),20==e&&(this.data_157_buffer=new Float32Buffer(this.getPatcher().getPatcher().b11),this.data_157_bufferUpdated()),21==e&&(this.data_158_buffer=new Float32Buffer(this.getPatcher().getPatcher().b10),this.data_158_bufferUpdated()),22==e&&(this.data_159_buffer=new Float32Buffer(this.getPatcher().getPatcher().b9),this.data_159_bufferUpdated()),23==e&&(this.data_160_buffer=new Float32Buffer(this.getPatcher().getPatcher().b8),this.data_160_bufferUpdated()),24==e&&(this.data_161_buffer=new Float32Buffer(this.getPatcher().getPatcher().b33),this.data_161_bufferUpdated()),25==e&&(this.data_162_buffer=new Float32Buffer(this.getPatcher().getPatcher().b32),this.data_162_bufferUpdated()),26==e&&(this.data_163_buffer=new Float32Buffer(this.getPatcher().getPatcher().b15),this.data_163_bufferUpdated()),27==e&&(this.data_164_buffer=new Float32Buffer(this.getPatcher().getPatcher().b14),this.data_164_bufferUpdated()),28==e&&(this.data_165_buffer=new Float32Buffer(this.getPatcher().getPatcher().b13),this.data_165_bufferUpdated()),29==e&&(this.data_166_buffer=new Float32Buffer(this.getPatcher().getPatcher().b12),this.data_166_bufferUpdated()),30==e&&(this.data_167_buffer=new Float32Buffer(this.getPatcher().getPatcher().b19),this.data_167_bufferUpdated()),31==e&&(this.data_168_buffer=new Float32Buffer(this.getPatcher().getPatcher().b18),this.data_168_bufferUpdated()),32==e&&(this.data_169_buffer=new Float32Buffer(this.getPatcher().getPatcher().b17),this.data_169_bufferUpdated()),33==e&&(this.data_170_buffer=new Float32Buffer(this.getPatcher().getPatcher().b16),this.data_170_bufferUpdated())}initialize(){this.groove_05_bufferobj=initMultiRef(this.getPatcher().getPatcher().b0,this.getPatcher().getPatcher().b1,this.getPatcher().getPatcher().b2,this.getPatcher().getPatcher().b3,this.getPatcher().getPatcher().b4,this.getPatcher().getPatcher().b5,this.getPatcher().getPatcher().b6,this.getPatcher().getPatcher().b7,this.getPatcher().getPatcher().b8,this.getPatcher().getPatcher().b9,this.getPatcher().getPatcher().b10,this.getPatcher().getPatcher().b11,this.getPatcher().getPatcher().b12,this.getPatcher().getPatcher().b13,this.getPatcher().getPatcher().b14,this.getPatcher().getPatcher().b15,this.getPatcher().getPatcher().b16,this.getPatcher().getPatcher().b17,this.getPatcher().getPatcher().b18,this.getPatcher().getPatcher().b19,this.getPatcher().getPatcher().b20,this.getPatcher().getPatcher().b21,this.getPatcher().getPatcher().b22,this.getPatcher().getPatcher().b23,this.getPatcher().getPatcher().b24,this.getPatcher().getPatcher().b25,this.getPatcher().getPatcher().b26,this.getPatcher().getPatcher().b27,this.getPatcher().getPatcher().b28,this.getPatcher().getPatcher().b29,this.getPatcher().getPatcher().b30,this.getPatcher().getPatcher().b31,this.getPatcher().getPatcher().b32,this.getPatcher().getPatcher().b33),this.assign_defaults(),this.setState(),this.groove_05_bufferobj.setIndex(-1),this.groove_05_buffer=new Float32MultiBuffer(this.groove_05_bufferobj),this.data_137_buffer=new Float32Buffer(this.getPatcher().getPatcher().b23),this.data_138_buffer=new Float32Buffer(this.getPatcher().getPatcher().b22),this.data_139_buffer=new Float32Buffer(this.getPatcher().getPatcher().b21),this.data_140_buffer=new Float32Buffer(this.getPatcher().getPatcher().b20),this.data_141_buffer=new Float32Buffer(this.getPatcher().getPatcher().b3),this.data_142_buffer=new Float32Buffer(this.getPatcher().getPatcher().b2),this.data_143_buffer=new Float32Buffer(this.getPatcher().getPatcher().b1),this.data_144_buffer=new Float32Buffer(this.getPatcher().getPatcher().b0),this.data_145_buffer=new Float32Buffer(this.getPatcher().getPatcher().b27),this.data_146_buffer=new Float32Buffer(this.getPatcher().getPatcher().b26),this.data_147_buffer=new Float32Buffer(this.getPatcher().getPatcher().b25),this.data_148_buffer=new Float32Buffer(this.getPatcher().getPatcher().b24),this.data_149_buffer=new Float32Buffer(this.getPatcher().getPatcher().b7),this.data_150_buffer=new Float32Buffer(this.getPatcher().getPatcher().b6),this.data_151_buffer=new Float32Buffer(this.getPatcher().getPatcher().b5),this.data_152_buffer=new Float32Buffer(this.getPatcher().getPatcher().b4),this.data_153_buffer=new Float32Buffer(this.getPatcher().getPatcher().b31),this.data_154_buffer=new Float32Buffer(this.getPatcher().getPatcher().b30),this.data_155_buffer=new Float32Buffer(this.getPatcher().getPatcher().b29),this.data_156_buffer=new Float32Buffer(this.getPatcher().getPatcher().b28),this.data_157_buffer=new Float32Buffer(this.getPatcher().getPatcher().b11),this.data_158_buffer=new Float32Buffer(this.getPatcher().getPatcher().b10),this.data_159_buffer=new Float32Buffer(this.getPatcher().getPatcher().b9),this.data_160_buffer=new Float32Buffer(this.getPatcher().getPatcher().b8),this.data_161_buffer=new Float32Buffer(this.getPatcher().getPatcher().b33),this.data_162_buffer=new Float32Buffer(this.getPatcher().getPatcher().b32),this.data_163_buffer=new Float32Buffer(this.getPatcher().getPatcher().b15),this.data_164_buffer=new Float32Buffer(this.getPatcher().getPatcher().b14),this.data_165_buffer=new Float32Buffer(this.getPatcher().getPatcher().b13),this.data_166_buffer=new Float32Buffer(this.getPatcher().getPatcher().b12),this.data_167_buffer=new Float32Buffer(this.getPatcher().getPatcher().b19),this.data_168_buffer=new Float32Buffer(this.getPatcher().getPatcher().b18),this.data_169_buffer=new Float32Buffer(this.getPatcher().getPatcher().b17),this.data_170_buffer=new Float32Buffer(this.getPatcher().getPatcher().b16)}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_162{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(2),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.groove_06_buffer=0,this.groove_06_playStatus=0,this.groove_06_setupDone=!1,this.data_171_buffer=0,this.data_171_setupDone=!1,this.data_172_buffer=0,this.data_172_setupDone=!1,this.data_173_buffer=0,this.data_173_setupDone=!1,this.data_174_buffer=0,this.data_174_setupDone=!1,this.data_175_buffer=0,this.data_175_setupDone=!1,this.data_176_buffer=0,this.data_176_setupDone=!1,this.data_177_buffer=0,this.data_177_setupDone=!1,this.data_178_buffer=0,this.data_178_setupDone=!1,this.data_179_buffer=0,this.data_179_setupDone=!1,this.data_180_buffer=0,this.data_180_setupDone=!1,this.data_181_buffer=0,this.data_181_setupDone=!1,this.data_182_buffer=0,this.data_182_setupDone=!1,this.data_183_buffer=0,this.data_183_setupDone=!1,this.data_184_buffer=0,this.data_184_setupDone=!1,this.data_185_buffer=0,this.data_185_setupDone=!1,this.data_186_buffer=0,this.data_186_setupDone=!1,this.data_187_buffer=0,this.data_187_setupDone=!1,this.data_188_buffer=0,this.data_188_setupDone=!1,this.data_189_buffer=0,this.data_189_setupDone=!1,this.data_190_buffer=0,this.data_190_setupDone=!1,this.data_191_buffer=0,this.data_191_setupDone=!1,this.data_192_buffer=0,this.data_192_setupDone=!1,this.data_193_buffer=0,this.data_193_setupDone=!1,this.data_194_buffer=0,this.data_194_setupDone=!1,this.data_195_buffer=0,this.data_195_setupDone=!1,this.data_196_buffer=0,this.data_196_setupDone=!1,this.data_197_buffer=0,this.data_197_setupDone=!1,this.data_198_buffer=0,this.data_198_setupDone=!1,this.data_199_buffer=0,this.data_199_setupDone=!1,this.data_200_buffer=0,this.data_200_setupDone=!1,this.data_201_buffer=0,this.data_201_setupDone=!1,this.data_202_buffer=0,this.data_202_setupDone=!1,this.data_203_buffer=0,this.data_203_setupDone=!1,this.data_204_buffer=0,this.data_204_setupDone=!1,this.groove_06_bufferobj=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,a,r){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 1}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,a){}setParameterValue(e,t,a){}processParameterEvent(e,t,a){this.setParameterValue(e,t,a)}processNormalizedParameterEvent(e,t,a){this.setParameterValueNormalized(e,t,a)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let a=1/(t-1);e=1*rnbo_fround(e/a*1/1)*a}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,a,r){switch(RNBO_UNUSED(r),RNBO_UNUSED(a),this.updateTime(e),t){case-798469121:this.line_06_target_bang()}}processOutletAtCurrentTime(e,t,a){}processOutletEvent(e,t,a,r){this.updateTime(r),this.processOutletAtCurrentTime(e,t,a)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,a,r){}processListMessage(e,t,a,r){}processBangMessage(e,t,a){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}zeroDataRef(e){e.setZero()}processDataViewUpdate(e,t){this.updateTime(t),-1!=e&&7!=e&&6!=e&&5!=e&&4!=e&&15!=e&&14!=e&&13!=e&&12!=e&&23!=e&&22!=e&&21!=e&&20!=e&&29!=e&&28!=e&&27!=e&&26!=e&&33!=e&&32!=e&&31!=e&&30!=e&&3!=e&&2!=e&&1!=e&&0!=e&&11!=e&&10!=e&&9!=e&&8!=e&&19!=e&&18!=e&&17!=e&&16!=e&&25!=e&&24!=e||(this.groove_06_buffer=new Float32MultiBuffer(this.groove_06_bufferobj)),0==e&&(this.data_171_buffer=new Float32Buffer(this.getPatcher().getPatcher().b23),this.data_171_bufferUpdated()),1==e&&(this.data_172_buffer=new Float32Buffer(this.getPatcher().getPatcher().b22),this.data_172_bufferUpdated()),2==e&&(this.data_173_buffer=new Float32Buffer(this.getPatcher().getPatcher().b21),this.data_173_bufferUpdated()),3==e&&(this.data_174_buffer=new Float32Buffer(this.getPatcher().getPatcher().b20),this.data_174_bufferUpdated()),4==e&&(this.data_175_buffer=new Float32Buffer(this.getPatcher().getPatcher().b3),this.data_175_bufferUpdated()),5==e&&(this.data_176_buffer=new Float32Buffer(this.getPatcher().getPatcher().b2),this.data_176_bufferUpdated()),6==e&&(this.data_177_buffer=new Float32Buffer(this.getPatcher().getPatcher().b1),this.data_177_bufferUpdated()),7==e&&(this.data_178_buffer=new Float32Buffer(this.getPatcher().getPatcher().b0),this.data_178_bufferUpdated()),8==e&&(this.data_179_buffer=new Float32Buffer(this.getPatcher().getPatcher().b27),this.data_179_bufferUpdated()),9==e&&(this.data_180_buffer=new Float32Buffer(this.getPatcher().getPatcher().b26),this.data_180_bufferUpdated()),10==e&&(this.data_181_buffer=new Float32Buffer(this.getPatcher().getPatcher().b25),this.data_181_bufferUpdated()),11==e&&(this.data_182_buffer=new Float32Buffer(this.getPatcher().getPatcher().b24),this.data_182_bufferUpdated()),12==e&&(this.data_183_buffer=new Float32Buffer(this.getPatcher().getPatcher().b7),this.data_183_bufferUpdated()),13==e&&(this.data_184_buffer=new Float32Buffer(this.getPatcher().getPatcher().b6),this.data_184_bufferUpdated()),14==e&&(this.data_185_buffer=new Float32Buffer(this.getPatcher().getPatcher().b5),this.data_185_bufferUpdated()),15==e&&(this.data_186_buffer=new Float32Buffer(this.getPatcher().getPatcher().b4),this.data_186_bufferUpdated()),16==e&&(this.data_187_buffer=new Float32Buffer(this.getPatcher().getPatcher().b31),this.data_187_bufferUpdated()),17==e&&(this.data_188_buffer=new Float32Buffer(this.getPatcher().getPatcher().b30),this.data_188_bufferUpdated()),18==e&&(this.data_189_buffer=new Float32Buffer(this.getPatcher().getPatcher().b29),this.data_189_bufferUpdated()),19==e&&(this.data_190_buffer=new Float32Buffer(this.getPatcher().getPatcher().b28),this.data_190_bufferUpdated()),20==e&&(this.data_191_buffer=new Float32Buffer(this.getPatcher().getPatcher().b11),this.data_191_bufferUpdated()),21==e&&(this.data_192_buffer=new Float32Buffer(this.getPatcher().getPatcher().b10),this.data_192_bufferUpdated()),22==e&&(this.data_193_buffer=new Float32Buffer(this.getPatcher().getPatcher().b9),this.data_193_bufferUpdated()),23==e&&(this.data_194_buffer=new Float32Buffer(this.getPatcher().getPatcher().b8),this.data_194_bufferUpdated()),24==e&&(this.data_195_buffer=new Float32Buffer(this.getPatcher().getPatcher().b33),this.data_195_bufferUpdated()),25==e&&(this.data_196_buffer=new Float32Buffer(this.getPatcher().getPatcher().b32),this.data_196_bufferUpdated()),26==e&&(this.data_197_buffer=new Float32Buffer(this.getPatcher().getPatcher().b15),this.data_197_bufferUpdated()),27==e&&(this.data_198_buffer=new Float32Buffer(this.getPatcher().getPatcher().b14),this.data_198_bufferUpdated()),28==e&&(this.data_199_buffer=new Float32Buffer(this.getPatcher().getPatcher().b13),this.data_199_bufferUpdated()),29==e&&(this.data_200_buffer=new Float32Buffer(this.getPatcher().getPatcher().b12),this.data_200_bufferUpdated()),30==e&&(this.data_201_buffer=new Float32Buffer(this.getPatcher().getPatcher().b19),this.data_201_bufferUpdated()),31==e&&(this.data_202_buffer=new Float32Buffer(this.getPatcher().getPatcher().b18),this.data_202_bufferUpdated()),32==e&&(this.data_203_buffer=new Float32Buffer(this.getPatcher().getPatcher().b17),this.data_203_bufferUpdated()),33==e&&(this.data_204_buffer=new Float32Buffer(this.getPatcher().getPatcher().b16),this.data_204_bufferUpdated())}initialize(){this.groove_06_bufferobj=initMultiRef(this.getPatcher().getPatcher().b0,this.getPatcher().getPatcher().b1,this.getPatcher().getPatcher().b2,this.getPatcher().getPatcher().b3,this.getPatcher().getPatcher().b4,this.getPatcher().getPatcher().b5,this.getPatcher().getPatcher().b6,this.getPatcher().getPatcher().b7,this.getPatcher().getPatcher().b8,this.getPatcher().getPatcher().b9,this.getPatcher().getPatcher().b10,this.getPatcher().getPatcher().b11,this.getPatcher().getPatcher().b12,this.getPatcher().getPatcher().b13,this.getPatcher().getPatcher().b14,this.getPatcher().getPatcher().b15,this.getPatcher().getPatcher().b16,this.getPatcher().getPatcher().b17,this.getPatcher().getPatcher().b18,this.getPatcher().getPatcher().b19,this.getPatcher().getPatcher().b20,this.getPatcher().getPatcher().b21,this.getPatcher().getPatcher().b22,this.getPatcher().getPatcher().b23,this.getPatcher().getPatcher().b24,this.getPatcher().getPatcher().b25,this.getPatcher().getPatcher().b26,this.getPatcher().getPatcher().b27,this.getPatcher().getPatcher().b28,this.getPatcher().getPatcher().b29,this.getPatcher().getPatcher().b30,this.getPatcher().getPatcher().b31,this.getPatcher().getPatcher().b32,this.getPatcher().getPatcher().b33),this.assign_defaults(),this.setState(),this.groove_06_bufferobj.setIndex(-1),this.groove_06_buffer=new Float32MultiBuffer(this.groove_06_bufferobj),this.data_171_buffer=new Float32Buffer(this.getPatcher().getPatcher().b23),this.data_172_buffer=new Float32Buffer(this.getPatcher().getPatcher().b22),this.data_173_buffer=new Float32Buffer(this.getPatcher().getPatcher().b21),this.data_174_buffer=new Float32Buffer(this.getPatcher().getPatcher().b20),this.data_175_buffer=new Float32Buffer(this.getPatcher().getPatcher().b3),this.data_176_buffer=new Float32Buffer(this.getPatcher().getPatcher().b2),this.data_177_buffer=new Float32Buffer(this.getPatcher().getPatcher().b1),this.data_178_buffer=new Float32Buffer(this.getPatcher().getPatcher().b0),this.data_179_buffer=new Float32Buffer(this.getPatcher().getPatcher().b27),this.data_180_buffer=new Float32Buffer(this.getPatcher().getPatcher().b26),this.data_181_buffer=new Float32Buffer(this.getPatcher().getPatcher().b25),this.data_182_buffer=new Float32Buffer(this.getPatcher().getPatcher().b24),this.data_183_buffer=new Float32Buffer(this.getPatcher().getPatcher().b7),this.data_184_buffer=new Float32Buffer(this.getPatcher().getPatcher().b6),this.data_185_buffer=new Float32Buffer(this.getPatcher().getPatcher().b5),this.data_186_buffer=new Float32Buffer(this.getPatcher().getPatcher().b4),this.data_187_buffer=new Float32Buffer(this.getPatcher().getPatcher().b31),this.data_188_buffer=new Float32Buffer(this.getPatcher().getPatcher().b30),this.data_189_buffer=new Float32Buffer(this.getPatcher().getPatcher().b29),this.data_190_buffer=new Float32Buffer(this.getPatcher().getPatcher().b28),this.data_191_buffer=new Float32Buffer(this.getPatcher().getPatcher().b11),this.data_192_buffer=new Float32Buffer(this.getPatcher().getPatcher().b10),this.data_193_buffer=new Float32Buffer(this.getPatcher().getPatcher().b9),this.data_194_buffer=new Float32Buffer(this.getPatcher().getPatcher().b8),this.data_195_buffer=new Float32Buffer(this.getPatcher().getPatcher().b33),this.data_196_buffer=new Float32Buffer(this.getPatcher().getPatcher().b32),this.data_197_buffer=new Float32Buffer(this.getPatcher().getPatcher().b15),this.data_198_buffer=new Float32Buffer(this.getPatcher().getPatcher().b14),this.data_199_buffer=new Float32Buffer(this.getPatcher().getPatcher().b13),this.data_200_buffer=new Float32Buffer(this.getPatcher().getPatcher().b12),this.data_201_buffer=new Float32Buffer(this.getPatcher().getPatcher().b19),this.data_202_buffer=new Float32Buffer(this.getPatcher().getPatcher().b18),this.data_203_buffer=new Float32Buffer(this.getPatcher().getPatcher().b17),this.data_204_buffer=new Float32Buffer(this.getPatcher().getPatcher().b16)}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_170{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(2),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.edge_05_setupDone=!1,this.edge_06_setupDone=!1,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0,this.p_10=new Array,this.p_11=new Array}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,a,r){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 2}getNumOutputChannels(){return 1}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){this.p_10=new RNBOSubpatcher_161,this.p_10.setEngineAndPatcher(this.getEngine(),this),this.p_10.initialize(),this.p_10.setParameterOffset(this.getParameterOffset(this.p_10)),this.p_11=new RNBOSubpatcher_162,this.p_11.setEngineAndPatcher(this.getEngine(),this),this.p_11.initialize(),this.p_11.setParameterOffset(this.getParameterOffset(this.p_11))}processTempoEvent(e,t){this.updateTime(e),this.p_10.processTempoEvent(e,t),this.p_11.processTempoEvent(e,t)}processTransportEvent(e,t){this.updateTime(e),this.p_10.processTransportEvent(e,t),this.p_11.processTransportEvent(e,t)}processBeatTimeEvent(e,t){this.updateTime(e),this.p_10.processBeatTimeEvent(e,t),this.p_11.processBeatTimeEvent(e,t)}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,a){this.updateTime(e),this.p_10.processTimeSignatureEvent(e,t,a),this.p_11.processTimeSignatureEvent(e,t,a)}setParameterValue(e,t,a){RNBO_UNUSED(t),this.updateTime(a),(e-=0)<this.p_10.getNumParameters()&&this.p_10.setParameterValue(e,t,a),(e-=this.p_10.getNumParameters())<this.p_11.getNumParameters()&&this.p_11.setParameterValue(e,t,a)}processParameterEvent(e,t,a){this.setParameterValue(e,t,a)}processNormalizedParameterEvent(e,t,a){this.setParameterValueNormalized(e,t,a)}getParameterValue(e){return(e-=0)<this.p_10.getNumParameters()?this.p_10.getParameterValue(e):(e-=this.p_10.getNumParameters())<this.p_11.getNumParameters()?this.p_11.getParameterValue(e):0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0+this.p_10.getNumParameters()+this.p_11.getNumParameters()}getParameterName(e){return(e-=0)<this.p_10.getNumParameters()?this.p_10.getParameterName(e):(e-=this.p_10.getNumParameters())<this.p_11.getNumParameters()?this.p_11.getParameterName(e):\"bogus\"}getParameterId(e){return(e-=0)<this.p_10.getNumParameters()?this.p_10.getParameterId(e):(e-=this.p_10.getNumParameters())<this.p_11.getNumParameters()?this.p_11.getParameterId(e):\"bogus\"}getParameterInfo(e,t){(e-=0)<this.p_10.getNumParameters()&&this.p_10.getParameterInfo(e,t),(e-=this.p_10.getNumParameters())<this.p_11.getNumParameters()&&this.p_11.getParameterInfo(e,t)}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}getParameterOffset(e){return e==this.p_10?0:e==this.p_11?0+this.p_10.getNumParameters():0}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let a=1/(t-1);e=1*rnbo_fround(e/a*1/1)*a}return e}convertToNormalizedParameterValue(e,t){return(e-=0)<this.p_10.getNumParameters()?this.p_10.convertToNormalizedParameterValue(e,t):(e-=this.p_10.getNumParameters())<this.p_11.getNumParameters()?this.p_11.convertToNormalizedParameterValue(e,t):t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t,(e-=0)<this.p_10.getNumParameters()?this.p_10.convertFromNormalizedParameterValue(e,t):(e-=this.p_10.getNumParameters())<this.p_11.getNumParameters()?this.p_11.convertFromNormalizedParameterValue(e,t):t}constrainParameterValue(e,t){return(e-=0)<this.p_10.getNumParameters()?this.p_10.constrainParameterValue(e,t):(e-=this.p_10.getNumParameters())<this.p_11.getNumParameters()?this.p_11.constrainParameterValue(e,t):t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,a,r){switch(RNBO_UNUSED(r),RNBO_UNUSED(a),this.updateTime(e),t){case-1313779944:this.edge_05_onout_bang();break;case 1151781846:this.edge_05_offout_bang();break;case-611950441:this.edge_06_onout_bang();break;case-1584063977:this.edge_06_offout_bang()}}processOutletAtCurrentTime(e,t,a){}processOutletEvent(e,t,a,r){this.updateTime(r),this.processOutletAtCurrentTime(e,t,a)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,a,r){RNBO_UNUSED(t),this.updateTime(a),this.p_10.processNumMessage(e,t,a,r),this.p_11.processNumMessage(e,t,a,r)}processListMessage(e,t,a,r){RNBO_UNUSED(t),this.updateTime(a),this.p_10.processListMessage(e,t,a,r),this.p_11.processListMessage(e,t,a,r)}processBangMessage(e,t,a){RNBO_UNUSED(t),this.updateTime(a),this.p_10.processBangMessage(e,t,a),this.p_11.processBangMessage(e,t,a)}resolveTag(e){var t=this.p_10.resolveTag(e);if(t)return t;var a=this.p_11.resolveTag(e);return a||null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){this.p_10.processDataViewUpdate(e,t),this.p_11.processDataViewUpdate(e,t)}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_163{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(2),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.delta_tilde_13_setupDone=!1,this.ip_09_sigbuf=0,this.ip_09_setupDone=!1,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,a,r){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 1}getNumOutputChannels(){return 1}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,a){}setParameterValue(e,t,a){}processParameterEvent(e,t,a){this.setParameterValue(e,t,a)}processNormalizedParameterEvent(e,t,a){this.setParameterValueNormalized(e,t,a)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let a=1/(t-1);e=1*rnbo_fround(e/a*1/1)*a}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,a,r){}processOutletAtCurrentTime(e,t,a){}processOutletEvent(e,t,a,r){this.updateTime(r),this.processOutletAtCurrentTime(e,t,a)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,a,r){}processListMessage(e,t,a,r){}processBangMessage(e,t,a){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_164{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(2),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.delta_tilde_14_setupDone=!1,this.ip_10_sigbuf=0,this.ip_10_setupDone=!1,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,a,r){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 1}getNumOutputChannels(){return 1}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,a){}setParameterValue(e,t,a){}processParameterEvent(e,t,a){this.setParameterValue(e,t,a)}processNormalizedParameterEvent(e,t,a){this.setParameterValueNormalized(e,t,a)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let a=1/(t-1);e=1*rnbo_fround(e/a*1/1)*a}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,a,r){}processOutletAtCurrentTime(e,t,a){}processOutletEvent(e,t,a,r){this.updateTime(r),this.processOutletAtCurrentTime(e,t,a)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,a,r){}processListMessage(e,t,a,r){}processBangMessage(e,t,a){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_171{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0,this.p_12=new Array,this.p_13=new Array}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,a,r){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 1}getNumOutputChannels(){return 2}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){this.p_12=new RNBOSubpatcher_163,this.p_12.setEngineAndPatcher(this.getEngine(),this),this.p_12.initialize(),this.p_12.setParameterOffset(this.getParameterOffset(this.p_12)),this.p_13=new RNBOSubpatcher_164,this.p_13.setEngineAndPatcher(this.getEngine(),this),this.p_13.initialize(),this.p_13.setParameterOffset(this.getParameterOffset(this.p_13))}processTempoEvent(e,t){this.updateTime(e),this.p_12.processTempoEvent(e,t),this.p_13.processTempoEvent(e,t)}processTransportEvent(e,t){this.updateTime(e),this.p_12.processTransportEvent(e,t),this.p_13.processTransportEvent(e,t)}processBeatTimeEvent(e,t){this.updateTime(e),this.p_12.processBeatTimeEvent(e,t),this.p_13.processBeatTimeEvent(e,t)}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,a){this.updateTime(e),this.p_12.processTimeSignatureEvent(e,t,a),this.p_13.processTimeSignatureEvent(e,t,a)}setParameterValue(e,t,a){RNBO_UNUSED(t),this.updateTime(a),(e-=0)<this.p_12.getNumParameters()&&this.p_12.setParameterValue(e,t,a),(e-=this.p_12.getNumParameters())<this.p_13.getNumParameters()&&this.p_13.setParameterValue(e,t,a)}processParameterEvent(e,t,a){this.setParameterValue(e,t,a)}processNormalizedParameterEvent(e,t,a){this.setParameterValueNormalized(e,t,a)}getParameterValue(e){return(e-=0)<this.p_12.getNumParameters()?this.p_12.getParameterValue(e):(e-=this.p_12.getNumParameters())<this.p_13.getNumParameters()?this.p_13.getParameterValue(e):0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0+this.p_12.getNumParameters()+this.p_13.getNumParameters()}getParameterName(e){return(e-=0)<this.p_12.getNumParameters()?this.p_12.getParameterName(e):(e-=this.p_12.getNumParameters())<this.p_13.getNumParameters()?this.p_13.getParameterName(e):\"bogus\"}getParameterId(e){return(e-=0)<this.p_12.getNumParameters()?this.p_12.getParameterId(e):(e-=this.p_12.getNumParameters())<this.p_13.getNumParameters()?this.p_13.getParameterId(e):\"bogus\"}getParameterInfo(e,t){(e-=0)<this.p_12.getNumParameters()&&this.p_12.getParameterInfo(e,t),(e-=this.p_12.getNumParameters())<this.p_13.getNumParameters()&&this.p_13.getParameterInfo(e,t)}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}getParameterOffset(e){return e==this.p_12?0:e==this.p_13?0+this.p_12.getNumParameters():0}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let a=1/(t-1);e=1*rnbo_fround(e/a*1/1)*a}return e}convertToNormalizedParameterValue(e,t){return(e-=0)<this.p_12.getNumParameters()?this.p_12.convertToNormalizedParameterValue(e,t):(e-=this.p_12.getNumParameters())<this.p_13.getNumParameters()?this.p_13.convertToNormalizedParameterValue(e,t):t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t,(e-=0)<this.p_12.getNumParameters()?this.p_12.convertFromNormalizedParameterValue(e,t):(e-=this.p_12.getNumParameters())<this.p_13.getNumParameters()?this.p_13.convertFromNormalizedParameterValue(e,t):t}constrainParameterValue(e,t){return(e-=0)<this.p_12.getNumParameters()?this.p_12.constrainParameterValue(e,t):(e-=this.p_12.getNumParameters())<this.p_13.getNumParameters()?this.p_13.constrainParameterValue(e,t):t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,a,r){}processOutletAtCurrentTime(e,t,a){}processOutletEvent(e,t,a,r){this.updateTime(r),this.processOutletAtCurrentTime(e,t,a)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,a,r){RNBO_UNUSED(t),this.updateTime(a),this.p_12.processNumMessage(e,t,a,r),this.p_13.processNumMessage(e,t,a,r)}processListMessage(e,t,a,r){RNBO_UNUSED(t),this.updateTime(a),this.p_12.processListMessage(e,t,a,r),this.p_13.processListMessage(e,t,a,r)}processBangMessage(e,t,a){RNBO_UNUSED(t),this.updateTime(a),this.p_12.processBangMessage(e,t,a),this.p_13.processBangMessage(e,t,a)}resolveTag(e){var t=this.p_12.resolveTag(e);if(t)return t;var a=this.p_13.resolveTag(e);return a||null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){this.p_12.processDataViewUpdate(e,t),this.p_13.processDataViewUpdate(e,t)}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_165{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(2),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.groove_07_buffer=0,this.groove_07_playStatus=0,this.groove_07_setupDone=!1,this.data_205_buffer=0,this.data_205_setupDone=!1,this.data_206_buffer=0,this.data_206_setupDone=!1,this.data_207_buffer=0,this.data_207_setupDone=!1,this.data_208_buffer=0,this.data_208_setupDone=!1,this.data_209_buffer=0,this.data_209_setupDone=!1,this.data_210_buffer=0,this.data_210_setupDone=!1,this.data_211_buffer=0,this.data_211_setupDone=!1,this.data_212_buffer=0,this.data_212_setupDone=!1,this.data_213_buffer=0,this.data_213_setupDone=!1,this.data_214_buffer=0,this.data_214_setupDone=!1,this.data_215_buffer=0,this.data_215_setupDone=!1,this.data_216_buffer=0,this.data_216_setupDone=!1,this.data_217_buffer=0,this.data_217_setupDone=!1,this.data_218_buffer=0,this.data_218_setupDone=!1,this.data_219_buffer=0,this.data_219_setupDone=!1,this.data_220_buffer=0,this.data_220_setupDone=!1,this.data_221_buffer=0,this.data_221_setupDone=!1,this.data_222_buffer=0,this.data_222_setupDone=!1,this.data_223_buffer=0,this.data_223_setupDone=!1,this.data_224_buffer=0,this.data_224_setupDone=!1,this.data_225_buffer=0,this.data_225_setupDone=!1,this.data_226_buffer=0,this.data_226_setupDone=!1,this.data_227_buffer=0,this.data_227_setupDone=!1,this.data_228_buffer=0,this.data_228_setupDone=!1,this.data_229_buffer=0,this.data_229_setupDone=!1,this.data_230_buffer=0,this.data_230_setupDone=!1,this.data_231_buffer=0,this.data_231_setupDone=!1,this.data_232_buffer=0,this.data_232_setupDone=!1,this.data_233_buffer=0,this.data_233_setupDone=!1,this.data_234_buffer=0,this.data_234_setupDone=!1,this.data_235_buffer=0,this.data_235_setupDone=!1,this.data_236_buffer=0,this.data_236_setupDone=!1,this.data_237_buffer=0,this.data_237_setupDone=!1,this.data_238_buffer=0,this.data_238_setupDone=!1,this.groove_07_bufferobj=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,a,r){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 1}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,a){}setParameterValue(e,t,a){}processParameterEvent(e,t,a){this.setParameterValue(e,t,a)}processNormalizedParameterEvent(e,t,a){this.setParameterValueNormalized(e,t,a)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let a=1/(t-1);e=1*rnbo_fround(e/a*1/1)*a}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,a,r){switch(RNBO_UNUSED(r),RNBO_UNUSED(a),this.updateTime(e),t){case-798469121:this.line_07_target_bang()}}processOutletAtCurrentTime(e,t,a){}processOutletEvent(e,t,a,r){this.updateTime(r),this.processOutletAtCurrentTime(e,t,a)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,a,r){}processListMessage(e,t,a,r){}processBangMessage(e,t,a){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}zeroDataRef(e){e.setZero()}processDataViewUpdate(e,t){this.updateTime(t),-1!=e&&7!=e&&6!=e&&5!=e&&4!=e&&15!=e&&14!=e&&13!=e&&12!=e&&23!=e&&22!=e&&21!=e&&20!=e&&29!=e&&28!=e&&27!=e&&26!=e&&33!=e&&32!=e&&31!=e&&30!=e&&3!=e&&2!=e&&1!=e&&0!=e&&11!=e&&10!=e&&9!=e&&8!=e&&19!=e&&18!=e&&17!=e&&16!=e&&25!=e&&24!=e||(this.groove_07_buffer=new Float32MultiBuffer(this.groove_07_bufferobj)),0==e&&(this.data_205_buffer=new Float32Buffer(this.getPatcher().getPatcher().b23),this.data_205_bufferUpdated()),1==e&&(this.data_206_buffer=new Float32Buffer(this.getPatcher().getPatcher().b22),this.data_206_bufferUpdated()),2==e&&(this.data_207_buffer=new Float32Buffer(this.getPatcher().getPatcher().b21),this.data_207_bufferUpdated()),3==e&&(this.data_208_buffer=new Float32Buffer(this.getPatcher().getPatcher().b20),this.data_208_bufferUpdated()),4==e&&(this.data_209_buffer=new Float32Buffer(this.getPatcher().getPatcher().b3),this.data_209_bufferUpdated()),5==e&&(this.data_210_buffer=new Float32Buffer(this.getPatcher().getPatcher().b2),this.data_210_bufferUpdated()),6==e&&(this.data_211_buffer=new Float32Buffer(this.getPatcher().getPatcher().b1),this.data_211_bufferUpdated()),7==e&&(this.data_212_buffer=new Float32Buffer(this.getPatcher().getPatcher().b0),this.data_212_bufferUpdated()),8==e&&(this.data_213_buffer=new Float32Buffer(this.getPatcher().getPatcher().b27),this.data_213_bufferUpdated()),9==e&&(this.data_214_buffer=new Float32Buffer(this.getPatcher().getPatcher().b26),this.data_214_bufferUpdated()),10==e&&(this.data_215_buffer=new Float32Buffer(this.getPatcher().getPatcher().b25),this.data_215_bufferUpdated()),11==e&&(this.data_216_buffer=new Float32Buffer(this.getPatcher().getPatcher().b24),this.data_216_bufferUpdated()),12==e&&(this.data_217_buffer=new Float32Buffer(this.getPatcher().getPatcher().b7),this.data_217_bufferUpdated()),13==e&&(this.data_218_buffer=new Float32Buffer(this.getPatcher().getPatcher().b6),this.data_218_bufferUpdated()),14==e&&(this.data_219_buffer=new Float32Buffer(this.getPatcher().getPatcher().b5),this.data_219_bufferUpdated()),15==e&&(this.data_220_buffer=new Float32Buffer(this.getPatcher().getPatcher().b4),this.data_220_bufferUpdated()),16==e&&(this.data_221_buffer=new Float32Buffer(this.getPatcher().getPatcher().b31),this.data_221_bufferUpdated()),17==e&&(this.data_222_buffer=new Float32Buffer(this.getPatcher().getPatcher().b30),this.data_222_bufferUpdated()),18==e&&(this.data_223_buffer=new Float32Buffer(this.getPatcher().getPatcher().b29),this.data_223_bufferUpdated()),19==e&&(this.data_224_buffer=new Float32Buffer(this.getPatcher().getPatcher().b28),this.data_224_bufferUpdated()),20==e&&(this.data_225_buffer=new Float32Buffer(this.getPatcher().getPatcher().b11),this.data_225_bufferUpdated()),21==e&&(this.data_226_buffer=new Float32Buffer(this.getPatcher().getPatcher().b10),this.data_226_bufferUpdated()),22==e&&(this.data_227_buffer=new Float32Buffer(this.getPatcher().getPatcher().b9),this.data_227_bufferUpdated()),23==e&&(this.data_228_buffer=new Float32Buffer(this.getPatcher().getPatcher().b8),this.data_228_bufferUpdated()),24==e&&(this.data_229_buffer=new Float32Buffer(this.getPatcher().getPatcher().b33),this.data_229_bufferUpdated()),25==e&&(this.data_230_buffer=new Float32Buffer(this.getPatcher().getPatcher().b32),this.data_230_bufferUpdated()),26==e&&(this.data_231_buffer=new Float32Buffer(this.getPatcher().getPatcher().b15),this.data_231_bufferUpdated()),27==e&&(this.data_232_buffer=new Float32Buffer(this.getPatcher().getPatcher().b14),this.data_232_bufferUpdated()),28==e&&(this.data_233_buffer=new Float32Buffer(this.getPatcher().getPatcher().b13),this.data_233_bufferUpdated()),29==e&&(this.data_234_buffer=new Float32Buffer(this.getPatcher().getPatcher().b12),this.data_234_bufferUpdated()),30==e&&(this.data_235_buffer=new Float32Buffer(this.getPatcher().getPatcher().b19),this.data_235_bufferUpdated()),31==e&&(this.data_236_buffer=new Float32Buffer(this.getPatcher().getPatcher().b18),this.data_236_bufferUpdated()),32==e&&(this.data_237_buffer=new Float32Buffer(this.getPatcher().getPatcher().b17),this.data_237_bufferUpdated()),33==e&&(this.data_238_buffer=new Float32Buffer(this.getPatcher().getPatcher().b16),this.data_238_bufferUpdated())}initialize(){this.groove_07_bufferobj=initMultiRef(this.getPatcher().getPatcher().b0,this.getPatcher().getPatcher().b1,this.getPatcher().getPatcher().b2,this.getPatcher().getPatcher().b3,this.getPatcher().getPatcher().b4,this.getPatcher().getPatcher().b5,this.getPatcher().getPatcher().b6,this.getPatcher().getPatcher().b7,this.getPatcher().getPatcher().b8,this.getPatcher().getPatcher().b9,this.getPatcher().getPatcher().b10,this.getPatcher().getPatcher().b11,this.getPatcher().getPatcher().b12,this.getPatcher().getPatcher().b13,this.getPatcher().getPatcher().b14,this.getPatcher().getPatcher().b15,this.getPatcher().getPatcher().b16,this.getPatcher().getPatcher().b17,this.getPatcher().getPatcher().b18,this.getPatcher().getPatcher().b19,this.getPatcher().getPatcher().b20,this.getPatcher().getPatcher().b21,this.getPatcher().getPatcher().b22,this.getPatcher().getPatcher().b23,this.getPatcher().getPatcher().b24,this.getPatcher().getPatcher().b25,this.getPatcher().getPatcher().b26,this.getPatcher().getPatcher().b27,this.getPatcher().getPatcher().b28,this.getPatcher().getPatcher().b29,this.getPatcher().getPatcher().b30,this.getPatcher().getPatcher().b31,this.getPatcher().getPatcher().b32,this.getPatcher().getPatcher().b33),this.assign_defaults(),this.setState(),this.groove_07_bufferobj.setIndex(-1),this.groove_07_buffer=new Float32MultiBuffer(this.groove_07_bufferobj),this.data_205_buffer=new Float32Buffer(this.getPatcher().getPatcher().b23),this.data_206_buffer=new Float32Buffer(this.getPatcher().getPatcher().b22),this.data_207_buffer=new Float32Buffer(this.getPatcher().getPatcher().b21),this.data_208_buffer=new Float32Buffer(this.getPatcher().getPatcher().b20),this.data_209_buffer=new Float32Buffer(this.getPatcher().getPatcher().b3),this.data_210_buffer=new Float32Buffer(this.getPatcher().getPatcher().b2),this.data_211_buffer=new Float32Buffer(this.getPatcher().getPatcher().b1),this.data_212_buffer=new Float32Buffer(this.getPatcher().getPatcher().b0),this.data_213_buffer=new Float32Buffer(this.getPatcher().getPatcher().b27),this.data_214_buffer=new Float32Buffer(this.getPatcher().getPatcher().b26),this.data_215_buffer=new Float32Buffer(this.getPatcher().getPatcher().b25),this.data_216_buffer=new Float32Buffer(this.getPatcher().getPatcher().b24),this.data_217_buffer=new Float32Buffer(this.getPatcher().getPatcher().b7),this.data_218_buffer=new Float32Buffer(this.getPatcher().getPatcher().b6),this.data_219_buffer=new Float32Buffer(this.getPatcher().getPatcher().b5),this.data_220_buffer=new Float32Buffer(this.getPatcher().getPatcher().b4),this.data_221_buffer=new Float32Buffer(this.getPatcher().getPatcher().b31),this.data_222_buffer=new Float32Buffer(this.getPatcher().getPatcher().b30),this.data_223_buffer=new Float32Buffer(this.getPatcher().getPatcher().b29),this.data_224_buffer=new Float32Buffer(this.getPatcher().getPatcher().b28),this.data_225_buffer=new Float32Buffer(this.getPatcher().getPatcher().b11),this.data_226_buffer=new Float32Buffer(this.getPatcher().getPatcher().b10),this.data_227_buffer=new Float32Buffer(this.getPatcher().getPatcher().b9),this.data_228_buffer=new Float32Buffer(this.getPatcher().getPatcher().b8),this.data_229_buffer=new Float32Buffer(this.getPatcher().getPatcher().b33),this.data_230_buffer=new Float32Buffer(this.getPatcher().getPatcher().b32),this.data_231_buffer=new Float32Buffer(this.getPatcher().getPatcher().b15),this.data_232_buffer=new Float32Buffer(this.getPatcher().getPatcher().b14),this.data_233_buffer=new Float32Buffer(this.getPatcher().getPatcher().b13),this.data_234_buffer=new Float32Buffer(this.getPatcher().getPatcher().b12),this.data_235_buffer=new Float32Buffer(this.getPatcher().getPatcher().b19),this.data_236_buffer=new Float32Buffer(this.getPatcher().getPatcher().b18),this.data_237_buffer=new Float32Buffer(this.getPatcher().getPatcher().b17),this.data_238_buffer=new Float32Buffer(this.getPatcher().getPatcher().b16)}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_172{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0,this.p_14=new Array}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,a,r){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 1}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){this.p_14=new RNBOSubpatcher_165,this.p_14.setEngineAndPatcher(this.getEngine(),this),this.p_14.initialize(),this.p_14.setParameterOffset(this.getParameterOffset(this.p_14))}processTempoEvent(e,t){this.updateTime(e),this.p_14.processTempoEvent(e,t)}processTransportEvent(e,t){this.updateTime(e),this.p_14.processTransportEvent(e,t)}processBeatTimeEvent(e,t){this.updateTime(e),this.p_14.processBeatTimeEvent(e,t)}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,a){this.updateTime(e),this.p_14.processTimeSignatureEvent(e,t,a)}setParameterValue(e,t,a){RNBO_UNUSED(t),this.updateTime(a),(e-=0)<this.p_14.getNumParameters()&&this.p_14.setParameterValue(e,t,a)}processParameterEvent(e,t,a){this.setParameterValue(e,t,a)}processNormalizedParameterEvent(e,t,a){this.setParameterValueNormalized(e,t,a)}getParameterValue(e){return(e-=0)<this.p_14.getNumParameters()?this.p_14.getParameterValue(e):0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0+this.p_14.getNumParameters()}getParameterName(e){return(e-=0)<this.p_14.getNumParameters()?this.p_14.getParameterName(e):\"bogus\"}getParameterId(e){return(e-=0)<this.p_14.getNumParameters()?this.p_14.getParameterId(e):\"bogus\"}getParameterInfo(e,t){(e-=0)<this.p_14.getNumParameters()&&this.p_14.getParameterInfo(e,t)}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}getParameterOffset(e){return this.p_14,0}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let a=1/(t-1);e=1*rnbo_fround(e/a*1/1)*a}return e}convertToNormalizedParameterValue(e,t){return(e-=0)<this.p_14.getNumParameters()?this.p_14.convertToNormalizedParameterValue(e,t):t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t,(e-=0)<this.p_14.getNumParameters()?this.p_14.convertFromNormalizedParameterValue(e,t):t}constrainParameterValue(e,t){return(e-=0)<this.p_14.getNumParameters()?this.p_14.constrainParameterValue(e,t):t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,a,r){}processOutletAtCurrentTime(e,t,a){}processOutletEvent(e,t,a,r){this.updateTime(r),this.processOutletAtCurrentTime(e,t,a)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,a,r){RNBO_UNUSED(t),this.updateTime(a),this.p_14.processNumMessage(e,t,a,r)}processListMessage(e,t,a,r){RNBO_UNUSED(t),this.updateTime(a),this.p_14.processListMessage(e,t,a,r)}processBangMessage(e,t,a){RNBO_UNUSED(t),this.updateTime(a),this.p_14.processBangMessage(e,t,a)}resolveTag(e){var t=this.p_14.resolveTag(e);return t||null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){this.p_14.processDataViewUpdate(e,t)}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_166{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,a,r){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,a){}setParameterValue(e,t,a){}processParameterEvent(e,t,a){this.setParameterValue(e,t,a)}processNormalizedParameterEvent(e,t,a){this.setParameterValueNormalized(e,t,a)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let a=1/(t-1);e=1*rnbo_fround(e/a*1/1)*a}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,a,r){}processOutletAtCurrentTime(e,t,a){}processOutletEvent(e,t,a,r){this.updateTime(r),this.processOutletAtCurrentTime(e,t,a)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,a,r){}processListMessage(e,t,a,r){}processBangMessage(e,t,a){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_167{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,a,r){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,a){}setParameterValue(e,t,a){}processParameterEvent(e,t,a){this.setParameterValue(e,t,a)}processNormalizedParameterEvent(e,t,a){this.setParameterValueNormalized(e,t,a)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let a=1/(t-1);e=1*rnbo_fround(e/a*1/1)*a}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,a,r){}processOutletAtCurrentTime(e,t,a){}processOutletEvent(e,t,a,r){this.updateTime(r),this.processOutletAtCurrentTime(e,t,a)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,a,r){}processListMessage(e,t,a,r){}processBangMessage(e,t,a){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_173{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0,this.p_15=new Array,this.p_16=new Array}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,a,r){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){this.p_15=new RNBOSubpatcher_166,this.p_15.setEngineAndPatcher(this.getEngine(),this),this.p_15.initialize(),this.p_15.setParameterOffset(this.getParameterOffset(this.p_15)),this.p_16=new RNBOSubpatcher_167,this.p_16.setEngineAndPatcher(this.getEngine(),this),this.p_16.initialize(),this.p_16.setParameterOffset(this.getParameterOffset(this.p_16))}processTempoEvent(e,t){this.updateTime(e),this.p_15.processTempoEvent(e,t),this.p_16.processTempoEvent(e,t)}processTransportEvent(e,t){this.updateTime(e),this.p_15.processTransportEvent(e,t),this.p_16.processTransportEvent(e,t)}processBeatTimeEvent(e,t){this.updateTime(e),this.p_15.processBeatTimeEvent(e,t),this.p_16.processBeatTimeEvent(e,t)}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,a){this.updateTime(e),this.p_15.processTimeSignatureEvent(e,t,a),this.p_16.processTimeSignatureEvent(e,t,a)}setParameterValue(e,t,a){RNBO_UNUSED(t),this.updateTime(a),(e-=0)<this.p_15.getNumParameters()&&this.p_15.setParameterValue(e,t,a),(e-=this.p_15.getNumParameters())<this.p_16.getNumParameters()&&this.p_16.setParameterValue(e,t,a)}processParameterEvent(e,t,a){this.setParameterValue(e,t,a)}processNormalizedParameterEvent(e,t,a){this.setParameterValueNormalized(e,t,a)}getParameterValue(e){return(e-=0)<this.p_15.getNumParameters()?this.p_15.getParameterValue(e):(e-=this.p_15.getNumParameters())<this.p_16.getNumParameters()?this.p_16.getParameterValue(e):0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0+this.p_15.getNumParameters()+this.p_16.getNumParameters()}getParameterName(e){return(e-=0)<this.p_15.getNumParameters()?this.p_15.getParameterName(e):(e-=this.p_15.getNumParameters())<this.p_16.getNumParameters()?this.p_16.getParameterName(e):\"bogus\"}getParameterId(e){return(e-=0)<this.p_15.getNumParameters()?this.p_15.getParameterId(e):(e-=this.p_15.getNumParameters())<this.p_16.getNumParameters()?this.p_16.getParameterId(e):\"bogus\"}getParameterInfo(e,t){(e-=0)<this.p_15.getNumParameters()&&this.p_15.getParameterInfo(e,t),(e-=this.p_15.getNumParameters())<this.p_16.getNumParameters()&&this.p_16.getParameterInfo(e,t)}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}getParameterOffset(e){return e==this.p_15?0:e==this.p_16?0+this.p_15.getNumParameters():0}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let a=1/(t-1);e=1*rnbo_fround(e/a*1/1)*a}return e}convertToNormalizedParameterValue(e,t){return(e-=0)<this.p_15.getNumParameters()?this.p_15.convertToNormalizedParameterValue(e,t):(e-=this.p_15.getNumParameters())<this.p_16.getNumParameters()?this.p_16.convertToNormalizedParameterValue(e,t):t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t,(e-=0)<this.p_15.getNumParameters()?this.p_15.convertFromNormalizedParameterValue(e,t):(e-=this.p_15.getNumParameters())<this.p_16.getNumParameters()?this.p_16.convertFromNormalizedParameterValue(e,t):t}constrainParameterValue(e,t){return(e-=0)<this.p_15.getNumParameters()?this.p_15.constrainParameterValue(e,t):(e-=this.p_15.getNumParameters())<this.p_16.getNumParameters()?this.p_16.constrainParameterValue(e,t):t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,a,r){}processOutletAtCurrentTime(e,t,a){}processOutletEvent(e,t,a,r){this.updateTime(r),this.processOutletAtCurrentTime(e,t,a)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,a,r){RNBO_UNUSED(t),this.updateTime(a),this.p_15.processNumMessage(e,t,a,r),this.p_16.processNumMessage(e,t,a,r)}processListMessage(e,t,a,r){RNBO_UNUSED(t),this.updateTime(a),this.p_15.processListMessage(e,t,a,r),this.p_16.processListMessage(e,t,a,r)}processBangMessage(e,t,a){RNBO_UNUSED(t),this.updateTime(a),this.p_15.processBangMessage(e,t,a),this.p_16.processBangMessage(e,t,a)}resolveTag(e){var t=this.p_15.resolveTag(e);if(t)return t;var a=this.p_16.resolveTag(e);return a||null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){this.p_15.processDataViewUpdate(e,t),this.p_16.processDataViewUpdate(e,t)}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_174{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,a,r){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,a){}setParameterValue(e,t,a){}processParameterEvent(e,t,a){this.setParameterValue(e,t,a)}processNormalizedParameterEvent(e,t,a){this.setParameterValueNormalized(e,t,a)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let a=1/(t-1);e=1*rnbo_fround(e/a*1/1)*a}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,a,r){}processOutletAtCurrentTime(e,t,a){}processOutletEvent(e,t,a,r){this.updateTime(r),this.processOutletAtCurrentTime(e,t,a)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,a,r){}processListMessage(e,t,a,r){}processBangMessage(e,t,a){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOPatcher{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(6),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.gen_01_setupDone=!1,this.globaltransport_tempo=0,this.globaltransport_tempoNeedsReset=!1,this.globaltransport_state=0,this.globaltransport_stateNeedsReset=!1,this.globaltransport_notify=!1,this.globaltransport_setupDone=!1,this.b23=0,this.b22=0,this.b21=0,this.b20=0,this.b3=0,this.b2=0,this.b1=0,this.b0=0,this.b27=0,this.b26=0,this.b25=0,this.b24=0,this.b7=0,this.b6=0,this.b5=0,this.b4=0,this.b31=0,this.b30=0,this.b29=0,this.b28=0,this.b11=0,this.b10=0,this.b9=0,this.b8=0,this.b33=0,this.b32=0,this.b15=0,this.b14=0,this.b13=0,this.b12=0,this.b19=0,this.b18=0,this.b17=0,this.b16=0,this._voiceIndex=0,this.isMuted=1,this.paramInitIndices=[],this.paramInitOrder=[],this.p_17=new Array,this.p_18=new Array,this.p_19=new Array,this.p_20=new Array,this.p_21=new Array,this.p_22=new Array,this.p_23=new Array}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,a,r){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 1}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getDataRef(e){switch(e){case 0:return addressOf(this.b23);case 1:return addressOf(this.b22);case 2:return addressOf(this.b21);case 3:return addressOf(this.b20);case 4:return addressOf(this.b3);case 5:return addressOf(this.b2);case 6:return addressOf(this.b1);case 7:return addressOf(this.b0);case 8:return addressOf(this.b27);case 9:return addressOf(this.b26);case 10:return addressOf(this.b25);case 11:return addressOf(this.b24);case 12:return addressOf(this.b7);case 13:return addressOf(this.b6);case 14:return addressOf(this.b5);case 15:return addressOf(this.b4);case 16:return addressOf(this.b31);case 17:return addressOf(this.b30);case 18:return addressOf(this.b29);case 19:return addressOf(this.b28);case 20:return addressOf(this.b11);case 21:return addressOf(this.b10);case 22:return addressOf(this.b9);case 23:return addressOf(this.b8);case 24:return addressOf(this.b33);case 25:return addressOf(this.b32);case 26:return addressOf(this.b15);case 27:return addressOf(this.b14);case 28:return addressOf(this.b13);case 29:return addressOf(this.b12);case 30:return addressOf(this.b19);case 31:return addressOf(this.b18);case 32:return addressOf(this.b17);case 33:return addressOf(this.b16);default:return null}}getNumDataRefs(){return 34}fillDataRef(e,t){}zeroDataRef(e){e.setZero()}processDataViewUpdate(e,t){this.p_17.processDataViewUpdate(e,t),this.p_18.processDataViewUpdate(e,t),this.p_19.processDataViewUpdate(e,t),this.p_20.processDataViewUpdate(e,t),this.p_21.processDataViewUpdate(e,t),this.p_22.processDataViewUpdate(e,t),this.p_23.processDataViewUpdate(e,t)}initialize(){this.b23=initDataRef(\"b23\",!1,null),this.b22=initDataRef(\"b22\",!1,null),this.b21=initDataRef(\"b21\",!1,null),this.b20=initDataRef(\"b20\",!1,null),this.b3=initDataRef(\"b3\",!1,null),this.b2=initDataRef(\"b2\",!1,null),this.b1=initDataRef(\"b1\",!1,null),this.b0=initDataRef(\"b0\",!1,null),this.b27=initDataRef(\"b27\",!1,null),this.b26=initDataRef(\"b26\",!1,null),this.b25=initDataRef(\"b25\",!1,null),this.b24=initDataRef(\"b24\",!1,null),this.b7=initDataRef(\"b7\",!1,null),this.b6=initDataRef(\"b6\",!1,null),this.b5=initDataRef(\"b5\",!1,null),this.b4=initDataRef(\"b4\",!1,null),this.b31=initDataRef(\"b31\",!1,null),this.b30=initDataRef(\"b30\",!1,null),this.b29=initDataRef(\"b29\",!1,null),this.b28=initDataRef(\"b28\",!1,null),this.b11=initDataRef(\"b11\",!1,null),this.b10=initDataRef(\"b10\",!1,null),this.b9=initDataRef(\"b9\",!1,null),this.b8=initDataRef(\"b8\",!1,null),this.b33=initDataRef(\"b33\",!1,null),this.b32=initDataRef(\"b32\",!1,null),this.b15=initDataRef(\"b15\",!1,null),this.b14=initDataRef(\"b14\",!1,null),this.b13=initDataRef(\"b13\",!1,null),this.b12=initDataRef(\"b12\",!1,null),this.b19=initDataRef(\"b19\",!1,null),this.b18=initDataRef(\"b18\",!1,null),this.b17=initDataRef(\"b17\",!1,null),this.b16=initDataRef(\"b16\",!1,null),this.assign_defaults(),this.setState(),this.b23.setIndex(0),this.b22.setIndex(1),this.b21.setIndex(2),this.b20.setIndex(3),this.b3.setIndex(4),this.b2.setIndex(5),this.b1.setIndex(6),this.b0.setIndex(7),this.b27.setIndex(8),this.b26.setIndex(9),this.b25.setIndex(10),this.b24.setIndex(11),this.b7.setIndex(12),this.b6.setIndex(13),this.b5.setIndex(14),this.b4.setIndex(15),this.b31.setIndex(16),this.b30.setIndex(17),this.b29.setIndex(18),this.b28.setIndex(19),this.b11.setIndex(20),this.b10.setIndex(21),this.b9.setIndex(22),this.b8.setIndex(23),this.b33.setIndex(24),this.b32.setIndex(25),this.b15.setIndex(26),this.b14.setIndex(27),this.b13.setIndex(28),this.b12.setIndex(29),this.b19.setIndex(30),this.b18.setIndex(31),this.b17.setIndex(32),this.b16.setIndex(33),this.initializeObjects(),this.allocateDataRefs(),this.startup()}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){this.p_17=new RNBOSubpatcher_168,this.p_17.setEngineAndPatcher(this.getEngine(),this),this.p_17.initialize(),this.p_17.setParameterOffset(this.getParameterOffset(this.p_17)),this.p_18=new RNBOSubpatcher_169,this.p_18.setEngineAndPatcher(this.getEngine(),this),this.p_18.initialize(),this.p_18.setParameterOffset(this.getParameterOffset(this.p_18)),this.p_19=new RNBOSubpatcher_170,this.p_19.setEngineAndPatcher(this.getEngine(),this),this.p_19.initialize(),this.p_19.setParameterOffset(this.getParameterOffset(this.p_19)),this.p_20=new RNBOSubpatcher_171,this.p_20.setEngineAndPatcher(this.getEngine(),this),this.p_20.initialize(),this.p_20.setParameterOffset(this.getParameterOffset(this.p_20)),this.p_21=new RNBOSubpatcher_172,this.p_21.setEngineAndPatcher(this.getEngine(),this),this.p_21.initialize(),this.p_21.setParameterOffset(this.getParameterOffset(this.p_21)),this.p_22=new RNBOSubpatcher_173,this.p_22.setEngineAndPatcher(this.getEngine(),this),this.p_22.initialize(),this.p_22.setParameterOffset(this.getParameterOffset(this.p_22)),this.p_23=new RNBOSubpatcher_174,this.p_23.setEngineAndPatcher(this.getEngine(),this),this.p_23.initialize(),this.p_23.setParameterOffset(this.getParameterOffset(this.p_23))}processTempoEvent(e,t){this.updateTime(e),this.globaltransport_setTempo(t,!1)&&(this.p_17.processTempoEvent(e,t),this.p_18.processTempoEvent(e,t),this.p_19.processTempoEvent(e,t),this.p_20.processTempoEvent(e,t),this.p_21.processTempoEvent(e,t),this.p_22.processTempoEvent(e,t),this.p_23.processTempoEvent(e,t))}processTransportEvent(e,t){this.updateTime(e),this.globaltransport_setState(t,!1)&&(this.p_17.processTransportEvent(e,t),this.p_18.processTransportEvent(e,t),this.p_19.processTransportEvent(e,t),this.p_20.processTransportEvent(e,t),this.p_21.processTransportEvent(e,t),this.p_22.processTransportEvent(e,t),this.p_23.processTransportEvent(e,t))}processBeatTimeEvent(e,t){this.updateTime(e),this.globaltransport_setBeatTime(t,!1)&&(this.p_17.processBeatTimeEvent(e,t),this.p_18.processBeatTimeEvent(e,t),this.p_19.processBeatTimeEvent(e,t),this.p_20.processBeatTimeEvent(e,t),this.p_21.processBeatTimeEvent(e,t),this.p_22.processBeatTimeEvent(e,t),this.p_23.processBeatTimeEvent(e,t))}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,a){this.updateTime(e),this.globaltransport_setTimeSignature(t,a,!1)&&(this.p_17.processTimeSignatureEvent(e,t,a),this.p_18.processTimeSignatureEvent(e,t,a),this.p_19.processTimeSignatureEvent(e,t,a),this.p_20.processTimeSignatureEvent(e,t,a),this.p_21.processTimeSignatureEvent(e,t,a),this.p_22.processTimeSignatureEvent(e,t,a),this.p_23.processTimeSignatureEvent(e,t,a))}setParameterValue(e,t,a){RNBO_UNUSED(t),this.updateTime(a),(e-=0)<this.p_17.getNumParameters()&&this.p_17.setParameterValue(e,t,a),(e-=this.p_17.getNumParameters())<this.p_18.getNumParameters()&&this.p_18.setParameterValue(e,t,a),(e-=this.p_18.getNumParameters())<this.p_19.getNumParameters()&&this.p_19.setParameterValue(e,t,a),(e-=this.p_19.getNumParameters())<this.p_20.getNumParameters()&&this.p_20.setParameterValue(e,t,a),(e-=this.p_20.getNumParameters())<this.p_21.getNumParameters()&&this.p_21.setParameterValue(e,t,a),(e-=this.p_21.getNumParameters())<this.p_22.getNumParameters()&&this.p_22.setParameterValue(e,t,a),(e-=this.p_22.getNumParameters())<this.p_23.getNumParameters()&&this.p_23.setParameterValue(e,t,a)}processParameterEvent(e,t,a){this.setParameterValue(e,t,a)}processNormalizedParameterEvent(e,t,a){this.setParameterValueNormalized(e,t,a)}getParameterValue(e){return(e-=0)<this.p_17.getNumParameters()?this.p_17.getParameterValue(e):(e-=this.p_17.getNumParameters())<this.p_18.getNumParameters()?this.p_18.getParameterValue(e):(e-=this.p_18.getNumParameters())<this.p_19.getNumParameters()?this.p_19.getParameterValue(e):(e-=this.p_19.getNumParameters())<this.p_20.getNumParameters()?this.p_20.getParameterValue(e):(e-=this.p_20.getNumParameters())<this.p_21.getNumParameters()?this.p_21.getParameterValue(e):(e-=this.p_21.getNumParameters())<this.p_22.getNumParameters()?this.p_22.getParameterValue(e):(e-=this.p_22.getNumParameters())<this.p_23.getNumParameters()?this.p_23.getParameterValue(e):0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0+this.p_17.getNumParameters()+this.p_18.getNumParameters()+this.p_19.getNumParameters()+this.p_20.getNumParameters()+this.p_21.getNumParameters()+this.p_22.getNumParameters()+this.p_23.getNumParameters()}getParameterName(e){return(e-=0)<this.p_17.getNumParameters()?this.p_17.getParameterName(e):(e-=this.p_17.getNumParameters())<this.p_18.getNumParameters()?this.p_18.getParameterName(e):(e-=this.p_18.getNumParameters())<this.p_19.getNumParameters()?this.p_19.getParameterName(e):(e-=this.p_19.getNumParameters())<this.p_20.getNumParameters()?this.p_20.getParameterName(e):(e-=this.p_20.getNumParameters())<this.p_21.getNumParameters()?this.p_21.getParameterName(e):(e-=this.p_21.getNumParameters())<this.p_22.getNumParameters()?this.p_22.getParameterName(e):(e-=this.p_22.getNumParameters())<this.p_23.getNumParameters()?this.p_23.getParameterName(e):\"bogus\"}getParameterId(e){return(e-=0)<this.p_17.getNumParameters()?this.p_17.getParameterId(e):(e-=this.p_17.getNumParameters())<this.p_18.getNumParameters()?this.p_18.getParameterId(e):(e-=this.p_18.getNumParameters())<this.p_19.getNumParameters()?this.p_19.getParameterId(e):(e-=this.p_19.getNumParameters())<this.p_20.getNumParameters()?this.p_20.getParameterId(e):(e-=this.p_20.getNumParameters())<this.p_21.getNumParameters()?this.p_21.getParameterId(e):(e-=this.p_21.getNumParameters())<this.p_22.getNumParameters()?this.p_22.getParameterId(e):(e-=this.p_22.getNumParameters())<this.p_23.getNumParameters()?this.p_23.getParameterId(e):\"bogus\"}getParameterInfo(e,t){(e-=0)<this.p_17.getNumParameters()&&this.p_17.getParameterInfo(e,t),(e-=this.p_17.getNumParameters())<this.p_18.getNumParameters()&&this.p_18.getParameterInfo(e,t),(e-=this.p_18.getNumParameters())<this.p_19.getNumParameters()&&this.p_19.getParameterInfo(e,t),(e-=this.p_19.getNumParameters())<this.p_20.getNumParameters()&&this.p_20.getParameterInfo(e,t),(e-=this.p_20.getNumParameters())<this.p_21.getNumParameters()&&this.p_21.getParameterInfo(e,t),(e-=this.p_21.getNumParameters())<this.p_22.getNumParameters()&&this.p_22.getParameterInfo(e,t),(e-=this.p_22.getNumParameters())<this.p_23.getNumParameters()&&this.p_23.getParameterInfo(e,t)}sendParameter(e){this.getEngine().notifyParameterValueChanged(e,this.getParameterValue(e))}getParameterOffset(e){return e==this.p_17?0:e==this.p_18?0+this.p_17.getNumParameters():e==this.p_19?0+this.p_17.getNumParameters()+this.p_18.getNumParameters():e==this.p_20?0+this.p_17.getNumParameters()+this.p_18.getNumParameters()+this.p_19.getNumParameters():e==this.p_21?0+this.p_17.getNumParameters()+this.p_18.getNumParameters()+this.p_19.getNumParameters()+this.p_20.getNumParameters():e==this.p_22?0+this.p_17.getNumParameters()+this.p_18.getNumParameters()+this.p_19.getNumParameters()+this.p_20.getNumParameters()+this.p_21.getNumParameters():e==this.p_23?0+this.p_17.getNumParameters()+this.p_18.getNumParameters()+this.p_19.getNumParameters()+this.p_20.getNumParameters()+this.p_21.getNumParameters()+this.p_22.getNumParameters():0}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let a=1/(t-1);e=1*rnbo_fround(e/a*1/1)*a}return e}convertToNormalizedParameterValue(e,t){return(e-=0)<this.p_17.getNumParameters()?this.p_17.convertToNormalizedParameterValue(e,t):(e-=this.p_17.getNumParameters())<this.p_18.getNumParameters()?this.p_18.convertToNormalizedParameterValue(e,t):(e-=this.p_18.getNumParameters())<this.p_19.getNumParameters()?this.p_19.convertToNormalizedParameterValue(e,t):(e-=this.p_19.getNumParameters())<this.p_20.getNumParameters()?this.p_20.convertToNormalizedParameterValue(e,t):(e-=this.p_20.getNumParameters())<this.p_21.getNumParameters()?this.p_21.convertToNormalizedParameterValue(e,t):(e-=this.p_21.getNumParameters())<this.p_22.getNumParameters()?this.p_22.convertToNormalizedParameterValue(e,t):(e-=this.p_22.getNumParameters())<this.p_23.getNumParameters()?this.p_23.convertToNormalizedParameterValue(e,t):t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t,(e-=0)<this.p_17.getNumParameters()?this.p_17.convertFromNormalizedParameterValue(e,t):(e-=this.p_17.getNumParameters())<this.p_18.getNumParameters()?this.p_18.convertFromNormalizedParameterValue(e,t):(e-=this.p_18.getNumParameters())<this.p_19.getNumParameters()?this.p_19.convertFromNormalizedParameterValue(e,t):(e-=this.p_19.getNumParameters())<this.p_20.getNumParameters()?this.p_20.convertFromNormalizedParameterValue(e,t):(e-=this.p_20.getNumParameters())<this.p_21.getNumParameters()?this.p_21.convertFromNormalizedParameterValue(e,t):(e-=this.p_21.getNumParameters())<this.p_22.getNumParameters()?this.p_22.convertFromNormalizedParameterValue(e,t):(e-=this.p_22.getNumParameters())<this.p_23.getNumParameters()?this.p_23.convertFromNormalizedParameterValue(e,t):t}constrainParameterValue(e,t){return(e-=0)<this.p_17.getNumParameters()?this.p_17.constrainParameterValue(e,t):(e-=this.p_17.getNumParameters())<this.p_18.getNumParameters()?this.p_18.constrainParameterValue(e,t):(e-=this.p_18.getNumParameters())<this.p_19.getNumParameters()?this.p_19.constrainParameterValue(e,t):(e-=this.p_19.getNumParameters())<this.p_20.getNumParameters()?this.p_20.constrainParameterValue(e,t):(e-=this.p_20.getNumParameters())<this.p_21.getNumParameters()?this.p_21.constrainParameterValue(e,t):(e-=this.p_21.getNumParameters())<this.p_22.getNumParameters()?this.p_22.constrainParameterValue(e,t):(e-=this.p_22.getNumParameters())<this.p_23.getNumParameters()?this.p_23.constrainParameterValue(e,t):t}scheduleParamInit(e,t){this.paramInitIndices.push(e),this.paramInitOrder.push(t)}processParamInitEvents(){this.listquicksort(this.paramInitOrder,this.paramInitIndices,0,this.paramInitOrder.length-1,!0);for(var e=0;e<this.paramInitOrder.length;e++)this.getEngine().scheduleParameterChange(this.paramInitIndices[e],this.getParameterValue(this.paramInitIndices[e]),0)}processClockEvent(e,t,a,r){}processOutletAtCurrentTime(e,t,a){}processOutletEvent(e,t,a,r){this.updateTime(r),this.processOutletAtCurrentTime(e,t,a)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,a,r){switch(RNBO_UNUSED(t),this.updateTime(a),e){case TAG(\"rate\"):this.inport_01_value_number_set(r);break;case TAG(\"range\"):this.inport_02_value_number_set(r);break;case TAG(\"subdiv\"):this.inport_03_value_number_set(r);break;case TAG(\"global_cycle\"):this.inport_04_value_number_set(r);break;case TAG(\"retrigger_cycle\"):this.inport_05_value_number_set(r);break;case TAG(\"chord_params\"):this.inport_06_value_number_set(r);break;case TAG(\"sound\"):this.inport_07_value_number_set(r);break;case TAG(\"pitch\"):this.inport_08_value_number_set(r);break;case TAG(\"length\"):this.inport_09_value_number_set(r)}this.p_17.processNumMessage(e,t,a,r),this.p_18.processNumMessage(e,t,a,r),this.p_19.processNumMessage(e,t,a,r),this.p_20.processNumMessage(e,t,a,r),this.p_21.processNumMessage(e,t,a,r),this.p_22.processNumMessage(e,t,a,r),this.p_23.processNumMessage(e,t,a,r)}processListMessage(e,t,a,r){switch(RNBO_UNUSED(t),this.updateTime(a),e){case TAG(\"rate\"):this.inport_01_value_list_set(r);break;case TAG(\"range\"):this.inport_02_value_list_set(r);break;case TAG(\"subdiv\"):this.inport_03_value_list_set(r);break;case TAG(\"global_cycle\"):this.inport_04_value_list_set(r);break;case TAG(\"retrigger_cycle\"):this.inport_05_value_list_set(r);break;case TAG(\"chord_params\"):this.inport_06_value_list_set(r);break;case TAG(\"sound\"):this.inport_07_value_list_set(r);break;case TAG(\"pitch\"):this.inport_08_value_list_set(r);break;case TAG(\"length\"):this.inport_09_value_list_set(r)}this.p_17.processListMessage(e,t,a,r),this.p_18.processListMessage(e,t,a,r),this.p_19.processListMessage(e,t,a,r),this.p_20.processListMessage(e,t,a,r),this.p_21.processListMessage(e,t,a,r),this.p_22.processListMessage(e,t,a,r),this.p_23.processListMessage(e,t,a,r)}processBangMessage(e,t,a){switch(RNBO_UNUSED(t),this.updateTime(a),e){case TAG(\"rate\"):this.inport_01_value_bang_bang();break;case TAG(\"range\"):this.inport_02_value_bang_bang();break;case TAG(\"subdiv\"):this.inport_03_value_bang_bang();break;case TAG(\"global_cycle\"):this.inport_04_value_bang_bang();break;case TAG(\"retrigger_cycle\"):this.inport_05_value_bang_bang();break;case TAG(\"chord_params\"):this.inport_06_value_bang_bang();break;case TAG(\"sound\"):this.inport_07_value_bang_bang();break;case TAG(\"pitch\"):this.inport_08_value_bang_bang();break;case TAG(\"length\"):this.inport_09_value_bang_bang()}this.p_17.processBangMessage(e,t,a),this.p_18.processBangMessage(e,t,a),this.p_19.processBangMessage(e,t,a),this.p_20.processBangMessage(e,t,a),this.p_21.processBangMessage(e,t,a),this.p_22.processBangMessage(e,t,a),this.p_23.processBangMessage(e,t,a)}resolveTag(e){switch(e){case TAG(\"rate\"):return\"rate\";case TAG(\"\"):return\"\";case TAG(\"range\"):return\"range\";case TAG(\"subdiv\"):return\"subdiv\";case TAG(\"global_cycle\"):return\"global_cycle\";case TAG(\"retrigger_cycle\"):return\"retrigger_cycle\";case TAG(\"chord_params\"):return\"chord_params\";case TAG(\"sound\"):return\"sound\";case TAG(\"pitch\"):return\"pitch\";case TAG(\"length\"):return\"length\"}var t=this.p_17.resolveTag(e);if(t)return t;var a=this.p_18.resolveTag(e);if(a)return a;var r=this.p_19.resolveTag(e);if(r)return r;var s=this.p_20.resolveTag(e);if(s)return s;var i=this.p_21.resolveTag(e);if(i)return i;var h=this.p_22.resolveTag(e);if(h)return h;var u=this.p_23.resolveTag(e);return u||\"\"}getNumMessages(){return 9}getMessageInfo(e){switch(e){case 0:return{tag:\"rate\",type:Inport};case 1:return{tag:\"range\",type:Inport};case 2:return{tag:\"subdiv\",type:Inport};case 3:return{tag:\"global_cycle\",type:Inport};case 4:return{tag:\"retrigger_cycle\",type:Inport};case 5:return{tag:\"chord_params\",type:Inport};case 6:return{tag:\"sound\",type:Inport};case 7:return{tag:\"pitch\",type:Inport};case 8:return{tag:\"length\",type:Inport}}return NullMessageInfo}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this}}rnboObj=new RNBOPatcher;",
	"wasm": "",
	"wasmEncoding": "base64",
	"presets": [
		{
			"name": "main",
			"preset": {
				"__sps": {
					"p_obj-12": {
						"__sps": {
							"p_obj-10": {},
							"p_obj-20": {},
							"p_obj-25": {},
							"p_obj-30": {}
						}
					},
					"p_obj-17": {},
					"p_obj-18": {
						"__sps": {
							"p_obj-10": {},
							"p_obj-9": {}
						}
					},
					"p_obj-3": {},
					"p_obj-38": {
						"__sps": {
							"p_obj-19": {},
							"p_obj-22": {},
							"p_obj-25": {},
							"p_obj-69": {},
							"p_obj-7": {}
						}
					},
					"p_obj-39": {
						"__sps": {
							"p_obj-26": {},
							"p_obj-6": {}
						}
					},
					"p_obj-58": {},
					"p_obj-7": {
						"__sps": {
							"p_obj-11": {},
							"p_obj-19": {}
						}
					}
				}
			}
		}
	]
}
