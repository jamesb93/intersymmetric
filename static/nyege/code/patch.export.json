{
  "desc": {
    "parameters": [
      {
        "type": "ParameterTypeNumber",
        "index": 0,
        "name": "numberobj_01_value",
        "paramId": "p_obj-3/p_obj-14/number_obj-19/value",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 16,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "numberobj_a1_s02",
        "meta": ""
      },
      {
        "type": "ParameterTypeNumber",
        "index": 1,
        "name": "numberobj_02_value",
        "paramId": "p_obj-3/p_obj-14/number_obj-18/value",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "numberobj_a1_s01",
        "meta": ""
      },
      {
        "type": "ParameterTypeNumber",
        "index": 2,
        "name": "numberobj_03_value",
        "paramId": "p_obj-3/p_obj-16/number_obj-19/value",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 16,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "numberobj_a1_s02",
        "meta": ""
      },
      {
        "type": "ParameterTypeNumber",
        "index": 3,
        "name": "numberobj_04_value",
        "paramId": "p_obj-3/p_obj-16/number_obj-18/value",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "numberobj_a1_s01",
        "meta": ""
      },
      {
        "type": "ParameterTypeNumber",
        "index": 4,
        "name": "numberobj_05_value",
        "paramId": "p_obj-3/p_obj-17/number_obj-19/value",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 16,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "numberobj_a1_s02",
        "meta": ""
      },
      {
        "type": "ParameterTypeNumber",
        "index": 5,
        "name": "numberobj_06_value",
        "paramId": "p_obj-3/p_obj-17/number_obj-18/value",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "numberobj_a1_s01",
        "meta": ""
      },
      {
        "type": "ParameterTypeNumber",
        "index": 6,
        "name": "numberobj_07_value",
        "paramId": "p_obj-3/p_obj-18/number_obj-19/value",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 16,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "numberobj_a1_s02",
        "meta": ""
      },
      {
        "type": "ParameterTypeNumber",
        "index": 7,
        "name": "numberobj_08_value",
        "paramId": "p_obj-3/p_obj-18/number_obj-18/value",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 1,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "numberobj_a1_s01",
        "meta": ""
      },
      {
        "type": "ParameterTypeBang",
        "index": 8,
        "name": "message_01_bangval",
        "paramId": "p_obj-17/p_obj-29/message_obj-5/bangval",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": false,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "message_s07",
        "meta": ""
      },
      {
        "type": "ParameterTypeBang",
        "index": 9,
        "name": "message_02_bangval",
        "paramId": "p_obj-17/p_obj-29/message_obj-7/bangval",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": false,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "message_s06",
        "meta": ""
      },
      {
        "type": "ParameterTypeBang",
        "index": 10,
        "name": "message_03_bangval",
        "paramId": "p_obj-17/p_obj-29/message_obj-20/bangval",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": false,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "message_s05",
        "meta": ""
      },
      {
        "type": "ParameterTypeBang",
        "index": 11,
        "name": "message_04_bangval",
        "paramId": "p_obj-17/p_obj-29/message_obj-24/bangval",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": false,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "message_s04",
        "meta": ""
      },
      {
        "type": "ParameterTypeBang",
        "index": 12,
        "name": "message_05_bangval",
        "paramId": "p_obj-17/p_obj-29/message_obj-26/bangval",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": false,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "message_s03",
        "meta": ""
      },
      {
        "type": "ParameterTypeBang",
        "index": 13,
        "name": "message_06_bangval",
        "paramId": "p_obj-17/p_obj-29/message_obj-27/bangval",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": false,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "message_s02",
        "meta": ""
      },
      {
        "type": "ParameterTypeBang",
        "index": 14,
        "name": "message_07_bangval",
        "paramId": "p_obj-17/p_obj-29/message_obj-28/bangval",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": false,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "message_s01",
        "meta": ""
      },
      {
        "type": "ParameterTypeNumber",
        "index": 15,
        "name": "toggle_01_value",
        "paramId": "p_obj-1/p_obj-2/toggle_obj-9/value",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "toggle_s01",
        "meta": ""
      },
      {
        "type": "ParameterTypeNumber",
        "index": 16,
        "name": "toggle_02_value",
        "paramId": "p_obj-1/p_obj-12/toggle_obj-9/value",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "sendinit": 0,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "toggle_s01",
        "meta": ""
      }
    ],
    "numParameters": 17,
    "numSignalInParameters": 0,
    "numSignalOutParameters": 0,
    "numInputChannels": 0,
    "numOutputChannels": 1,
    "numMidiInputPorts": 0,
    "numMidiOutputPorts": 0,
    "externalDataRefs": [
      {
        "id": "b.23"
      },
      {
        "id": "b.22"
      },
      {
        "id": "b.21"
      },
      {
        "id": "b.20"
      },
      {
        "id": "b.3"
      },
      {
        "id": "b.2"
      },
      {
        "id": "b.1"
      },
      {
        "id": "b.27"
      },
      {
        "id": "b.26"
      },
      {
        "id": "b.25"
      },
      {
        "id": "b.24"
      },
      {
        "id": "b.7"
      },
      {
        "id": "b.6"
      },
      {
        "id": "b.5"
      },
      {
        "id": "b.4"
      },
      {
        "id": "b.31"
      },
      {
        "id": "b.30"
      },
      {
        "id": "b.29"
      },
      {
        "id": "b.28"
      },
      {
        "id": "b.11"
      },
      {
        "id": "b.10"
      },
      {
        "id": "b.9"
      },
      {
        "id": "b.8"
      },
      {
        "id": "b.34"
      },
      {
        "id": "b.33"
      },
      {
        "id": "b.32"
      },
      {
        "id": "b.15"
      },
      {
        "id": "b.14"
      },
      {
        "id": "b.13"
      },
      {
        "id": "b.12"
      },
      {
        "id": "b.19"
      },
      {
        "id": "b.18"
      },
      {
        "id": "b.17"
      },
      {
        "id": "b.16"
      }
    ],
    "patcherSerial": 0,
    "inports": [
      "state",
      "rate",
      "global_cycle",
      "sampler_params",
      null
    ],
    "outports": [
      null
    ],
    "inlets": [],
    "outlets": [
      {
        "type": "signal",
        "index": 1,
        "tag": "out1"
      }
    ],
    "paramConversion": {
      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_22.getNumParameters())\n            return this.p_22.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_22.getNumParameters();\n\n        if (index < this.p_23.getNumParameters())\n            return this.p_23.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_23.getNumParameters();\n\n        if (index < this.p_24.getNumParameters())\n            return this.p_24.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_24.getNumParameters();\n\n        if (index < this.p_25.getNumParameters())\n            return this.p_25.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_25.getNumParameters();\n\n        if (index < this.p_26.getNumParameters())\n            return this.p_26.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_26.getNumParameters();\n\n        if (index < this.p_27.getNumParameters())\n            return this.p_27.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_27.getNumParameters();\n\n        if (index < this.p_28.getNumParameters())\n            return this.p_28.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_22.getNumParameters())\n            return this.p_22.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_22.getNumParameters();\n\n        if (index < this.p_23.getNumParameters())\n            return this.p_23.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_23.getNumParameters();\n\n        if (index < this.p_24.getNumParameters())\n            return this.p_24.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_24.getNumParameters();\n\n        if (index < this.p_25.getNumParameters())\n            return this.p_25.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_25.getNumParameters();\n\n        if (index < this.p_26.getNumParameters())\n            return this.p_26.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_26.getNumParameters();\n\n        if (index < this.p_27.getNumParameters())\n            return this.p_27.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_27.getNumParameters();\n\n        if (index < this.p_28.getNumParameters())\n            return this.p_28.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
      "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_22.getNumParameters() + this.p_23.getNumParameters() + this.p_24.getNumParameters() + this.p_25.getNumParameters() + this.p_26.getNumParameters() + this.p_27.getNumParameters() + this.p_28.getNumParameters();\n}",
      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_22.getNumParameters())\n            return this.p_22.constrainParameterValue(index, value);\n\n        index -= this.p_22.getNumParameters();\n\n        if (index < this.p_23.getNumParameters())\n            return this.p_23.constrainParameterValue(index, value);\n\n        index -= this.p_23.getNumParameters();\n\n        if (index < this.p_24.getNumParameters())\n            return this.p_24.constrainParameterValue(index, value);\n\n        index -= this.p_24.getNumParameters();\n\n        if (index < this.p_25.getNumParameters())\n            return this.p_25.constrainParameterValue(index, value);\n\n        index -= this.p_25.getNumParameters();\n\n        if (index < this.p_26.getNumParameters())\n            return this.p_26.constrainParameterValue(index, value);\n\n        index -= this.p_26.getNumParameters();\n\n        if (index < this.p_27.getNumParameters())\n            return this.p_27.constrainParameterValue(index, value);\n\n        index -= this.p_27.getNumParameters();\n\n        if (index < this.p_28.getNumParameters())\n            return this.p_28.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
      "subpatches": {
        "p_22": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_01.getNumParameters())\n            return this.p_01.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_01.getNumParameters();\n\n        if (index < this.p_02.getNumParameters())\n            return this.p_02.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_02.getNumParameters();\n\n        if (index < this.p_03.getNumParameters())\n            return this.p_03.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_03.getNumParameters();\n\n        if (index < this.p_04.getNumParameters())\n            return this.p_04.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_01.getNumParameters())\n            return this.p_01.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_01.getNumParameters();\n\n        if (index < this.p_02.getNumParameters())\n            return this.p_02.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_02.getNumParameters();\n\n        if (index < this.p_03.getNumParameters())\n            return this.p_03.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_03.getNumParameters();\n\n        if (index < this.p_04.getNumParameters())\n            return this.p_04.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_01.getNumParameters() + this.p_02.getNumParameters() + this.p_03.getNumParameters() + this.p_04.getNumParameters();\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_01.getNumParameters())\n            return this.p_01.constrainParameterValue(index, value);\n\n        index -= this.p_01.getNumParameters();\n\n        if (index < this.p_02.getNumParameters())\n            return this.p_02.constrainParameterValue(index, value);\n\n        index -= this.p_02.getNumParameters();\n\n        if (index < this.p_03.getNumParameters())\n            return this.p_03.constrainParameterValue(index, value);\n\n        index -= this.p_03.getNumParameters();\n\n        if (index < this.p_04.getNumParameters())\n            return this.p_04.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
          "subpatches": {
            "p_01": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_02": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_03": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_04": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            }
          },
          "isPolyphonic": false
        },
        "p_23": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "subpatches": {},
          "isPolyphonic": false
        },
        "p_24": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_09.getNumParameters())\n            return this.p_09.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_09.getNumParameters();\n\n        if (index < this.p_10.getNumParameters())\n            return this.p_10.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_10.getNumParameters();\n\n        if (index < this.p_11.getNumParameters())\n            return this.p_11.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_11.getNumParameters();\n\n        if (index < this.p_12.getNumParameters())\n            return this.p_12.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_09.getNumParameters())\n            return this.p_09.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_09.getNumParameters();\n\n        if (index < this.p_10.getNumParameters())\n            return this.p_10.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_10.getNumParameters();\n\n        if (index < this.p_11.getNumParameters())\n            return this.p_11.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_11.getNumParameters();\n\n        if (index < this.p_12.getNumParameters())\n            return this.p_12.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_09.getNumParameters() + this.p_10.getNumParameters() + this.p_11.getNumParameters() + this.p_12.getNumParameters();\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_09.getNumParameters())\n            return this.p_09.constrainParameterValue(index, value);\n\n        index -= this.p_09.getNumParameters();\n\n        if (index < this.p_10.getNumParameters())\n            return this.p_10.constrainParameterValue(index, value);\n\n        index -= this.p_10.getNumParameters();\n\n        if (index < this.p_11.getNumParameters())\n            return this.p_11.constrainParameterValue(index, value);\n\n        index -= this.p_11.getNumParameters();\n\n        if (index < this.p_12.getNumParameters())\n            return this.p_12.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
          "subpatches": {
            "p_09": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 0:\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n            return normalizedValue;\n        }\n    default:\n        index -= 2;\n\n        if (index < this.p_05.getNumParameters())\n            return this.p_05.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 0:\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    default:\n        index -= 2;\n\n        if (index < this.p_05.getNumParameters())\n            return this.p_05.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 2 + this.p_05.getNumParameters();\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 2;\n\n        if (index < this.p_05.getNumParameters())\n            return this.p_05.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
              "subpatches": {
                "p_05": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_10": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 0:\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n            return normalizedValue;\n        }\n    default:\n        index -= 2;\n\n        if (index < this.p_06.getNumParameters())\n            return this.p_06.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 0:\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    default:\n        index -= 2;\n\n        if (index < this.p_06.getNumParameters())\n            return this.p_06.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 2 + this.p_06.getNumParameters();\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 2;\n\n        if (index < this.p_06.getNumParameters())\n            return this.p_06.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
              "subpatches": {
                "p_06": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_11": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 0:\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n            return normalizedValue;\n        }\n    default:\n        index -= 2;\n\n        if (index < this.p_07.getNumParameters())\n            return this.p_07.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 0:\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    default:\n        index -= 2;\n\n        if (index < this.p_07.getNumParameters())\n            return this.p_07.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 2 + this.p_07.getNumParameters();\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 2;\n\n        if (index < this.p_07.getNumParameters())\n            return this.p_07.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
              "subpatches": {
                "p_07": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_12": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 0:\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n            return normalizedValue;\n        }\n    default:\n        index -= 2;\n\n        if (index < this.p_08.getNumParameters())\n            return this.p_08.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 0:\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    default:\n        index -= 2;\n\n        if (index < this.p_08.getNumParameters())\n            return this.p_08.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 2 + this.p_08.getNumParameters();\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 2;\n\n        if (index < this.p_08.getNumParameters())\n            return this.p_08.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
              "subpatches": {
                "p_08": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            }
          },
          "isPolyphonic": false
        },
        "p_25": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "subpatches": {},
          "isPolyphonic": false
        },
        "p_26": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_13.getNumParameters())\n            return this.p_13.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_13.getNumParameters();\n\n        if (index < this.p_14.getNumParameters())\n            return this.p_14.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_14.getNumParameters();\n\n        if (index < this.p_15.getNumParameters())\n            return this.p_15.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_13.getNumParameters())\n            return this.p_13.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_13.getNumParameters();\n\n        if (index < this.p_14.getNumParameters())\n            return this.p_14.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_14.getNumParameters();\n\n        if (index < this.p_15.getNumParameters())\n            return this.p_15.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_13.getNumParameters() + this.p_14.getNumParameters() + this.p_15.getNumParameters();\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_13.getNumParameters())\n            return this.p_13.constrainParameterValue(index, value);\n\n        index -= this.p_13.getNumParameters();\n\n        if (index < this.p_14.getNumParameters())\n            return this.p_14.constrainParameterValue(index, value);\n\n        index -= this.p_14.getNumParameters();\n\n        if (index < this.p_15.getNumParameters())\n            return this.p_15.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
          "subpatches": {
            "p_13": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_14": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_15": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 7;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            }
          },
          "isPolyphonic": false
        },
        "p_27": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_18.getNumParameters())\n            return this.p_18.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_18.getNumParameters();\n\n        if (index < this.p_19.getNumParameters())\n            return this.p_19.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_18.getNumParameters())\n            return this.p_18.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_18.getNumParameters();\n\n        if (index < this.p_19.getNumParameters())\n            return this.p_19.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_18.getNumParameters() + this.p_19.getNumParameters();\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_18.getNumParameters())\n            return this.p_18.constrainParameterValue(index, value);\n\n        index -= this.p_18.getNumParameters();\n\n        if (index < this.p_19.getNumParameters())\n            return this.p_19.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
          "subpatches": {
            "p_18": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n            return normalizedValue;\n        }\n    default:\n        index -= 1;\n\n        if (index < this.p_16.getNumParameters())\n            return this.p_16.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    default:\n        index -= 1;\n\n        if (index < this.p_16.getNumParameters())\n            return this.p_16.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 1 + this.p_16.getNumParameters();\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 1;\n\n        if (index < this.p_16.getNumParameters())\n            return this.p_16.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
              "subpatches": {
                "p_16": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_19": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n            return normalizedValue;\n        }\n    default:\n        index -= 1;\n\n        if (index < this.p_17.getNumParameters())\n            return this.p_17.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    default:\n        index -= 1;\n\n        if (index < this.p_17.getNumParameters())\n            return this.p_17.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 1 + this.p_17.getNumParameters();\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 1;\n\n        if (index < this.p_17.getNumParameters())\n            return this.p_17.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
              "subpatches": {
                "p_17": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            }
          },
          "isPolyphonic": false
        },
        "p_28": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_20.getNumParameters())\n            return this.p_20.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_20.getNumParameters();\n\n        if (index < this.p_21.getNumParameters())\n            return this.p_21.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_20.getNumParameters())\n            return this.p_20.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_20.getNumParameters();\n\n        if (index < this.p_21.getNumParameters())\n            return this.p_21.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_20.getNumParameters() + this.p_21.getNumParameters();\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_20.getNumParameters())\n            return this.p_20.constrainParameterValue(index, value);\n\n        index -= this.p_20.getNumParameters();\n\n        if (index < this.p_21.getNumParameters())\n            return this.p_21.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
          "subpatches": {
            "p_20": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_21": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            }
          },
          "isPolyphonic": false
        }
      },
      "isPolyphonic": false
    },
    "rnboVersion": "0.17.0-dev.40",
    "meta": {
      "architecture": "x64",
      "maxversion": "8.5.0",
      "filename": "nyege.maxpat"
    },
    "options": {
      "classname": "rnbomatic",
      "minifyOutput": true
    }
  },
  "src": "class RNBOSubpatcher_57{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(4),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.edge_01_setupDone=!1,this.gen_01_setupDone=!1,this.peek_tilde_01_buffer=0,this.ip_01_sigbuf=0,this.ip_01_setupDone=!1,this.latch_tilde_01_setupDone=!1,this.latch_tilde_02_setupDone=!1,this.ip_02_sigbuf=0,this.ip_02_setupDone=!1,this.data_01_buffer=0,this.data_01_setupDone=!1,this.data_02_buffer=0,this.data_02_setupDone=!1,this.data_03_buffer=0,this.data_03_setupDone=!1,this.data_04_buffer=0,this.data_04_setupDone=!1,this.data_05_buffer=0,this.data_05_setupDone=!1,this.data_06_buffer=0,this.data_06_setupDone=!1,this.data_07_buffer=0,this.data_07_setupDone=!1,this.data_08_buffer=0,this.data_08_setupDone=!1,this.data_09_buffer=0,this.data_09_setupDone=!1,this.data_10_buffer=0,this.data_10_setupDone=!1,this.data_11_buffer=0,this.data_11_setupDone=!1,this.data_12_buffer=0,this.data_12_setupDone=!1,this.data_13_buffer=0,this.data_13_setupDone=!1,this.data_14_buffer=0,this.data_14_setupDone=!1,this.data_15_buffer=0,this.data_15_setupDone=!1,this.data_16_buffer=0,this.data_16_setupDone=!1,this.data_17_buffer=0,this.data_17_setupDone=!1,this.data_18_buffer=0,this.data_18_setupDone=!1,this.data_19_buffer=0,this.data_19_setupDone=!1,this.data_20_buffer=0,this.data_20_setupDone=!1,this.data_21_buffer=0,this.data_21_setupDone=!1,this.data_22_buffer=0,this.data_22_setupDone=!1,this.data_23_buffer=0,this.data_23_setupDone=!1,this.data_24_buffer=0,this.data_24_setupDone=!1,this.data_25_buffer=0,this.data_25_setupDone=!1,this.data_26_buffer=0,this.data_26_setupDone=!1,this.data_27_buffer=0,this.data_27_setupDone=!1,this.data_28_buffer=0,this.data_28_setupDone=!1,this.data_29_buffer=0,this.data_29_setupDone=!1,this.data_30_buffer=0,this.data_30_setupDone=!1,this.data_31_buffer=0,this.data_31_setupDone=!1,this.data_32_buffer=0,this.data_32_setupDone=!1,this.data_33_buffer=0,this.data_33_setupDone=!1,this.data_34_buffer=0,this.data_34_setupDone=!1,this.peek_tilde_01_bufferobj=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(t){return RNBO_UNUSED(t),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(t,e,a,r){}getNumMidiOutputPorts(){return 0}msToSamps(t,e){return t*e*.001}sampsToMs(t){return t*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 1}getNumOutputChannels(){return 1}setProbingTarget(t){this.setProbingIndex(-1)}setProbingIndex(t){}getProbingChannels(t){return RNBO_UNUSED(t),0}getIsMuted(){return this.isMuted}setIsMuted(t){this.isMuted=t}getPatcherSerial(){return 0}setState(){}processTempoEvent(t,e){}processTransportEvent(t,e){}processBeatTimeEvent(t,e){}onSampleRateChanged(t){}processTimeSignatureEvent(t,e,a){}setParameterValue(t,e,a){}processParameterEvent(t,e,a){this.setParameterValue(t,e,a)}processNormalizedParameterEvent(t,e,a){this.setParameterValueNormalized(t,e,a)}getParameterValue(t){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(t){return\"bogus\"}getParameterId(t){return\"bogus\"}getParameterInfo(t,e){}sendParameter(t){this.getPatcher().sendParameter(t+this.parameterOffset)}setParameterOffset(t){this.parameterOffset=t}applyStepsToNormalizedParameterValue(t,e){if(1==e)t>0&&(t=1);else{let a=1/(e-1);t=1*rnbo_fround(t/a*1/1)*a}return t}convertToNormalizedParameterValue(t,e){return e}convertFromNormalizedParameterValue(t,e){return e=e<0?0:e>1?1:e}constrainParameterValue(t,e){return e}scheduleParamInit(t,e){this.getPatcher().scheduleParamInit(t+this.parameterOffset,e)}processClockEvent(t,e,a,r){switch(RNBO_UNUSED(r),RNBO_UNUSED(a),this.updateTime(t),e){case-611950441:this.edge_01_onout_bang();break;case-1584063977:this.edge_01_offout_bang()}}processOutletAtCurrentTime(t,e,a){}processOutletEvent(t,e,a,r){this.updateTime(r),this.processOutletAtCurrentTime(t,e,a)}sendOutlet(t,e){this.getEngine().sendOutlet(this,t,e)}processNumMessage(t,e,a,r){switch(RNBO_UNUSED(e),this.updateTime(a),t){case TAG(\"state\"):this.inport_01_value_number_set(r)}}processListMessage(t,e,a,r){switch(RNBO_UNUSED(e),this.updateTime(a),t){case TAG(\"state\"):this.inport_01_value_list_set(r)}}processBangMessage(t,e,a){switch(RNBO_UNUSED(e),this.updateTime(a),t){case TAG(\"state\"):this.inport_01_value_bang_bang()}}resolveTag(t){switch(t){case TAG(\"state\"):return\"state\";case TAG(\"\"):return\"\"}return null}getDataRef(t){return null}getNumDataRefs(){return 0}fillDataRef(t,e){}zeroDataRef(t){t.setZero()}processDataViewUpdate(t,e){this.updateTime(e),-1!=t&&6!=t&&5!=t&&4!=t&&14!=t&&13!=t&&12!=t&&11!=t&&22!=t&&21!=t&&20!=t&&19!=t&&29!=t&&28!=t&&27!=t&&26!=t&&33!=t&&32!=t&&31!=t&&30!=t&&3!=t&&2!=t&&1!=t&&0!=t&&10!=t&&9!=t&&8!=t&&7!=t&&18!=t&&17!=t&&16!=t&&15!=t&&25!=t&&24!=t&&23!=t||(this.peek_tilde_01_buffer=new Float32MultiBuffer(this.peek_tilde_01_bufferobj)),0==t&&(this.data_01_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_23),this.data_01_bufferUpdated()),1==t&&(this.data_02_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_22),this.data_02_bufferUpdated()),2==t&&(this.data_03_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_21),this.data_03_bufferUpdated()),3==t&&(this.data_04_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_20),this.data_04_bufferUpdated()),4==t&&(this.data_05_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_3),this.data_05_bufferUpdated()),5==t&&(this.data_06_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_2),this.data_06_bufferUpdated()),6==t&&(this.data_07_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_1),this.data_07_bufferUpdated()),7==t&&(this.data_08_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_27),this.data_08_bufferUpdated()),8==t&&(this.data_09_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_26),this.data_09_bufferUpdated()),9==t&&(this.data_10_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_25),this.data_10_bufferUpdated()),10==t&&(this.data_11_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_24),this.data_11_bufferUpdated()),11==t&&(this.data_12_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_7),this.data_12_bufferUpdated()),12==t&&(this.data_13_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_6),this.data_13_bufferUpdated()),13==t&&(this.data_14_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_5),this.data_14_bufferUpdated()),14==t&&(this.data_15_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_4),this.data_15_bufferUpdated()),15==t&&(this.data_16_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_31),this.data_16_bufferUpdated()),16==t&&(this.data_17_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_30),this.data_17_bufferUpdated()),17==t&&(this.data_18_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_29),this.data_18_bufferUpdated()),18==t&&(this.data_19_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_28),this.data_19_bufferUpdated()),19==t&&(this.data_20_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_11),this.data_20_bufferUpdated()),20==t&&(this.data_21_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_10),this.data_21_bufferUpdated()),21==t&&(this.data_22_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_9),this.data_22_bufferUpdated()),22==t&&(this.data_23_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_8),this.data_23_bufferUpdated()),23==t&&(this.data_24_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_34),this.data_24_bufferUpdated()),24==t&&(this.data_25_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_33),this.data_25_bufferUpdated()),25==t&&(this.data_26_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_32),this.data_26_bufferUpdated()),26==t&&(this.data_27_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_15),this.data_27_bufferUpdated()),27==t&&(this.data_28_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_14),this.data_28_bufferUpdated()),28==t&&(this.data_29_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_13),this.data_29_bufferUpdated()),29==t&&(this.data_30_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_12),this.data_30_bufferUpdated()),30==t&&(this.data_31_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_19),this.data_31_bufferUpdated()),31==t&&(this.data_32_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_18),this.data_32_bufferUpdated()),32==t&&(this.data_33_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_17),this.data_33_bufferUpdated()),33==t&&(this.data_34_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_16),this.data_34_bufferUpdated())}initialize(){this.peek_tilde_01_bufferobj=initMultiRef(this.getPatcher().getPatcher().b_dot_1,this.getPatcher().getPatcher().b_dot_2,this.getPatcher().getPatcher().b_dot_3,this.getPatcher().getPatcher().b_dot_4,this.getPatcher().getPatcher().b_dot_5,this.getPatcher().getPatcher().b_dot_6,this.getPatcher().getPatcher().b_dot_7,this.getPatcher().getPatcher().b_dot_8,this.getPatcher().getPatcher().b_dot_9,this.getPatcher().getPatcher().b_dot_10,this.getPatcher().getPatcher().b_dot_11,this.getPatcher().getPatcher().b_dot_12,this.getPatcher().getPatcher().b_dot_13,this.getPatcher().getPatcher().b_dot_14,this.getPatcher().getPatcher().b_dot_15,this.getPatcher().getPatcher().b_dot_16,this.getPatcher().getPatcher().b_dot_17,this.getPatcher().getPatcher().b_dot_18,this.getPatcher().getPatcher().b_dot_19,this.getPatcher().getPatcher().b_dot_20,this.getPatcher().getPatcher().b_dot_21,this.getPatcher().getPatcher().b_dot_22,this.getPatcher().getPatcher().b_dot_23,this.getPatcher().getPatcher().b_dot_24,this.getPatcher().getPatcher().b_dot_25,this.getPatcher().getPatcher().b_dot_26,this.getPatcher().getPatcher().b_dot_27,this.getPatcher().getPatcher().b_dot_28,this.getPatcher().getPatcher().b_dot_29,this.getPatcher().getPatcher().b_dot_30,this.getPatcher().getPatcher().b_dot_31,this.getPatcher().getPatcher().b_dot_32,this.getPatcher().getPatcher().b_dot_33,this.getPatcher().getPatcher().b_dot_34),this.assign_defaults(),this.setState(),this.peek_tilde_01_bufferobj.setIndex(-1),this.peek_tilde_01_buffer=new Float32MultiBuffer(this.peek_tilde_01_bufferobj),this.data_01_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_23),this.data_02_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_22),this.data_03_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_21),this.data_04_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_20),this.data_05_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_3),this.data_06_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_2),this.data_07_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_1),this.data_08_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_27),this.data_09_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_26),this.data_10_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_25),this.data_11_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_24),this.data_12_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_7),this.data_13_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_6),this.data_14_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_5),this.data_15_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_4),this.data_16_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_31),this.data_17_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_30),this.data_18_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_29),this.data_19_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_28),this.data_20_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_11),this.data_21_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_10),this.data_22_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_9),this.data_23_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_8),this.data_24_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_34),this.data_25_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_33),this.data_26_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_32),this.data_27_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_15),this.data_28_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_14),this.data_29_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_13),this.data_30_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_12),this.data_31_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_19),this.data_32_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_18),this.data_33_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_17),this.data_34_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_16)}assign_defaults(){}setEngineAndPatcher(t,e){this._engineInterface=t,this._parentPatcher=e}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_58{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(4),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.edge_02_setupDone=!1,this.gen_02_setupDone=!1,this.peek_tilde_02_buffer=0,this.ip_03_sigbuf=0,this.ip_03_setupDone=!1,this.latch_tilde_03_setupDone=!1,this.latch_tilde_04_setupDone=!1,this.ip_04_sigbuf=0,this.ip_04_setupDone=!1,this.data_35_buffer=0,this.data_35_setupDone=!1,this.data_36_buffer=0,this.data_36_setupDone=!1,this.data_37_buffer=0,this.data_37_setupDone=!1,this.data_38_buffer=0,this.data_38_setupDone=!1,this.data_39_buffer=0,this.data_39_setupDone=!1,this.data_40_buffer=0,this.data_40_setupDone=!1,this.data_41_buffer=0,this.data_41_setupDone=!1,this.data_42_buffer=0,this.data_42_setupDone=!1,this.data_43_buffer=0,this.data_43_setupDone=!1,this.data_44_buffer=0,this.data_44_setupDone=!1,this.data_45_buffer=0,this.data_45_setupDone=!1,this.data_46_buffer=0,this.data_46_setupDone=!1,this.data_47_buffer=0,this.data_47_setupDone=!1,this.data_48_buffer=0,this.data_48_setupDone=!1,this.data_49_buffer=0,this.data_49_setupDone=!1,this.data_50_buffer=0,this.data_50_setupDone=!1,this.data_51_buffer=0,this.data_51_setupDone=!1,this.data_52_buffer=0,this.data_52_setupDone=!1,this.data_53_buffer=0,this.data_53_setupDone=!1,this.data_54_buffer=0,this.data_54_setupDone=!1,this.data_55_buffer=0,this.data_55_setupDone=!1,this.data_56_buffer=0,this.data_56_setupDone=!1,this.data_57_buffer=0,this.data_57_setupDone=!1,this.data_58_buffer=0,this.data_58_setupDone=!1,this.data_59_buffer=0,this.data_59_setupDone=!1,this.data_60_buffer=0,this.data_60_setupDone=!1,this.data_61_buffer=0,this.data_61_setupDone=!1,this.data_62_buffer=0,this.data_62_setupDone=!1,this.data_63_buffer=0,this.data_63_setupDone=!1,this.data_64_buffer=0,this.data_64_setupDone=!1,this.data_65_buffer=0,this.data_65_setupDone=!1,this.data_66_buffer=0,this.data_66_setupDone=!1,this.data_67_buffer=0,this.data_67_setupDone=!1,this.data_68_buffer=0,this.data_68_setupDone=!1,this.peek_tilde_02_bufferobj=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(t){return RNBO_UNUSED(t),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(t,e,a,r){}getNumMidiOutputPorts(){return 0}msToSamps(t,e){return t*e*.001}sampsToMs(t){return t*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 1}getNumOutputChannels(){return 1}setProbingTarget(t){this.setProbingIndex(-1)}setProbingIndex(t){}getProbingChannels(t){return RNBO_UNUSED(t),0}getIsMuted(){return this.isMuted}setIsMuted(t){this.isMuted=t}getPatcherSerial(){return 0}setState(){}processTempoEvent(t,e){}processTransportEvent(t,e){}processBeatTimeEvent(t,e){}onSampleRateChanged(t){}processTimeSignatureEvent(t,e,a){}setParameterValue(t,e,a){}processParameterEvent(t,e,a){this.setParameterValue(t,e,a)}processNormalizedParameterEvent(t,e,a){this.setParameterValueNormalized(t,e,a)}getParameterValue(t){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(t){return\"bogus\"}getParameterId(t){return\"bogus\"}getParameterInfo(t,e){}sendParameter(t){this.getPatcher().sendParameter(t+this.parameterOffset)}setParameterOffset(t){this.parameterOffset=t}applyStepsToNormalizedParameterValue(t,e){if(1==e)t>0&&(t=1);else{let a=1/(e-1);t=1*rnbo_fround(t/a*1/1)*a}return t}convertToNormalizedParameterValue(t,e){return e}convertFromNormalizedParameterValue(t,e){return e=e<0?0:e>1?1:e}constrainParameterValue(t,e){return e}scheduleParamInit(t,e){this.getPatcher().scheduleParamInit(t+this.parameterOffset,e)}processClockEvent(t,e,a,r){switch(RNBO_UNUSED(r),RNBO_UNUSED(a),this.updateTime(t),e){case-611950441:this.edge_02_onout_bang();break;case-1584063977:this.edge_02_offout_bang()}}processOutletAtCurrentTime(t,e,a){}processOutletEvent(t,e,a,r){this.updateTime(r),this.processOutletAtCurrentTime(t,e,a)}sendOutlet(t,e){this.getEngine().sendOutlet(this,t,e)}processNumMessage(t,e,a,r){switch(RNBO_UNUSED(e),this.updateTime(a),t){case TAG(\"state\"):this.inport_02_value_number_set(r)}}processListMessage(t,e,a,r){switch(RNBO_UNUSED(e),this.updateTime(a),t){case TAG(\"state\"):this.inport_02_value_list_set(r)}}processBangMessage(t,e,a){switch(RNBO_UNUSED(e),this.updateTime(a),t){case TAG(\"state\"):this.inport_02_value_bang_bang()}}resolveTag(t){switch(t){case TAG(\"state\"):return\"state\";case TAG(\"\"):return\"\"}return null}getDataRef(t){return null}getNumDataRefs(){return 0}fillDataRef(t,e){}zeroDataRef(t){t.setZero()}processDataViewUpdate(t,e){this.updateTime(e),-1!=t&&6!=t&&5!=t&&4!=t&&14!=t&&13!=t&&12!=t&&11!=t&&22!=t&&21!=t&&20!=t&&19!=t&&29!=t&&28!=t&&27!=t&&26!=t&&33!=t&&32!=t&&31!=t&&30!=t&&3!=t&&2!=t&&1!=t&&0!=t&&10!=t&&9!=t&&8!=t&&7!=t&&18!=t&&17!=t&&16!=t&&15!=t&&25!=t&&24!=t&&23!=t||(this.peek_tilde_02_buffer=new Float32MultiBuffer(this.peek_tilde_02_bufferobj)),0==t&&(this.data_35_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_23),this.data_35_bufferUpdated()),1==t&&(this.data_36_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_22),this.data_36_bufferUpdated()),2==t&&(this.data_37_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_21),this.data_37_bufferUpdated()),3==t&&(this.data_38_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_20),this.data_38_bufferUpdated()),4==t&&(this.data_39_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_3),this.data_39_bufferUpdated()),5==t&&(this.data_40_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_2),this.data_40_bufferUpdated()),6==t&&(this.data_41_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_1),this.data_41_bufferUpdated()),7==t&&(this.data_42_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_27),this.data_42_bufferUpdated()),8==t&&(this.data_43_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_26),this.data_43_bufferUpdated()),9==t&&(this.data_44_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_25),this.data_44_bufferUpdated()),10==t&&(this.data_45_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_24),this.data_45_bufferUpdated()),11==t&&(this.data_46_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_7),this.data_46_bufferUpdated()),12==t&&(this.data_47_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_6),this.data_47_bufferUpdated()),13==t&&(this.data_48_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_5),this.data_48_bufferUpdated()),14==t&&(this.data_49_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_4),this.data_49_bufferUpdated()),15==t&&(this.data_50_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_31),this.data_50_bufferUpdated()),16==t&&(this.data_51_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_30),this.data_51_bufferUpdated()),17==t&&(this.data_52_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_29),this.data_52_bufferUpdated()),18==t&&(this.data_53_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_28),this.data_53_bufferUpdated()),19==t&&(this.data_54_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_11),this.data_54_bufferUpdated()),20==t&&(this.data_55_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_10),this.data_55_bufferUpdated()),21==t&&(this.data_56_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_9),this.data_56_bufferUpdated()),22==t&&(this.data_57_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_8),this.data_57_bufferUpdated()),23==t&&(this.data_58_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_34),this.data_58_bufferUpdated()),24==t&&(this.data_59_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_33),this.data_59_bufferUpdated()),25==t&&(this.data_60_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_32),this.data_60_bufferUpdated()),26==t&&(this.data_61_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_15),this.data_61_bufferUpdated()),27==t&&(this.data_62_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_14),this.data_62_bufferUpdated()),28==t&&(this.data_63_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_13),this.data_63_bufferUpdated()),29==t&&(this.data_64_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_12),this.data_64_bufferUpdated()),30==t&&(this.data_65_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_19),this.data_65_bufferUpdated()),31==t&&(this.data_66_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_18),this.data_66_bufferUpdated()),32==t&&(this.data_67_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_17),this.data_67_bufferUpdated()),33==t&&(this.data_68_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_16),this.data_68_bufferUpdated())}initialize(){this.peek_tilde_02_bufferobj=initMultiRef(this.getPatcher().getPatcher().b_dot_1,this.getPatcher().getPatcher().b_dot_2,this.getPatcher().getPatcher().b_dot_3,this.getPatcher().getPatcher().b_dot_4,this.getPatcher().getPatcher().b_dot_5,this.getPatcher().getPatcher().b_dot_6,this.getPatcher().getPatcher().b_dot_7,this.getPatcher().getPatcher().b_dot_8,this.getPatcher().getPatcher().b_dot_9,this.getPatcher().getPatcher().b_dot_10,this.getPatcher().getPatcher().b_dot_11,this.getPatcher().getPatcher().b_dot_12,this.getPatcher().getPatcher().b_dot_13,this.getPatcher().getPatcher().b_dot_14,this.getPatcher().getPatcher().b_dot_15,this.getPatcher().getPatcher().b_dot_16,this.getPatcher().getPatcher().b_dot_17,this.getPatcher().getPatcher().b_dot_18,this.getPatcher().getPatcher().b_dot_19,this.getPatcher().getPatcher().b_dot_20,this.getPatcher().getPatcher().b_dot_21,this.getPatcher().getPatcher().b_dot_22,this.getPatcher().getPatcher().b_dot_23,this.getPatcher().getPatcher().b_dot_24,this.getPatcher().getPatcher().b_dot_25,this.getPatcher().getPatcher().b_dot_26,this.getPatcher().getPatcher().b_dot_27,this.getPatcher().getPatcher().b_dot_28,this.getPatcher().getPatcher().b_dot_29,this.getPatcher().getPatcher().b_dot_30,this.getPatcher().getPatcher().b_dot_31,this.getPatcher().getPatcher().b_dot_32,this.getPatcher().getPatcher().b_dot_33,this.getPatcher().getPatcher().b_dot_34),this.assign_defaults(),this.setState(),this.peek_tilde_02_bufferobj.setIndex(-1),this.peek_tilde_02_buffer=new Float32MultiBuffer(this.peek_tilde_02_bufferobj),this.data_35_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_23),this.data_36_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_22),this.data_37_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_21),this.data_38_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_20),this.data_39_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_3),this.data_40_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_2),this.data_41_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_1),this.data_42_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_27),this.data_43_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_26),this.data_44_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_25),this.data_45_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_24),this.data_46_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_7),this.data_47_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_6),this.data_48_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_5),this.data_49_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_4),this.data_50_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_31),this.data_51_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_30),this.data_52_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_29),this.data_53_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_28),this.data_54_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_11),this.data_55_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_10),this.data_56_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_9),this.data_57_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_8),this.data_58_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_34),this.data_59_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_33),this.data_60_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_32),this.data_61_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_15),this.data_62_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_14),this.data_63_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_13),this.data_64_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_12),this.data_65_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_19),this.data_66_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_18),this.data_67_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_17),this.data_68_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_16)}assign_defaults(){}setEngineAndPatcher(t,e){this._engineInterface=t,this._parentPatcher=e}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_59{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(4),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.edge_03_setupDone=!1,this.gen_03_setupDone=!1,this.peek_tilde_03_buffer=0,this.ip_05_sigbuf=0,this.ip_05_setupDone=!1,this.latch_tilde_05_setupDone=!1,this.latch_tilde_06_setupDone=!1,this.ip_06_sigbuf=0,this.ip_06_setupDone=!1,this.data_69_buffer=0,this.data_69_setupDone=!1,this.data_70_buffer=0,this.data_70_setupDone=!1,this.data_71_buffer=0,this.data_71_setupDone=!1,this.data_72_buffer=0,this.data_72_setupDone=!1,this.data_73_buffer=0,this.data_73_setupDone=!1,this.data_74_buffer=0,this.data_74_setupDone=!1,this.data_75_buffer=0,this.data_75_setupDone=!1,this.data_76_buffer=0,this.data_76_setupDone=!1,this.data_77_buffer=0,this.data_77_setupDone=!1,this.data_78_buffer=0,this.data_78_setupDone=!1,this.data_79_buffer=0,this.data_79_setupDone=!1,this.data_80_buffer=0,this.data_80_setupDone=!1,this.data_81_buffer=0,this.data_81_setupDone=!1,this.data_82_buffer=0,this.data_82_setupDone=!1,this.data_83_buffer=0,this.data_83_setupDone=!1,this.data_84_buffer=0,this.data_84_setupDone=!1,this.data_85_buffer=0,this.data_85_setupDone=!1,this.data_86_buffer=0,this.data_86_setupDone=!1,this.data_87_buffer=0,this.data_87_setupDone=!1,this.data_88_buffer=0,this.data_88_setupDone=!1,this.data_89_buffer=0,this.data_89_setupDone=!1,this.data_90_buffer=0,this.data_90_setupDone=!1,this.data_91_buffer=0,this.data_91_setupDone=!1,this.data_92_buffer=0,this.data_92_setupDone=!1,this.data_93_buffer=0,this.data_93_setupDone=!1,this.data_94_buffer=0,this.data_94_setupDone=!1,this.data_95_buffer=0,this.data_95_setupDone=!1,this.data_96_buffer=0,this.data_96_setupDone=!1,this.data_97_buffer=0,this.data_97_setupDone=!1,this.data_98_buffer=0,this.data_98_setupDone=!1,this.data_99_buffer=0,this.data_99_setupDone=!1,this.data_100_buffer=0,this.data_100_setupDone=!1,this.data_101_buffer=0,this.data_101_setupDone=!1,this.data_102_buffer=0,this.data_102_setupDone=!1,this.peek_tilde_03_bufferobj=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(t){return RNBO_UNUSED(t),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(t,e,a,r){}getNumMidiOutputPorts(){return 0}msToSamps(t,e){return t*e*.001}sampsToMs(t){return t*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 1}getNumOutputChannels(){return 1}setProbingTarget(t){this.setProbingIndex(-1)}setProbingIndex(t){}getProbingChannels(t){return RNBO_UNUSED(t),0}getIsMuted(){return this.isMuted}setIsMuted(t){this.isMuted=t}getPatcherSerial(){return 0}setState(){}processTempoEvent(t,e){}processTransportEvent(t,e){}processBeatTimeEvent(t,e){}onSampleRateChanged(t){}processTimeSignatureEvent(t,e,a){}setParameterValue(t,e,a){}processParameterEvent(t,e,a){this.setParameterValue(t,e,a)}processNormalizedParameterEvent(t,e,a){this.setParameterValueNormalized(t,e,a)}getParameterValue(t){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(t){return\"bogus\"}getParameterId(t){return\"bogus\"}getParameterInfo(t,e){}sendParameter(t){this.getPatcher().sendParameter(t+this.parameterOffset)}setParameterOffset(t){this.parameterOffset=t}applyStepsToNormalizedParameterValue(t,e){if(1==e)t>0&&(t=1);else{let a=1/(e-1);t=1*rnbo_fround(t/a*1/1)*a}return t}convertToNormalizedParameterValue(t,e){return e}convertFromNormalizedParameterValue(t,e){return e=e<0?0:e>1?1:e}constrainParameterValue(t,e){return e}scheduleParamInit(t,e){this.getPatcher().scheduleParamInit(t+this.parameterOffset,e)}processClockEvent(t,e,a,r){switch(RNBO_UNUSED(r),RNBO_UNUSED(a),this.updateTime(t),e){case-611950441:this.edge_03_onout_bang();break;case-1584063977:this.edge_03_offout_bang()}}processOutletAtCurrentTime(t,e,a){}processOutletEvent(t,e,a,r){this.updateTime(r),this.processOutletAtCurrentTime(t,e,a)}sendOutlet(t,e){this.getEngine().sendOutlet(this,t,e)}processNumMessage(t,e,a,r){switch(RNBO_UNUSED(e),this.updateTime(a),t){case TAG(\"state\"):this.inport_03_value_number_set(r)}}processListMessage(t,e,a,r){switch(RNBO_UNUSED(e),this.updateTime(a),t){case TAG(\"state\"):this.inport_03_value_list_set(r)}}processBangMessage(t,e,a){switch(RNBO_UNUSED(e),this.updateTime(a),t){case TAG(\"state\"):this.inport_03_value_bang_bang()}}resolveTag(t){switch(t){case TAG(\"state\"):return\"state\";case TAG(\"\"):return\"\"}return null}getDataRef(t){return null}getNumDataRefs(){return 0}fillDataRef(t,e){}zeroDataRef(t){t.setZero()}processDataViewUpdate(t,e){this.updateTime(e),-1!=t&&6!=t&&5!=t&&4!=t&&14!=t&&13!=t&&12!=t&&11!=t&&22!=t&&21!=t&&20!=t&&19!=t&&29!=t&&28!=t&&27!=t&&26!=t&&33!=t&&32!=t&&31!=t&&30!=t&&3!=t&&2!=t&&1!=t&&0!=t&&10!=t&&9!=t&&8!=t&&7!=t&&18!=t&&17!=t&&16!=t&&15!=t&&25!=t&&24!=t&&23!=t||(this.peek_tilde_03_buffer=new Float32MultiBuffer(this.peek_tilde_03_bufferobj)),0==t&&(this.data_69_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_23),this.data_69_bufferUpdated()),1==t&&(this.data_70_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_22),this.data_70_bufferUpdated()),2==t&&(this.data_71_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_21),this.data_71_bufferUpdated()),3==t&&(this.data_72_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_20),this.data_72_bufferUpdated()),4==t&&(this.data_73_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_3),this.data_73_bufferUpdated()),5==t&&(this.data_74_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_2),this.data_74_bufferUpdated()),6==t&&(this.data_75_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_1),this.data_75_bufferUpdated()),7==t&&(this.data_76_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_27),this.data_76_bufferUpdated()),8==t&&(this.data_77_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_26),this.data_77_bufferUpdated()),9==t&&(this.data_78_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_25),this.data_78_bufferUpdated()),10==t&&(this.data_79_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_24),this.data_79_bufferUpdated()),11==t&&(this.data_80_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_7),this.data_80_bufferUpdated()),12==t&&(this.data_81_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_6),this.data_81_bufferUpdated()),13==t&&(this.data_82_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_5),this.data_82_bufferUpdated()),14==t&&(this.data_83_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_4),this.data_83_bufferUpdated()),15==t&&(this.data_84_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_31),this.data_84_bufferUpdated()),16==t&&(this.data_85_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_30),this.data_85_bufferUpdated()),17==t&&(this.data_86_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_29),this.data_86_bufferUpdated()),18==t&&(this.data_87_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_28),this.data_87_bufferUpdated()),19==t&&(this.data_88_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_11),this.data_88_bufferUpdated()),20==t&&(this.data_89_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_10),this.data_89_bufferUpdated()),21==t&&(this.data_90_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_9),this.data_90_bufferUpdated()),22==t&&(this.data_91_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_8),this.data_91_bufferUpdated()),23==t&&(this.data_92_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_34),this.data_92_bufferUpdated()),24==t&&(this.data_93_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_33),this.data_93_bufferUpdated()),25==t&&(this.data_94_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_32),this.data_94_bufferUpdated()),26==t&&(this.data_95_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_15),this.data_95_bufferUpdated()),27==t&&(this.data_96_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_14),this.data_96_bufferUpdated()),28==t&&(this.data_97_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_13),this.data_97_bufferUpdated()),29==t&&(this.data_98_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_12),this.data_98_bufferUpdated()),30==t&&(this.data_99_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_19),this.data_99_bufferUpdated()),31==t&&(this.data_100_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_18),this.data_100_bufferUpdated()),32==t&&(this.data_101_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_17),this.data_101_bufferUpdated()),33==t&&(this.data_102_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_16),this.data_102_bufferUpdated())}initialize(){this.peek_tilde_03_bufferobj=initMultiRef(this.getPatcher().getPatcher().b_dot_1,this.getPatcher().getPatcher().b_dot_2,this.getPatcher().getPatcher().b_dot_3,this.getPatcher().getPatcher().b_dot_4,this.getPatcher().getPatcher().b_dot_5,this.getPatcher().getPatcher().b_dot_6,this.getPatcher().getPatcher().b_dot_7,this.getPatcher().getPatcher().b_dot_8,this.getPatcher().getPatcher().b_dot_9,this.getPatcher().getPatcher().b_dot_10,this.getPatcher().getPatcher().b_dot_11,this.getPatcher().getPatcher().b_dot_12,this.getPatcher().getPatcher().b_dot_13,this.getPatcher().getPatcher().b_dot_14,this.getPatcher().getPatcher().b_dot_15,this.getPatcher().getPatcher().b_dot_16,this.getPatcher().getPatcher().b_dot_17,this.getPatcher().getPatcher().b_dot_18,this.getPatcher().getPatcher().b_dot_19,this.getPatcher().getPatcher().b_dot_20,this.getPatcher().getPatcher().b_dot_21,this.getPatcher().getPatcher().b_dot_22,this.getPatcher().getPatcher().b_dot_23,this.getPatcher().getPatcher().b_dot_24,this.getPatcher().getPatcher().b_dot_25,this.getPatcher().getPatcher().b_dot_26,this.getPatcher().getPatcher().b_dot_27,this.getPatcher().getPatcher().b_dot_28,this.getPatcher().getPatcher().b_dot_29,this.getPatcher().getPatcher().b_dot_30,this.getPatcher().getPatcher().b_dot_31,this.getPatcher().getPatcher().b_dot_32,this.getPatcher().getPatcher().b_dot_33,this.getPatcher().getPatcher().b_dot_34),this.assign_defaults(),this.setState(),this.peek_tilde_03_bufferobj.setIndex(-1),this.peek_tilde_03_buffer=new Float32MultiBuffer(this.peek_tilde_03_bufferobj),this.data_69_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_23),this.data_70_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_22),this.data_71_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_21),this.data_72_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_20),this.data_73_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_3),this.data_74_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_2),this.data_75_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_1),this.data_76_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_27),this.data_77_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_26),this.data_78_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_25),this.data_79_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_24),this.data_80_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_7),this.data_81_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_6),this.data_82_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_5),this.data_83_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_4),this.data_84_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_31),this.data_85_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_30),this.data_86_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_29),this.data_87_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_28),this.data_88_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_11),this.data_89_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_10),this.data_90_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_9),this.data_91_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_8),this.data_92_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_34),this.data_93_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_33),this.data_94_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_32),this.data_95_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_15),this.data_96_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_14),this.data_97_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_13),this.data_98_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_12),this.data_99_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_19),this.data_100_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_18),this.data_101_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_17),this.data_102_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_16)}assign_defaults(){}setEngineAndPatcher(t,e){this._engineInterface=t,this._parentPatcher=e}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_60{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(4),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.edge_04_setupDone=!1,this.gen_04_setupDone=!1,this.peek_tilde_04_buffer=0,this.ip_07_sigbuf=0,this.ip_07_setupDone=!1,this.latch_tilde_07_setupDone=!1,this.latch_tilde_08_setupDone=!1,this.ip_08_sigbuf=0,this.ip_08_setupDone=!1,this.data_103_buffer=0,this.data_103_setupDone=!1,this.data_104_buffer=0,this.data_104_setupDone=!1,this.data_105_buffer=0,this.data_105_setupDone=!1,this.data_106_buffer=0,this.data_106_setupDone=!1,this.data_107_buffer=0,this.data_107_setupDone=!1,this.data_108_buffer=0,this.data_108_setupDone=!1,this.data_109_buffer=0,this.data_109_setupDone=!1,this.data_110_buffer=0,this.data_110_setupDone=!1,this.data_111_buffer=0,this.data_111_setupDone=!1,this.data_112_buffer=0,this.data_112_setupDone=!1,this.data_113_buffer=0,this.data_113_setupDone=!1,this.data_114_buffer=0,this.data_114_setupDone=!1,this.data_115_buffer=0,this.data_115_setupDone=!1,this.data_116_buffer=0,this.data_116_setupDone=!1,this.data_117_buffer=0,this.data_117_setupDone=!1,this.data_118_buffer=0,this.data_118_setupDone=!1,this.data_119_buffer=0,this.data_119_setupDone=!1,this.data_120_buffer=0,this.data_120_setupDone=!1,this.data_121_buffer=0,this.data_121_setupDone=!1,this.data_122_buffer=0,this.data_122_setupDone=!1,this.data_123_buffer=0,this.data_123_setupDone=!1,this.data_124_buffer=0,this.data_124_setupDone=!1,this.data_125_buffer=0,this.data_125_setupDone=!1,this.data_126_buffer=0,this.data_126_setupDone=!1,this.data_127_buffer=0,this.data_127_setupDone=!1,this.data_128_buffer=0,this.data_128_setupDone=!1,this.data_129_buffer=0,this.data_129_setupDone=!1,this.data_130_buffer=0,this.data_130_setupDone=!1,this.data_131_buffer=0,this.data_131_setupDone=!1,this.data_132_buffer=0,this.data_132_setupDone=!1,this.data_133_buffer=0,this.data_133_setupDone=!1,this.data_134_buffer=0,this.data_134_setupDone=!1,this.data_135_buffer=0,this.data_135_setupDone=!1,this.data_136_buffer=0,this.data_136_setupDone=!1,this.peek_tilde_04_bufferobj=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(t){return RNBO_UNUSED(t),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(t,e,a,r){}getNumMidiOutputPorts(){return 0}msToSamps(t,e){return t*e*.001}sampsToMs(t){return t*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 1}getNumOutputChannels(){return 1}setProbingTarget(t){this.setProbingIndex(-1)}setProbingIndex(t){}getProbingChannels(t){return RNBO_UNUSED(t),0}getIsMuted(){return this.isMuted}setIsMuted(t){this.isMuted=t}getPatcherSerial(){return 0}setState(){}processTempoEvent(t,e){}processTransportEvent(t,e){}processBeatTimeEvent(t,e){}onSampleRateChanged(t){}processTimeSignatureEvent(t,e,a){}setParameterValue(t,e,a){}processParameterEvent(t,e,a){this.setParameterValue(t,e,a)}processNormalizedParameterEvent(t,e,a){this.setParameterValueNormalized(t,e,a)}getParameterValue(t){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(t){return\"bogus\"}getParameterId(t){return\"bogus\"}getParameterInfo(t,e){}sendParameter(t){this.getPatcher().sendParameter(t+this.parameterOffset)}setParameterOffset(t){this.parameterOffset=t}applyStepsToNormalizedParameterValue(t,e){if(1==e)t>0&&(t=1);else{let a=1/(e-1);t=1*rnbo_fround(t/a*1/1)*a}return t}convertToNormalizedParameterValue(t,e){return e}convertFromNormalizedParameterValue(t,e){return e=e<0?0:e>1?1:e}constrainParameterValue(t,e){return e}scheduleParamInit(t,e){this.getPatcher().scheduleParamInit(t+this.parameterOffset,e)}processClockEvent(t,e,a,r){switch(RNBO_UNUSED(r),RNBO_UNUSED(a),this.updateTime(t),e){case-611950441:this.edge_04_onout_bang();break;case-1584063977:this.edge_04_offout_bang()}}processOutletAtCurrentTime(t,e,a){}processOutletEvent(t,e,a,r){this.updateTime(r),this.processOutletAtCurrentTime(t,e,a)}sendOutlet(t,e){this.getEngine().sendOutlet(this,t,e)}processNumMessage(t,e,a,r){switch(RNBO_UNUSED(e),this.updateTime(a),t){case TAG(\"state\"):this.inport_04_value_number_set(r)}}processListMessage(t,e,a,r){switch(RNBO_UNUSED(e),this.updateTime(a),t){case TAG(\"state\"):this.inport_04_value_list_set(r)}}processBangMessage(t,e,a){switch(RNBO_UNUSED(e),this.updateTime(a),t){case TAG(\"state\"):this.inport_04_value_bang_bang()}}resolveTag(t){switch(t){case TAG(\"state\"):return\"state\";case TAG(\"\"):return\"\"}return null}getDataRef(t){return null}getNumDataRefs(){return 0}fillDataRef(t,e){}zeroDataRef(t){t.setZero()}processDataViewUpdate(t,e){this.updateTime(e),-1!=t&&6!=t&&5!=t&&4!=t&&14!=t&&13!=t&&12!=t&&11!=t&&22!=t&&21!=t&&20!=t&&19!=t&&29!=t&&28!=t&&27!=t&&26!=t&&33!=t&&32!=t&&31!=t&&30!=t&&3!=t&&2!=t&&1!=t&&0!=t&&10!=t&&9!=t&&8!=t&&7!=t&&18!=t&&17!=t&&16!=t&&15!=t&&25!=t&&24!=t&&23!=t||(this.peek_tilde_04_buffer=new Float32MultiBuffer(this.peek_tilde_04_bufferobj)),0==t&&(this.data_103_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_23),this.data_103_bufferUpdated()),1==t&&(this.data_104_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_22),this.data_104_bufferUpdated()),2==t&&(this.data_105_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_21),this.data_105_bufferUpdated()),3==t&&(this.data_106_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_20),this.data_106_bufferUpdated()),4==t&&(this.data_107_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_3),this.data_107_bufferUpdated()),5==t&&(this.data_108_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_2),this.data_108_bufferUpdated()),6==t&&(this.data_109_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_1),this.data_109_bufferUpdated()),7==t&&(this.data_110_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_27),this.data_110_bufferUpdated()),8==t&&(this.data_111_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_26),this.data_111_bufferUpdated()),9==t&&(this.data_112_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_25),this.data_112_bufferUpdated()),10==t&&(this.data_113_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_24),this.data_113_bufferUpdated()),11==t&&(this.data_114_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_7),this.data_114_bufferUpdated()),12==t&&(this.data_115_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_6),this.data_115_bufferUpdated()),13==t&&(this.data_116_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_5),this.data_116_bufferUpdated()),14==t&&(this.data_117_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_4),this.data_117_bufferUpdated()),15==t&&(this.data_118_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_31),this.data_118_bufferUpdated()),16==t&&(this.data_119_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_30),this.data_119_bufferUpdated()),17==t&&(this.data_120_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_29),this.data_120_bufferUpdated()),18==t&&(this.data_121_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_28),this.data_121_bufferUpdated()),19==t&&(this.data_122_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_11),this.data_122_bufferUpdated()),20==t&&(this.data_123_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_10),this.data_123_bufferUpdated()),21==t&&(this.data_124_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_9),this.data_124_bufferUpdated()),22==t&&(this.data_125_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_8),this.data_125_bufferUpdated()),23==t&&(this.data_126_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_34),this.data_126_bufferUpdated()),24==t&&(this.data_127_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_33),this.data_127_bufferUpdated()),25==t&&(this.data_128_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_32),this.data_128_bufferUpdated()),26==t&&(this.data_129_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_15),this.data_129_bufferUpdated()),27==t&&(this.data_130_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_14),this.data_130_bufferUpdated()),28==t&&(this.data_131_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_13),this.data_131_bufferUpdated()),29==t&&(this.data_132_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_12),this.data_132_bufferUpdated()),30==t&&(this.data_133_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_19),this.data_133_bufferUpdated()),31==t&&(this.data_134_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_18),this.data_134_bufferUpdated()),32==t&&(this.data_135_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_17),this.data_135_bufferUpdated()),33==t&&(this.data_136_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_16),this.data_136_bufferUpdated())}initialize(){this.peek_tilde_04_bufferobj=initMultiRef(this.getPatcher().getPatcher().b_dot_1,this.getPatcher().getPatcher().b_dot_2,this.getPatcher().getPatcher().b_dot_3,this.getPatcher().getPatcher().b_dot_4,this.getPatcher().getPatcher().b_dot_5,this.getPatcher().getPatcher().b_dot_6,this.getPatcher().getPatcher().b_dot_7,this.getPatcher().getPatcher().b_dot_8,this.getPatcher().getPatcher().b_dot_9,this.getPatcher().getPatcher().b_dot_10,this.getPatcher().getPatcher().b_dot_11,this.getPatcher().getPatcher().b_dot_12,this.getPatcher().getPatcher().b_dot_13,this.getPatcher().getPatcher().b_dot_14,this.getPatcher().getPatcher().b_dot_15,this.getPatcher().getPatcher().b_dot_16,this.getPatcher().getPatcher().b_dot_17,this.getPatcher().getPatcher().b_dot_18,this.getPatcher().getPatcher().b_dot_19,this.getPatcher().getPatcher().b_dot_20,this.getPatcher().getPatcher().b_dot_21,this.getPatcher().getPatcher().b_dot_22,this.getPatcher().getPatcher().b_dot_23,this.getPatcher().getPatcher().b_dot_24,this.getPatcher().getPatcher().b_dot_25,this.getPatcher().getPatcher().b_dot_26,this.getPatcher().getPatcher().b_dot_27,this.getPatcher().getPatcher().b_dot_28,this.getPatcher().getPatcher().b_dot_29,this.getPatcher().getPatcher().b_dot_30,this.getPatcher().getPatcher().b_dot_31,this.getPatcher().getPatcher().b_dot_32,this.getPatcher().getPatcher().b_dot_33,this.getPatcher().getPatcher().b_dot_34),this.assign_defaults(),this.setState(),this.peek_tilde_04_bufferobj.setIndex(-1),this.peek_tilde_04_buffer=new Float32MultiBuffer(this.peek_tilde_04_bufferobj),this.data_103_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_23),this.data_104_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_22),this.data_105_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_21),this.data_106_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_20),this.data_107_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_3),this.data_108_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_2),this.data_109_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_1),this.data_110_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_27),this.data_111_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_26),this.data_112_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_25),this.data_113_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_24),this.data_114_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_7),this.data_115_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_6),this.data_116_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_5),this.data_117_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_4),this.data_118_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_31),this.data_119_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_30),this.data_120_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_29),this.data_121_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_28),this.data_122_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_11),this.data_123_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_10),this.data_124_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_9),this.data_125_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_8),this.data_126_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_34),this.data_127_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_33),this.data_128_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_32),this.data_129_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_15),this.data_130_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_14),this.data_131_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_13),this.data_132_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_12),this.data_133_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_19),this.data_134_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_18),this.data_135_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_17),this.data_136_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_16)}assign_defaults(){}setEngineAndPatcher(t,e){this._engineInterface=t,this._parentPatcher=e}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_78{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(4),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0,this.p_01=new Array,this.p_02=new Array,this.p_03=new Array,this.p_04=new Array}getParameterIndexForID(t){return RNBO_UNUSED(t),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(t,e,a,r){}getNumMidiOutputPorts(){return 0}msToSamps(t,e){return t*e*.001}sampsToMs(t){return t*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 4}getNumOutputChannels(){return 1}setProbingTarget(t){this.setProbingIndex(-1)}setProbingIndex(t){}getProbingChannels(t){return RNBO_UNUSED(t),0}getIsMuted(){return this.isMuted}setIsMuted(t){this.isMuted=t}getPatcherSerial(){return 0}setState(){this.p_01=new RNBOSubpatcher_57,this.p_01.setEngineAndPatcher(this.getEngine(),this),this.p_01.initialize(),this.p_01.setParameterOffset(this.getParameterOffset(this.p_01)),this.p_02=new RNBOSubpatcher_58,this.p_02.setEngineAndPatcher(this.getEngine(),this),this.p_02.initialize(),this.p_02.setParameterOffset(this.getParameterOffset(this.p_02)),this.p_03=new RNBOSubpatcher_59,this.p_03.setEngineAndPatcher(this.getEngine(),this),this.p_03.initialize(),this.p_03.setParameterOffset(this.getParameterOffset(this.p_03)),this.p_04=new RNBOSubpatcher_60,this.p_04.setEngineAndPatcher(this.getEngine(),this),this.p_04.initialize(),this.p_04.setParameterOffset(this.getParameterOffset(this.p_04))}processTempoEvent(t,e){this.updateTime(t),this.p_01.processTempoEvent(t,e),this.p_02.processTempoEvent(t,e),this.p_03.processTempoEvent(t,e),this.p_04.processTempoEvent(t,e)}processTransportEvent(t,e){this.updateTime(t),this.p_01.processTransportEvent(t,e),this.p_02.processTransportEvent(t,e),this.p_03.processTransportEvent(t,e),this.p_04.processTransportEvent(t,e)}processBeatTimeEvent(t,e){this.updateTime(t),this.p_01.processBeatTimeEvent(t,e),this.p_02.processBeatTimeEvent(t,e),this.p_03.processBeatTimeEvent(t,e),this.p_04.processBeatTimeEvent(t,e)}onSampleRateChanged(t){}processTimeSignatureEvent(t,e,a){this.updateTime(t),this.p_01.processTimeSignatureEvent(t,e,a),this.p_02.processTimeSignatureEvent(t,e,a),this.p_03.processTimeSignatureEvent(t,e,a),this.p_04.processTimeSignatureEvent(t,e,a)}setParameterValue(t,e,a){RNBO_UNUSED(e),this.updateTime(a),(t-=0)<this.p_01.getNumParameters()&&this.p_01.setParameterValue(t,e,a),(t-=this.p_01.getNumParameters())<this.p_02.getNumParameters()&&this.p_02.setParameterValue(t,e,a),(t-=this.p_02.getNumParameters())<this.p_03.getNumParameters()&&this.p_03.setParameterValue(t,e,a),(t-=this.p_03.getNumParameters())<this.p_04.getNumParameters()&&this.p_04.setParameterValue(t,e,a)}processParameterEvent(t,e,a){this.setParameterValue(t,e,a)}processNormalizedParameterEvent(t,e,a){this.setParameterValueNormalized(t,e,a)}getParameterValue(t){return(t-=0)<this.p_01.getNumParameters()?this.p_01.getParameterValue(t):(t-=this.p_01.getNumParameters())<this.p_02.getNumParameters()?this.p_02.getParameterValue(t):(t-=this.p_02.getNumParameters())<this.p_03.getNumParameters()?this.p_03.getParameterValue(t):(t-=this.p_03.getNumParameters())<this.p_04.getNumParameters()?this.p_04.getParameterValue(t):0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0+this.p_01.getNumParameters()+this.p_02.getNumParameters()+this.p_03.getNumParameters()+this.p_04.getNumParameters()}getParameterName(t){return(t-=0)<this.p_01.getNumParameters()?this.p_01.getParameterName(t):(t-=this.p_01.getNumParameters())<this.p_02.getNumParameters()?this.p_02.getParameterName(t):(t-=this.p_02.getNumParameters())<this.p_03.getNumParameters()?this.p_03.getParameterName(t):(t-=this.p_03.getNumParameters())<this.p_04.getNumParameters()?this.p_04.getParameterName(t):\"bogus\"}getParameterId(t){return(t-=0)<this.p_01.getNumParameters()?this.p_01.getParameterId(t):(t-=this.p_01.getNumParameters())<this.p_02.getNumParameters()?this.p_02.getParameterId(t):(t-=this.p_02.getNumParameters())<this.p_03.getNumParameters()?this.p_03.getParameterId(t):(t-=this.p_03.getNumParameters())<this.p_04.getNumParameters()?this.p_04.getParameterId(t):\"bogus\"}getParameterInfo(t,e){(t-=0)<this.p_01.getNumParameters()&&this.p_01.getParameterInfo(t,e),(t-=this.p_01.getNumParameters())<this.p_02.getNumParameters()&&this.p_02.getParameterInfo(t,e),(t-=this.p_02.getNumParameters())<this.p_03.getNumParameters()&&this.p_03.getParameterInfo(t,e),(t-=this.p_03.getNumParameters())<this.p_04.getNumParameters()&&this.p_04.getParameterInfo(t,e)}sendParameter(t){this.getPatcher().sendParameter(t+this.parameterOffset)}getParameterOffset(t){return t==this.p_01?0:t==this.p_02?0+this.p_01.getNumParameters():t==this.p_03?0+this.p_01.getNumParameters()+this.p_02.getNumParameters():t==this.p_04?0+this.p_01.getNumParameters()+this.p_02.getNumParameters()+this.p_03.getNumParameters():0}setParameterOffset(t){this.parameterOffset=t}applyStepsToNormalizedParameterValue(t,e){if(1==e)t>0&&(t=1);else{let a=1/(e-1);t=1*rnbo_fround(t/a*1/1)*a}return t}convertToNormalizedParameterValue(t,e){return(t-=0)<this.p_01.getNumParameters()?this.p_01.convertToNormalizedParameterValue(t,e):(t-=this.p_01.getNumParameters())<this.p_02.getNumParameters()?this.p_02.convertToNormalizedParameterValue(t,e):(t-=this.p_02.getNumParameters())<this.p_03.getNumParameters()?this.p_03.convertToNormalizedParameterValue(t,e):(t-=this.p_03.getNumParameters())<this.p_04.getNumParameters()?this.p_04.convertToNormalizedParameterValue(t,e):e}convertFromNormalizedParameterValue(t,e){return e=e<0?0:e>1?1:e,(t-=0)<this.p_01.getNumParameters()?this.p_01.convertFromNormalizedParameterValue(t,e):(t-=this.p_01.getNumParameters())<this.p_02.getNumParameters()?this.p_02.convertFromNormalizedParameterValue(t,e):(t-=this.p_02.getNumParameters())<this.p_03.getNumParameters()?this.p_03.convertFromNormalizedParameterValue(t,e):(t-=this.p_03.getNumParameters())<this.p_04.getNumParameters()?this.p_04.convertFromNormalizedParameterValue(t,e):e}constrainParameterValue(t,e){return(t-=0)<this.p_01.getNumParameters()?this.p_01.constrainParameterValue(t,e):(t-=this.p_01.getNumParameters())<this.p_02.getNumParameters()?this.p_02.constrainParameterValue(t,e):(t-=this.p_02.getNumParameters())<this.p_03.getNumParameters()?this.p_03.constrainParameterValue(t,e):(t-=this.p_03.getNumParameters())<this.p_04.getNumParameters()?this.p_04.constrainParameterValue(t,e):e}scheduleParamInit(t,e){this.getPatcher().scheduleParamInit(t+this.parameterOffset,e)}processClockEvent(t,e,a,r){}processOutletAtCurrentTime(t,e,a){}processOutletEvent(t,e,a,r){this.updateTime(r),this.processOutletAtCurrentTime(t,e,a)}sendOutlet(t,e){this.getEngine().sendOutlet(this,t,e)}processNumMessage(t,e,a,r){switch(RNBO_UNUSED(e),this.updateTime(a),t){case TAG(\"sampler_params\"):this.inport_05_value_number_set(r)}this.p_01.processNumMessage(t,e,a,r),this.p_02.processNumMessage(t,e,a,r),this.p_03.processNumMessage(t,e,a,r),this.p_04.processNumMessage(t,e,a,r)}processListMessage(t,e,a,r){switch(RNBO_UNUSED(e),this.updateTime(a),t){case TAG(\"sampler_params\"):this.inport_05_value_list_set(r)}this.p_01.processListMessage(t,e,a,r),this.p_02.processListMessage(t,e,a,r),this.p_03.processListMessage(t,e,a,r),this.p_04.processListMessage(t,e,a,r)}processBangMessage(t,e,a){switch(RNBO_UNUSED(e),this.updateTime(a),t){case TAG(\"sampler_params\"):this.inport_05_value_bang_bang()}this.p_01.processBangMessage(t,e,a),this.p_02.processBangMessage(t,e,a),this.p_03.processBangMessage(t,e,a),this.p_04.processBangMessage(t,e,a)}resolveTag(t){switch(t){case TAG(\"sampler_params\"):return\"sampler_params\";case TAG(\"\"):return\"\"}var e=this.p_01.resolveTag(t);if(e)return e;var a=this.p_02.resolveTag(t);if(a)return a;var r=this.p_03.resolveTag(t);if(r)return r;var s=this.p_04.resolveTag(t);return s||null}getDataRef(t){return null}getNumDataRefs(){return 0}fillDataRef(t,e){}processDataViewUpdate(t,e){this.p_01.processDataViewUpdate(t,e),this.p_02.processDataViewUpdate(t,e),this.p_03.processDataViewUpdate(t,e),this.p_04.processDataViewUpdate(t,e)}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(t,e){this._engineInterface=t,this._parentPatcher=e}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_79{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.counter_01_phase=!0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(t){return RNBO_UNUSED(t),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(t,e,a,r){}getNumMidiOutputPorts(){return 0}msToSamps(t,e){return t*e*.001}sampsToMs(t){return t*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(t){this.setProbingIndex(-1)}setProbingIndex(t){}getProbingChannels(t){return RNBO_UNUSED(t),0}getIsMuted(){return this.isMuted}setIsMuted(t){this.isMuted=t}getPatcherSerial(){return 0}setState(){}processTempoEvent(t,e){}processTransportEvent(t,e){this.updateTime(t),this.metro_01_onTransportChanged(e)}processBeatTimeEvent(t,e){this.updateTime(t),this.metro_01_onBeatTimeChanged(e)}onSampleRateChanged(t){}processTimeSignatureEvent(t,e,a){}setParameterValue(t,e,a){}processParameterEvent(t,e,a){this.setParameterValue(t,e,a)}processNormalizedParameterEvent(t,e,a){this.setParameterValueNormalized(t,e,a)}getParameterValue(t){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(t){return\"bogus\"}getParameterId(t){return\"bogus\"}getParameterInfo(t,e){}sendParameter(t){this.getPatcher().sendParameter(t+this.parameterOffset)}setParameterOffset(t){this.parameterOffset=t}applyStepsToNormalizedParameterValue(t,e){if(1==e)t>0&&(t=1);else{let a=1/(e-1);t=1*rnbo_fround(t/a*1/1)*a}return t}convertToNormalizedParameterValue(t,e){return e}convertFromNormalizedParameterValue(t,e){return e=e<0?0:e>1?1:e}constrainParameterValue(t,e){return e}scheduleParamInit(t,e){this.getPatcher().scheduleParamInit(t+this.parameterOffset,e)}processClockEvent(t,e,a,r){switch(RNBO_UNUSED(r),RNBO_UNUSED(a),this.updateTime(t),e){case 1935387534:this.metro_01_tick_bang()}}processOutletAtCurrentTime(t,e,a){}processOutletEvent(t,e,a,r){this.updateTime(r),this.processOutletAtCurrentTime(t,e,a)}sendOutlet(t,e){this.getEngine().sendOutlet(this,t,e)}processNumMessage(t,e,a,r){}processListMessage(t,e,a,r){}processBangMessage(t,e,a){}resolveTag(t){return null}getDataRef(t){return null}getNumDataRefs(){return 0}fillDataRef(t,e){}processDataViewUpdate(t,e){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(t,e){this._engineInterface=t,this._parentPatcher=e}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_61{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(2),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.peakamp_01_setupDone=!1,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(t){return RNBO_UNUSED(t),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(t,e,a,r){}getNumMidiOutputPorts(){return 0}msToSamps(t,e){return t*e*.001}sampsToMs(t){return t*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 1}setProbingTarget(t){this.setProbingIndex(-1)}setProbingIndex(t){}getProbingChannels(t){return RNBO_UNUSED(t),0}getIsMuted(){return this.isMuted}setIsMuted(t){this.isMuted=t}getPatcherSerial(){return 0}setState(){}processTempoEvent(t,e){}processTransportEvent(t,e){}processBeatTimeEvent(t,e){}onSampleRateChanged(t){}processTimeSignatureEvent(t,e,a){}setParameterValue(t,e,a){}processParameterEvent(t,e,a){this.setParameterValue(t,e,a)}processNormalizedParameterEvent(t,e,a){this.setParameterValueNormalized(t,e,a)}getParameterValue(t){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(t){return\"bogus\"}getParameterId(t){return\"bogus\"}getParameterInfo(t,e){}sendParameter(t){this.getPatcher().sendParameter(t+this.parameterOffset)}setParameterOffset(t){this.parameterOffset=t}applyStepsToNormalizedParameterValue(t,e){if(1==e)t>0&&(t=1);else{let a=1/(e-1);t=1*rnbo_fround(t/a*1/1)*a}return t}convertToNormalizedParameterValue(t,e){return e}convertFromNormalizedParameterValue(t,e){return e=e<0?0:e>1?1:e}constrainParameterValue(t,e){return e}scheduleParamInit(t,e){this.getPatcher().scheduleParamInit(t+this.parameterOffset,e)}processClockEvent(t,e,a,r){switch(RNBO_UNUSED(a),this.updateTime(t),e){case 760652352:this.line_01_target_bang();break;case 1812006465:this.peakamp_01_output_set(r)}}processOutletAtCurrentTime(t,e,a){}processOutletEvent(t,e,a,r){this.updateTime(r),this.processOutletAtCurrentTime(t,e,a)}sendOutlet(t,e){this.getEngine().sendOutlet(this,t,e)}processNumMessage(t,e,a,r){}processListMessage(t,e,a,r){}processBangMessage(t,e,a){}resolveTag(t){return null}getDataRef(t){return null}getNumDataRefs(){return 0}fillDataRef(t,e){}processDataViewUpdate(t,e){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(t,e){this._engineInterface=t,this._parentPatcher=e}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_65{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(2),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.click_01_buf=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0,this.p_05=new Array}getParameterIndexForID(t){return stringCompare(t,\"number_obj-19/value\")?stringCompare(t,\"number_obj-18/value\")?INVALID_INDEX:1:0}getNumMidiInputPorts(){return 0}processMidiEvent(t,e,a,r){}getNumMidiOutputPorts(){return 0}msToSamps(t,e){return t*e*.001}sampsToMs(t){return t*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 1}setProbingTarget(t){this.setProbingIndex(-1)}setProbingIndex(t){}getProbingChannels(t){return RNBO_UNUSED(t),0}getIsMuted(){return this.isMuted}setIsMuted(t){this.isMuted=t}getPatcherSerial(){return 0}setState(){this.p_05=new RNBOSubpatcher_61,this.p_05.setEngineAndPatcher(this.getEngine(),this),this.p_05.initialize(),this.p_05.setParameterOffset(this.getParameterOffset(this.p_05))}processTempoEvent(t,e){this.updateTime(t),this.p_05.processTempoEvent(t,e)}processTransportEvent(t,e){this.updateTime(t),this.p_05.processTransportEvent(t,e)}processBeatTimeEvent(t,e){this.updateTime(t),this.p_05.processBeatTimeEvent(t,e)}onSampleRateChanged(t){}processTimeSignatureEvent(t,e,a){this.updateTime(t),this.p_05.processTimeSignatureEvent(t,e,a)}setParameterValue(t,e,a){switch(this.updateTime(a),t){case 0:this.numberobj_01_value_set(e);break;case 1:this.numberobj_02_value_set(e);break;default:(t-=2)<this.p_05.getNumParameters()&&this.p_05.setParameterValue(t,e,a)}}processParameterEvent(t,e,a){this.setParameterValue(t,e,a)}processNormalizedParameterEvent(t,e,a){this.setParameterValueNormalized(t,e,a)}getParameterValue(t){switch(t){case 0:return this.numberobj_01_value;case 1:return this.numberobj_02_value;default:return(t-=2)<this.p_05.getNumParameters()?this.p_05.getParameterValue(t):0}}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 2+this.p_05.getNumParameters()}getParameterName(t){switch(t){case 0:return\"numberobj_01_value\";case 1:return\"numberobj_02_value\";default:return(t-=2)<this.p_05.getNumParameters()?this.p_05.getParameterName(t):\"bogus\"}}getParameterId(t){switch(t){case 0:return\"p_obj-3/p_obj-14/number_obj-19/value\";case 1:return\"p_obj-3/p_obj-14/number_obj-18/value\";default:return(t-=2)<this.p_05.getNumParameters()?this.p_05.getParameterId(t):\"bogus\"}}getParameterInfo(t,e){switch(t){case 0:e.type=ParameterTypeNumber,e.initialValue=16,e.min=0,e.max=1,e.exponent=1,e.steps=0,e.debug=!1,e.saveable=!0,e.transmittable=!0,e.initialized=!0,e.visible=!1,e.displayName=\"\",e.unit=\"\",e.ioType=IOTypeUndefined,e.signalIndex=INVALID_INDEX;break;case 1:e.type=ParameterTypeNumber,e.initialValue=1,e.min=0,e.max=1,e.exponent=1,e.steps=0,e.debug=!1,e.saveable=!0,e.transmittable=!0,e.initialized=!0,e.visible=!1,e.displayName=\"\",e.unit=\"\",e.ioType=IOTypeUndefined,e.signalIndex=INVALID_INDEX;break;default:(t-=2)<this.p_05.getNumParameters()&&this.p_05.getParameterInfo(t,e)}}sendParameter(t){this.getPatcher().sendParameter(t+this.parameterOffset)}getParameterOffset(t){return t==this.p_05?2:0}setParameterOffset(t){this.parameterOffset=t}applyStepsToNormalizedParameterValue(t,e){if(1==e)t>0&&(t=1);else{let a=1/(e-1);t=1*rnbo_fround(t/a*1/1)*a}return t}convertToNormalizedParameterValue(t,e){switch(t){case 0:case 1:return((e=e<0?0:e>1?1:e)-0)/1;default:return(t-=2)<this.p_05.getNumParameters()?this.p_05.convertToNormalizedParameterValue(t,e):e}}convertFromNormalizedParameterValue(t,e){switch(e=e<0?0:e>1?1:e,t){case 0:case 1:return 0+1*(e=e<0?0:e>1?1:e);default:return(t-=2)<this.p_05.getNumParameters()?this.p_05.convertFromNormalizedParameterValue(t,e):e}}constrainParameterValue(t,e){return(t-=2)<this.p_05.getNumParameters()?this.p_05.constrainParameterValue(t,e):e}scheduleParamInit(t,e){this.getPatcher().scheduleParamInit(t+this.parameterOffset,e)}processClockEvent(t,e,a,r){switch(RNBO_UNUSED(r),RNBO_UNUSED(a),this.updateTime(t),e){case 29237386:this.loadmess_01_startupbang_bang();break;case 892732297:this.loadmess_02_startupbang_bang()}}processOutletAtCurrentTime(t,e,a){}processOutletEvent(t,e,a,r){this.updateTime(r),this.processOutletAtCurrentTime(t,e,a)}sendOutlet(t,e){this.getEngine().sendOutlet(this,t,e)}processNumMessage(t,e,a,r){switch(this.updateTime(a),t){case TAG(\"format\"):TAG(\"p_obj-3/p_obj-14/number_obj-19\")==e&&this.numberobj_01_format_set(r),TAG(\"p_obj-3/p_obj-14/number_obj-18\")==e&&this.numberobj_02_format_set(r)}this.p_05.processNumMessage(t,e,a,r)}processListMessage(t,e,a,r){RNBO_UNUSED(e),this.updateTime(a),this.p_05.processListMessage(t,e,a,r)}processBangMessage(t,e,a){switch(this.updateTime(a),t){case TAG(\"startupbang\"):TAG(\"p_obj-3/p_obj-14/loadmess_obj-41\")==e&&this.loadmess_01_startupbang_bang(),TAG(\"p_obj-3/p_obj-14/loadmess_obj-4\")==e&&this.loadmess_02_startupbang_bang()}this.p_05.processBangMessage(t,e,a)}resolveTag(t){switch(t){case TAG(\"setup\"):return\"setup\";case TAG(\"p_obj-3/p_obj-14/number_obj-19\"):return\"p_obj-3/p_obj-14/number_obj-19\";case TAG(\"p_obj-3/p_obj-14/number_obj-18\"):return\"p_obj-3/p_obj-14/number_obj-18\";case TAG(\"format\"):return\"format\";case TAG(\"startupbang\"):return\"startupbang\";case TAG(\"p_obj-3/p_obj-14/loadmess_obj-41\"):return\"p_obj-3/p_obj-14/loadmess_obj-41\";case TAG(\"p_obj-3/p_obj-14/loadmess_obj-4\"):return\"p_obj-3/p_obj-14/loadmess_obj-4\"}var e=this.p_05.resolveTag(t);return e||null}getDataRef(t){return null}getNumDataRefs(){return 0}fillDataRef(t,e){}processDataViewUpdate(t,e){this.p_05.processDataViewUpdate(t,e)}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(t,e){this._engineInterface=t,this._parentPatcher=e}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_62{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(2),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.peakamp_02_setupDone=!1,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(t){return RNBO_UNUSED(t),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(t,e,a,r){}getNumMidiOutputPorts(){return 0}msToSamps(t,e){return t*e*.001}sampsToMs(t){return t*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 1}setProbingTarget(t){this.setProbingIndex(-1)}setProbingIndex(t){}getProbingChannels(t){return RNBO_UNUSED(t),0}getIsMuted(){return this.isMuted}setIsMuted(t){this.isMuted=t}getPatcherSerial(){return 0}setState(){}processTempoEvent(t,e){}processTransportEvent(t,e){}processBeatTimeEvent(t,e){}onSampleRateChanged(t){}processTimeSignatureEvent(t,e,a){}setParameterValue(t,e,a){}processParameterEvent(t,e,a){this.setParameterValue(t,e,a)}processNormalizedParameterEvent(t,e,a){this.setParameterValueNormalized(t,e,a)}getParameterValue(t){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(t){return\"bogus\"}getParameterId(t){return\"bogus\"}getParameterInfo(t,e){}sendParameter(t){this.getPatcher().sendParameter(t+this.parameterOffset)}setParameterOffset(t){this.parameterOffset=t}applyStepsToNormalizedParameterValue(t,e){if(1==e)t>0&&(t=1);else{let a=1/(e-1);t=1*rnbo_fround(t/a*1/1)*a}return t}convertToNormalizedParameterValue(t,e){return e}convertFromNormalizedParameterValue(t,e){return e=e<0?0:e>1?1:e}constrainParameterValue(t,e){return e}scheduleParamInit(t,e){this.getPatcher().scheduleParamInit(t+this.parameterOffset,e)}processClockEvent(t,e,a,r){switch(RNBO_UNUSED(a),this.updateTime(t),e){case 760652352:this.line_02_target_bang();break;case 1812006465:this.peakamp_02_output_set(r)}}processOutletAtCurrentTime(t,e,a){}processOutletEvent(t,e,a,r){this.updateTime(r),this.processOutletAtCurrentTime(t,e,a)}sendOutlet(t,e){this.getEngine().sendOutlet(this,t,e)}processNumMessage(t,e,a,r){}processListMessage(t,e,a,r){}processBangMessage(t,e,a){}resolveTag(t){return null}getDataRef(t){return null}getNumDataRefs(){return 0}fillDataRef(t,e){}processDataViewUpdate(t,e){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(t,e){this._engineInterface=t,this._parentPatcher=e}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_66{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(2),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.click_02_buf=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0,this.p_06=new Array}getParameterIndexForID(t){return stringCompare(t,\"number_obj-19/value\")?stringCompare(t,\"number_obj-18/value\")?INVALID_INDEX:1:0}getNumMidiInputPorts(){return 0}processMidiEvent(t,e,a,r){}getNumMidiOutputPorts(){return 0}msToSamps(t,e){return t*e*.001}sampsToMs(t){return t*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 1}setProbingTarget(t){this.setProbingIndex(-1)}setProbingIndex(t){}getProbingChannels(t){return RNBO_UNUSED(t),0}getIsMuted(){return this.isMuted}setIsMuted(t){this.isMuted=t}getPatcherSerial(){return 0}setState(){this.p_06=new RNBOSubpatcher_62,this.p_06.setEngineAndPatcher(this.getEngine(),this),this.p_06.initialize(),this.p_06.setParameterOffset(this.getParameterOffset(this.p_06))}processTempoEvent(t,e){this.updateTime(t),this.p_06.processTempoEvent(t,e)}processTransportEvent(t,e){this.updateTime(t),this.p_06.processTransportEvent(t,e)}processBeatTimeEvent(t,e){this.updateTime(t),this.p_06.processBeatTimeEvent(t,e)}onSampleRateChanged(t){}processTimeSignatureEvent(t,e,a){this.updateTime(t),this.p_06.processTimeSignatureEvent(t,e,a)}setParameterValue(t,e,a){switch(this.updateTime(a),t){case 0:this.numberobj_03_value_set(e);break;case 1:this.numberobj_04_value_set(e);break;default:(t-=2)<this.p_06.getNumParameters()&&this.p_06.setParameterValue(t,e,a)}}processParameterEvent(t,e,a){this.setParameterValue(t,e,a)}processNormalizedParameterEvent(t,e,a){this.setParameterValueNormalized(t,e,a)}getParameterValue(t){switch(t){case 0:return this.numberobj_03_value;case 1:return this.numberobj_04_value;default:return(t-=2)<this.p_06.getNumParameters()?this.p_06.getParameterValue(t):0}}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 2+this.p_06.getNumParameters()}getParameterName(t){switch(t){case 0:return\"numberobj_03_value\";case 1:return\"numberobj_04_value\";default:return(t-=2)<this.p_06.getNumParameters()?this.p_06.getParameterName(t):\"bogus\"}}getParameterId(t){switch(t){case 0:return\"p_obj-3/p_obj-16/number_obj-19/value\";case 1:return\"p_obj-3/p_obj-16/number_obj-18/value\";default:return(t-=2)<this.p_06.getNumParameters()?this.p_06.getParameterId(t):\"bogus\"}}getParameterInfo(t,e){switch(t){case 0:e.type=ParameterTypeNumber,e.initialValue=16,e.min=0,e.max=1,e.exponent=1,e.steps=0,e.debug=!1,e.saveable=!0,e.transmittable=!0,e.initialized=!0,e.visible=!1,e.displayName=\"\",e.unit=\"\",e.ioType=IOTypeUndefined,e.signalIndex=INVALID_INDEX;break;case 1:e.type=ParameterTypeNumber,e.initialValue=1,e.min=0,e.max=1,e.exponent=1,e.steps=0,e.debug=!1,e.saveable=!0,e.transmittable=!0,e.initialized=!0,e.visible=!1,e.displayName=\"\",e.unit=\"\",e.ioType=IOTypeUndefined,e.signalIndex=INVALID_INDEX;break;default:(t-=2)<this.p_06.getNumParameters()&&this.p_06.getParameterInfo(t,e)}}sendParameter(t){this.getPatcher().sendParameter(t+this.parameterOffset)}getParameterOffset(t){return t==this.p_06?2:0}setParameterOffset(t){this.parameterOffset=t}applyStepsToNormalizedParameterValue(t,e){if(1==e)t>0&&(t=1);else{let a=1/(e-1);t=1*rnbo_fround(t/a*1/1)*a}return t}convertToNormalizedParameterValue(t,e){switch(t){case 0:case 1:return((e=e<0?0:e>1?1:e)-0)/1;default:return(t-=2)<this.p_06.getNumParameters()?this.p_06.convertToNormalizedParameterValue(t,e):e}}convertFromNormalizedParameterValue(t,e){switch(e=e<0?0:e>1?1:e,t){case 0:case 1:return 0+1*(e=e<0?0:e>1?1:e);default:return(t-=2)<this.p_06.getNumParameters()?this.p_06.convertFromNormalizedParameterValue(t,e):e}}constrainParameterValue(t,e){return(t-=2)<this.p_06.getNumParameters()?this.p_06.constrainParameterValue(t,e):e}scheduleParamInit(t,e){this.getPatcher().scheduleParamInit(t+this.parameterOffset,e)}processClockEvent(t,e,a,r){switch(RNBO_UNUSED(r),RNBO_UNUSED(a),this.updateTime(t),e){case 29237386:this.loadmess_03_startupbang_bang();break;case 892732297:this.loadmess_04_startupbang_bang()}}processOutletAtCurrentTime(t,e,a){}processOutletEvent(t,e,a,r){this.updateTime(r),this.processOutletAtCurrentTime(t,e,a)}sendOutlet(t,e){this.getEngine().sendOutlet(this,t,e)}processNumMessage(t,e,a,r){switch(this.updateTime(a),t){case TAG(\"format\"):TAG(\"p_obj-3/p_obj-16/number_obj-19\")==e&&this.numberobj_03_format_set(r),TAG(\"p_obj-3/p_obj-16/number_obj-18\")==e&&this.numberobj_04_format_set(r)}this.p_06.processNumMessage(t,e,a,r)}processListMessage(t,e,a,r){RNBO_UNUSED(e),this.updateTime(a),this.p_06.processListMessage(t,e,a,r)}processBangMessage(t,e,a){switch(this.updateTime(a),t){case TAG(\"startupbang\"):TAG(\"p_obj-3/p_obj-16/loadmess_obj-41\")==e&&this.loadmess_03_startupbang_bang(),TAG(\"p_obj-3/p_obj-16/loadmess_obj-4\")==e&&this.loadmess_04_startupbang_bang()}this.p_06.processBangMessage(t,e,a)}resolveTag(t){switch(t){case TAG(\"setup\"):return\"setup\";case TAG(\"p_obj-3/p_obj-16/number_obj-19\"):return\"p_obj-3/p_obj-16/number_obj-19\";case TAG(\"p_obj-3/p_obj-16/number_obj-18\"):return\"p_obj-3/p_obj-16/number_obj-18\";case TAG(\"format\"):return\"format\";case TAG(\"startupbang\"):return\"startupbang\";case TAG(\"p_obj-3/p_obj-16/loadmess_obj-41\"):return\"p_obj-3/p_obj-16/loadmess_obj-41\";case TAG(\"p_obj-3/p_obj-16/loadmess_obj-4\"):return\"p_obj-3/p_obj-16/loadmess_obj-4\"}var e=this.p_06.resolveTag(t);return e||null}getDataRef(t){return null}getNumDataRefs(){return 0}fillDataRef(t,e){}processDataViewUpdate(t,e){this.p_06.processDataViewUpdate(t,e)}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(t,e){this._engineInterface=t,this._parentPatcher=e}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_63{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(2),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.peakamp_03_setupDone=!1,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(t){return RNBO_UNUSED(t),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(t,e,a,r){}getNumMidiOutputPorts(){return 0}msToSamps(t,e){return t*e*.001}sampsToMs(t){return t*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 1}setProbingTarget(t){this.setProbingIndex(-1)}setProbingIndex(t){}getProbingChannels(t){return RNBO_UNUSED(t),0}getIsMuted(){return this.isMuted}setIsMuted(t){this.isMuted=t}getPatcherSerial(){return 0}setState(){}processTempoEvent(t,e){}processTransportEvent(t,e){}processBeatTimeEvent(t,e){}onSampleRateChanged(t){}processTimeSignatureEvent(t,e,a){}setParameterValue(t,e,a){}processParameterEvent(t,e,a){this.setParameterValue(t,e,a)}processNormalizedParameterEvent(t,e,a){this.setParameterValueNormalized(t,e,a)}getParameterValue(t){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(t){return\"bogus\"}getParameterId(t){return\"bogus\"}getParameterInfo(t,e){}sendParameter(t){this.getPatcher().sendParameter(t+this.parameterOffset)}setParameterOffset(t){this.parameterOffset=t}applyStepsToNormalizedParameterValue(t,e){if(1==e)t>0&&(t=1);else{let a=1/(e-1);t=1*rnbo_fround(t/a*1/1)*a}return t}convertToNormalizedParameterValue(t,e){return e}convertFromNormalizedParameterValue(t,e){return e=e<0?0:e>1?1:e}constrainParameterValue(t,e){return e}scheduleParamInit(t,e){this.getPatcher().scheduleParamInit(t+this.parameterOffset,e)}processClockEvent(t,e,a,r){switch(RNBO_UNUSED(a),this.updateTime(t),e){case 760652352:this.line_03_target_bang();break;case 1812006465:this.peakamp_03_output_set(r)}}processOutletAtCurrentTime(t,e,a){}processOutletEvent(t,e,a,r){this.updateTime(r),this.processOutletAtCurrentTime(t,e,a)}sendOutlet(t,e){this.getEngine().sendOutlet(this,t,e)}processNumMessage(t,e,a,r){}processListMessage(t,e,a,r){}processBangMessage(t,e,a){}resolveTag(t){return null}getDataRef(t){return null}getNumDataRefs(){return 0}fillDataRef(t,e){}processDataViewUpdate(t,e){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(t,e){this._engineInterface=t,this._parentPatcher=e}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_67{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(2),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.click_03_buf=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0,this.p_07=new Array}getParameterIndexForID(t){return stringCompare(t,\"number_obj-19/value\")?stringCompare(t,\"number_obj-18/value\")?INVALID_INDEX:1:0}getNumMidiInputPorts(){return 0}processMidiEvent(t,e,a,r){}getNumMidiOutputPorts(){return 0}msToSamps(t,e){return t*e*.001}sampsToMs(t){return t*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 1}setProbingTarget(t){this.setProbingIndex(-1)}setProbingIndex(t){}getProbingChannels(t){return RNBO_UNUSED(t),0}getIsMuted(){return this.isMuted}setIsMuted(t){this.isMuted=t}getPatcherSerial(){return 0}setState(){this.p_07=new RNBOSubpatcher_63,this.p_07.setEngineAndPatcher(this.getEngine(),this),this.p_07.initialize(),this.p_07.setParameterOffset(this.getParameterOffset(this.p_07))}processTempoEvent(t,e){this.updateTime(t),this.p_07.processTempoEvent(t,e)}processTransportEvent(t,e){this.updateTime(t),this.p_07.processTransportEvent(t,e)}processBeatTimeEvent(t,e){this.updateTime(t),this.p_07.processBeatTimeEvent(t,e)}onSampleRateChanged(t){}processTimeSignatureEvent(t,e,a){this.updateTime(t),this.p_07.processTimeSignatureEvent(t,e,a)}setParameterValue(t,e,a){switch(this.updateTime(a),t){case 0:this.numberobj_05_value_set(e);break;case 1:this.numberobj_06_value_set(e);break;default:(t-=2)<this.p_07.getNumParameters()&&this.p_07.setParameterValue(t,e,a)}}processParameterEvent(t,e,a){this.setParameterValue(t,e,a)}processNormalizedParameterEvent(t,e,a){this.setParameterValueNormalized(t,e,a)}getParameterValue(t){switch(t){case 0:return this.numberobj_05_value;case 1:return this.numberobj_06_value;default:return(t-=2)<this.p_07.getNumParameters()?this.p_07.getParameterValue(t):0}}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 2+this.p_07.getNumParameters()}getParameterName(t){switch(t){case 0:return\"numberobj_05_value\";case 1:return\"numberobj_06_value\";default:return(t-=2)<this.p_07.getNumParameters()?this.p_07.getParameterName(t):\"bogus\"}}getParameterId(t){switch(t){case 0:return\"p_obj-3/p_obj-17/number_obj-19/value\";case 1:return\"p_obj-3/p_obj-17/number_obj-18/value\";default:return(t-=2)<this.p_07.getNumParameters()?this.p_07.getParameterId(t):\"bogus\"}}getParameterInfo(t,e){switch(t){case 0:e.type=ParameterTypeNumber,e.initialValue=16,e.min=0,e.max=1,e.exponent=1,e.steps=0,e.debug=!1,e.saveable=!0,e.transmittable=!0,e.initialized=!0,e.visible=!1,e.displayName=\"\",e.unit=\"\",e.ioType=IOTypeUndefined,e.signalIndex=INVALID_INDEX;break;case 1:e.type=ParameterTypeNumber,e.initialValue=1,e.min=0,e.max=1,e.exponent=1,e.steps=0,e.debug=!1,e.saveable=!0,e.transmittable=!0,e.initialized=!0,e.visible=!1,e.displayName=\"\",e.unit=\"\",e.ioType=IOTypeUndefined,e.signalIndex=INVALID_INDEX;break;default:(t-=2)<this.p_07.getNumParameters()&&this.p_07.getParameterInfo(t,e)}}sendParameter(t){this.getPatcher().sendParameter(t+this.parameterOffset)}getParameterOffset(t){return t==this.p_07?2:0}setParameterOffset(t){this.parameterOffset=t}applyStepsToNormalizedParameterValue(t,e){if(1==e)t>0&&(t=1);else{let a=1/(e-1);t=1*rnbo_fround(t/a*1/1)*a}return t}convertToNormalizedParameterValue(t,e){switch(t){case 0:case 1:return((e=e<0?0:e>1?1:e)-0)/1;default:return(t-=2)<this.p_07.getNumParameters()?this.p_07.convertToNormalizedParameterValue(t,e):e}}convertFromNormalizedParameterValue(t,e){switch(e=e<0?0:e>1?1:e,t){case 0:case 1:return 0+1*(e=e<0?0:e>1?1:e);default:return(t-=2)<this.p_07.getNumParameters()?this.p_07.convertFromNormalizedParameterValue(t,e):e}}constrainParameterValue(t,e){return(t-=2)<this.p_07.getNumParameters()?this.p_07.constrainParameterValue(t,e):e}scheduleParamInit(t,e){this.getPatcher().scheduleParamInit(t+this.parameterOffset,e)}processClockEvent(t,e,a,r){switch(RNBO_UNUSED(r),RNBO_UNUSED(a),this.updateTime(t),e){case 29237386:this.loadmess_05_startupbang_bang();break;case 892732297:this.loadmess_06_startupbang_bang()}}processOutletAtCurrentTime(t,e,a){}processOutletEvent(t,e,a,r){this.updateTime(r),this.processOutletAtCurrentTime(t,e,a)}sendOutlet(t,e){this.getEngine().sendOutlet(this,t,e)}processNumMessage(t,e,a,r){switch(this.updateTime(a),t){case TAG(\"format\"):TAG(\"p_obj-3/p_obj-17/number_obj-19\")==e&&this.numberobj_05_format_set(r),TAG(\"p_obj-3/p_obj-17/number_obj-18\")==e&&this.numberobj_06_format_set(r)}this.p_07.processNumMessage(t,e,a,r)}processListMessage(t,e,a,r){RNBO_UNUSED(e),this.updateTime(a),this.p_07.processListMessage(t,e,a,r)}processBangMessage(t,e,a){switch(this.updateTime(a),t){case TAG(\"startupbang\"):TAG(\"p_obj-3/p_obj-17/loadmess_obj-41\")==e&&this.loadmess_05_startupbang_bang(),TAG(\"p_obj-3/p_obj-17/loadmess_obj-4\")==e&&this.loadmess_06_startupbang_bang()}this.p_07.processBangMessage(t,e,a)}resolveTag(t){switch(t){case TAG(\"setup\"):return\"setup\";case TAG(\"p_obj-3/p_obj-17/number_obj-19\"):return\"p_obj-3/p_obj-17/number_obj-19\";case TAG(\"p_obj-3/p_obj-17/number_obj-18\"):return\"p_obj-3/p_obj-17/number_obj-18\";case TAG(\"format\"):return\"format\";case TAG(\"startupbang\"):return\"startupbang\";case TAG(\"p_obj-3/p_obj-17/loadmess_obj-41\"):return\"p_obj-3/p_obj-17/loadmess_obj-41\";case TAG(\"p_obj-3/p_obj-17/loadmess_obj-4\"):return\"p_obj-3/p_obj-17/loadmess_obj-4\"}var e=this.p_07.resolveTag(t);return e||null}getDataRef(t){return null}getNumDataRefs(){return 0}fillDataRef(t,e){}processDataViewUpdate(t,e){this.p_07.processDataViewUpdate(t,e)}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(t,e){this._engineInterface=t,this._parentPatcher=e}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_64{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(2),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.peakamp_04_setupDone=!1,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(t){return RNBO_UNUSED(t),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(t,e,a,r){}getNumMidiOutputPorts(){return 0}msToSamps(t,e){return t*e*.001}sampsToMs(t){return t*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 1}setProbingTarget(t){this.setProbingIndex(-1)}setProbingIndex(t){}getProbingChannels(t){return RNBO_UNUSED(t),0}getIsMuted(){return this.isMuted}setIsMuted(t){this.isMuted=t}getPatcherSerial(){return 0}setState(){}processTempoEvent(t,e){}processTransportEvent(t,e){}processBeatTimeEvent(t,e){}onSampleRateChanged(t){}processTimeSignatureEvent(t,e,a){}setParameterValue(t,e,a){}processParameterEvent(t,e,a){this.setParameterValue(t,e,a)}processNormalizedParameterEvent(t,e,a){this.setParameterValueNormalized(t,e,a)}getParameterValue(t){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(t){return\"bogus\"}getParameterId(t){return\"bogus\"}getParameterInfo(t,e){}sendParameter(t){this.getPatcher().sendParameter(t+this.parameterOffset)}setParameterOffset(t){this.parameterOffset=t}applyStepsToNormalizedParameterValue(t,e){if(1==e)t>0&&(t=1);else{let a=1/(e-1);t=1*rnbo_fround(t/a*1/1)*a}return t}convertToNormalizedParameterValue(t,e){return e}convertFromNormalizedParameterValue(t,e){return e=e<0?0:e>1?1:e}constrainParameterValue(t,e){return e}scheduleParamInit(t,e){this.getPatcher().scheduleParamInit(t+this.parameterOffset,e)}processClockEvent(t,e,a,r){switch(RNBO_UNUSED(a),this.updateTime(t),e){case 760652352:this.line_04_target_bang();break;case 1812006465:this.peakamp_04_output_set(r)}}processOutletAtCurrentTime(t,e,a){}processOutletEvent(t,e,a,r){this.updateTime(r),this.processOutletAtCurrentTime(t,e,a)}sendOutlet(t,e){this.getEngine().sendOutlet(this,t,e)}processNumMessage(t,e,a,r){}processListMessage(t,e,a,r){}processBangMessage(t,e,a){}resolveTag(t){return null}getDataRef(t){return null}getNumDataRefs(){return 0}fillDataRef(t,e){}processDataViewUpdate(t,e){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(t,e){this._engineInterface=t,this._parentPatcher=e}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_68{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(2),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.click_04_buf=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0,this.p_08=new Array}getParameterIndexForID(t){return stringCompare(t,\"number_obj-19/value\")?stringCompare(t,\"number_obj-18/value\")?INVALID_INDEX:1:0}getNumMidiInputPorts(){return 0}processMidiEvent(t,e,a,r){}getNumMidiOutputPorts(){return 0}msToSamps(t,e){return t*e*.001}sampsToMs(t){return t*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 1}setProbingTarget(t){this.setProbingIndex(-1)}setProbingIndex(t){}getProbingChannels(t){return RNBO_UNUSED(t),0}getIsMuted(){return this.isMuted}setIsMuted(t){this.isMuted=t}getPatcherSerial(){return 0}setState(){this.p_08=new RNBOSubpatcher_64,this.p_08.setEngineAndPatcher(this.getEngine(),this),this.p_08.initialize(),this.p_08.setParameterOffset(this.getParameterOffset(this.p_08))}processTempoEvent(t,e){this.updateTime(t),this.p_08.processTempoEvent(t,e)}processTransportEvent(t,e){this.updateTime(t),this.p_08.processTransportEvent(t,e)}processBeatTimeEvent(t,e){this.updateTime(t),this.p_08.processBeatTimeEvent(t,e)}onSampleRateChanged(t){}processTimeSignatureEvent(t,e,a){this.updateTime(t),this.p_08.processTimeSignatureEvent(t,e,a)}setParameterValue(t,e,a){switch(this.updateTime(a),t){case 0:this.numberobj_07_value_set(e);break;case 1:this.numberobj_08_value_set(e);break;default:(t-=2)<this.p_08.getNumParameters()&&this.p_08.setParameterValue(t,e,a)}}processParameterEvent(t,e,a){this.setParameterValue(t,e,a)}processNormalizedParameterEvent(t,e,a){this.setParameterValueNormalized(t,e,a)}getParameterValue(t){switch(t){case 0:return this.numberobj_07_value;case 1:return this.numberobj_08_value;default:return(t-=2)<this.p_08.getNumParameters()?this.p_08.getParameterValue(t):0}}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 2+this.p_08.getNumParameters()}getParameterName(t){switch(t){case 0:return\"numberobj_07_value\";case 1:return\"numberobj_08_value\";default:return(t-=2)<this.p_08.getNumParameters()?this.p_08.getParameterName(t):\"bogus\"}}getParameterId(t){switch(t){case 0:return\"p_obj-3/p_obj-18/number_obj-19/value\";case 1:return\"p_obj-3/p_obj-18/number_obj-18/value\";default:return(t-=2)<this.p_08.getNumParameters()?this.p_08.getParameterId(t):\"bogus\"}}getParameterInfo(t,e){switch(t){case 0:e.type=ParameterTypeNumber,e.initialValue=16,e.min=0,e.max=1,e.exponent=1,e.steps=0,e.debug=!1,e.saveable=!0,e.transmittable=!0,e.initialized=!0,e.visible=!1,e.displayName=\"\",e.unit=\"\",e.ioType=IOTypeUndefined,e.signalIndex=INVALID_INDEX;break;case 1:e.type=ParameterTypeNumber,e.initialValue=1,e.min=0,e.max=1,e.exponent=1,e.steps=0,e.debug=!1,e.saveable=!0,e.transmittable=!0,e.initialized=!0,e.visible=!1,e.displayName=\"\",e.unit=\"\",e.ioType=IOTypeUndefined,e.signalIndex=INVALID_INDEX;break;default:(t-=2)<this.p_08.getNumParameters()&&this.p_08.getParameterInfo(t,e)}}sendParameter(t){this.getPatcher().sendParameter(t+this.parameterOffset)}getParameterOffset(t){return t==this.p_08?2:0}setParameterOffset(t){this.parameterOffset=t}applyStepsToNormalizedParameterValue(t,e){if(1==e)t>0&&(t=1);else{let a=1/(e-1);t=1*rnbo_fround(t/a*1/1)*a}return t}convertToNormalizedParameterValue(t,e){switch(t){case 0:case 1:return((e=e<0?0:e>1?1:e)-0)/1;default:return(t-=2)<this.p_08.getNumParameters()?this.p_08.convertToNormalizedParameterValue(t,e):e}}convertFromNormalizedParameterValue(t,e){switch(e=e<0?0:e>1?1:e,t){case 0:case 1:return 0+1*(e=e<0?0:e>1?1:e);default:return(t-=2)<this.p_08.getNumParameters()?this.p_08.convertFromNormalizedParameterValue(t,e):e}}constrainParameterValue(t,e){return(t-=2)<this.p_08.getNumParameters()?this.p_08.constrainParameterValue(t,e):e}scheduleParamInit(t,e){this.getPatcher().scheduleParamInit(t+this.parameterOffset,e)}processClockEvent(t,e,a,r){switch(RNBO_UNUSED(r),RNBO_UNUSED(a),this.updateTime(t),e){case 29237386:this.loadmess_07_startupbang_bang();break;case 892732297:this.loadmess_08_startupbang_bang()}}processOutletAtCurrentTime(t,e,a){}processOutletEvent(t,e,a,r){this.updateTime(r),this.processOutletAtCurrentTime(t,e,a)}sendOutlet(t,e){this.getEngine().sendOutlet(this,t,e)}processNumMessage(t,e,a,r){switch(this.updateTime(a),t){case TAG(\"format\"):TAG(\"p_obj-3/p_obj-18/number_obj-19\")==e&&this.numberobj_07_format_set(r),TAG(\"p_obj-3/p_obj-18/number_obj-18\")==e&&this.numberobj_08_format_set(r)}this.p_08.processNumMessage(t,e,a,r)}processListMessage(t,e,a,r){RNBO_UNUSED(e),this.updateTime(a),this.p_08.processListMessage(t,e,a,r)}processBangMessage(t,e,a){switch(this.updateTime(a),t){case TAG(\"startupbang\"):TAG(\"p_obj-3/p_obj-18/loadmess_obj-41\")==e&&this.loadmess_07_startupbang_bang(),TAG(\"p_obj-3/p_obj-18/loadmess_obj-4\")==e&&this.loadmess_08_startupbang_bang()}this.p_08.processBangMessage(t,e,a)}resolveTag(t){switch(t){case TAG(\"setup\"):return\"setup\";case TAG(\"p_obj-3/p_obj-18/number_obj-19\"):return\"p_obj-3/p_obj-18/number_obj-19\";case TAG(\"p_obj-3/p_obj-18/number_obj-18\"):return\"p_obj-3/p_obj-18/number_obj-18\";case TAG(\"format\"):return\"format\";case TAG(\"startupbang\"):return\"startupbang\";case TAG(\"p_obj-3/p_obj-18/loadmess_obj-41\"):return\"p_obj-3/p_obj-18/loadmess_obj-41\";case TAG(\"p_obj-3/p_obj-18/loadmess_obj-4\"):return\"p_obj-3/p_obj-18/loadmess_obj-4\"}var e=this.p_08.resolveTag(t);return e||null}getDataRef(t){return null}getNumDataRefs(){return 0}fillDataRef(t,e){}processDataViewUpdate(t,e){this.p_08.processDataViewUpdate(t,e)}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(t,e){this._engineInterface=t,this._parentPatcher=e}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_80{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(1),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.edge_05_setupDone=!1,this.edge_06_setupDone=!1,this.edge_07_setupDone=!1,this.edge_08_setupDone=!1,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0,this.p_09=new Array,this.p_10=new Array,this.p_11=new Array,this.p_12=new Array}getParameterIndexForID(t){return RNBO_UNUSED(t),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(t,e,a,r){}getNumMidiOutputPorts(){return 0}msToSamps(t,e){return t*e*.001}sampsToMs(t){return t*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 4}setProbingTarget(t){this.setProbingIndex(-1)}setProbingIndex(t){}getProbingChannels(t){return RNBO_UNUSED(t),0}getIsMuted(){return this.isMuted}setIsMuted(t){this.isMuted=t}getPatcherSerial(){return 0}setState(){this.p_09=new RNBOSubpatcher_65,this.p_09.setEngineAndPatcher(this.getEngine(),this),this.p_09.initialize(),this.p_09.setParameterOffset(this.getParameterOffset(this.p_09)),this.p_10=new RNBOSubpatcher_66,this.p_10.setEngineAndPatcher(this.getEngine(),this),this.p_10.initialize(),this.p_10.setParameterOffset(this.getParameterOffset(this.p_10)),this.p_11=new RNBOSubpatcher_67,this.p_11.setEngineAndPatcher(this.getEngine(),this),this.p_11.initialize(),this.p_11.setParameterOffset(this.getParameterOffset(this.p_11)),this.p_12=new RNBOSubpatcher_68,this.p_12.setEngineAndPatcher(this.getEngine(),this),this.p_12.initialize(),this.p_12.setParameterOffset(this.getParameterOffset(this.p_12))}processTempoEvent(t,e){this.updateTime(t),this.p_09.processTempoEvent(t,e),this.p_10.processTempoEvent(t,e),this.p_11.processTempoEvent(t,e),this.p_12.processTempoEvent(t,e)}processTransportEvent(t,e){this.updateTime(t),this.p_09.processTransportEvent(t,e),this.p_10.processTransportEvent(t,e),this.p_11.processTransportEvent(t,e),this.p_12.processTransportEvent(t,e)}processBeatTimeEvent(t,e){this.updateTime(t),this.p_09.processBeatTimeEvent(t,e),this.p_10.processBeatTimeEvent(t,e),this.p_11.processBeatTimeEvent(t,e),this.p_12.processBeatTimeEvent(t,e)}onSampleRateChanged(t){}processTimeSignatureEvent(t,e,a){this.updateTime(t),this.p_09.processTimeSignatureEvent(t,e,a),this.p_10.processTimeSignatureEvent(t,e,a),this.p_11.processTimeSignatureEvent(t,e,a),this.p_12.processTimeSignatureEvent(t,e,a)}setParameterValue(t,e,a){RNBO_UNUSED(e),this.updateTime(a),(t-=0)<this.p_09.getNumParameters()&&this.p_09.setParameterValue(t,e,a),(t-=this.p_09.getNumParameters())<this.p_10.getNumParameters()&&this.p_10.setParameterValue(t,e,a),(t-=this.p_10.getNumParameters())<this.p_11.getNumParameters()&&this.p_11.setParameterValue(t,e,a),(t-=this.p_11.getNumParameters())<this.p_12.getNumParameters()&&this.p_12.setParameterValue(t,e,a)}processParameterEvent(t,e,a){this.setParameterValue(t,e,a)}processNormalizedParameterEvent(t,e,a){this.setParameterValueNormalized(t,e,a)}getParameterValue(t){return(t-=0)<this.p_09.getNumParameters()?this.p_09.getParameterValue(t):(t-=this.p_09.getNumParameters())<this.p_10.getNumParameters()?this.p_10.getParameterValue(t):(t-=this.p_10.getNumParameters())<this.p_11.getNumParameters()?this.p_11.getParameterValue(t):(t-=this.p_11.getNumParameters())<this.p_12.getNumParameters()?this.p_12.getParameterValue(t):0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0+this.p_09.getNumParameters()+this.p_10.getNumParameters()+this.p_11.getNumParameters()+this.p_12.getNumParameters()}getParameterName(t){return(t-=0)<this.p_09.getNumParameters()?this.p_09.getParameterName(t):(t-=this.p_09.getNumParameters())<this.p_10.getNumParameters()?this.p_10.getParameterName(t):(t-=this.p_10.getNumParameters())<this.p_11.getNumParameters()?this.p_11.getParameterName(t):(t-=this.p_11.getNumParameters())<this.p_12.getNumParameters()?this.p_12.getParameterName(t):\"bogus\"}getParameterId(t){return(t-=0)<this.p_09.getNumParameters()?this.p_09.getParameterId(t):(t-=this.p_09.getNumParameters())<this.p_10.getNumParameters()?this.p_10.getParameterId(t):(t-=this.p_10.getNumParameters())<this.p_11.getNumParameters()?this.p_11.getParameterId(t):(t-=this.p_11.getNumParameters())<this.p_12.getNumParameters()?this.p_12.getParameterId(t):\"bogus\"}getParameterInfo(t,e){(t-=0)<this.p_09.getNumParameters()&&this.p_09.getParameterInfo(t,e),(t-=this.p_09.getNumParameters())<this.p_10.getNumParameters()&&this.p_10.getParameterInfo(t,e),(t-=this.p_10.getNumParameters())<this.p_11.getNumParameters()&&this.p_11.getParameterInfo(t,e),(t-=this.p_11.getNumParameters())<this.p_12.getNumParameters()&&this.p_12.getParameterInfo(t,e)}sendParameter(t){this.getPatcher().sendParameter(t+this.parameterOffset)}getParameterOffset(t){return t==this.p_09?0:t==this.p_10?0+this.p_09.getNumParameters():t==this.p_11?0+this.p_09.getNumParameters()+this.p_10.getNumParameters():t==this.p_12?0+this.p_09.getNumParameters()+this.p_10.getNumParameters()+this.p_11.getNumParameters():0}setParameterOffset(t){this.parameterOffset=t}applyStepsToNormalizedParameterValue(t,e){if(1==e)t>0&&(t=1);else{let a=1/(e-1);t=1*rnbo_fround(t/a*1/1)*a}return t}convertToNormalizedParameterValue(t,e){return(t-=0)<this.p_09.getNumParameters()?this.p_09.convertToNormalizedParameterValue(t,e):(t-=this.p_09.getNumParameters())<this.p_10.getNumParameters()?this.p_10.convertToNormalizedParameterValue(t,e):(t-=this.p_10.getNumParameters())<this.p_11.getNumParameters()?this.p_11.convertToNormalizedParameterValue(t,e):(t-=this.p_11.getNumParameters())<this.p_12.getNumParameters()?this.p_12.convertToNormalizedParameterValue(t,e):e}convertFromNormalizedParameterValue(t,e){return e=e<0?0:e>1?1:e,(t-=0)<this.p_09.getNumParameters()?this.p_09.convertFromNormalizedParameterValue(t,e):(t-=this.p_09.getNumParameters())<this.p_10.getNumParameters()?this.p_10.convertFromNormalizedParameterValue(t,e):(t-=this.p_10.getNumParameters())<this.p_11.getNumParameters()?this.p_11.convertFromNormalizedParameterValue(t,e):(t-=this.p_11.getNumParameters())<this.p_12.getNumParameters()?this.p_12.convertFromNormalizedParameterValue(t,e):e}constrainParameterValue(t,e){return(t-=0)<this.p_09.getNumParameters()?this.p_09.constrainParameterValue(t,e):(t-=this.p_09.getNumParameters())<this.p_10.getNumParameters()?this.p_10.constrainParameterValue(t,e):(t-=this.p_10.getNumParameters())<this.p_11.getNumParameters()?this.p_11.constrainParameterValue(t,e):(t-=this.p_11.getNumParameters())<this.p_12.getNumParameters()?this.p_12.constrainParameterValue(t,e):e}scheduleParamInit(t,e){this.getPatcher().scheduleParamInit(t+this.parameterOffset,e)}processClockEvent(t,e,a,r){switch(RNBO_UNUSED(r),RNBO_UNUSED(a),this.updateTime(t),e){case 1577528346:this.edge_05_onout_bang();break;case-1966461100:this.edge_05_offout_bang();break;case-2015609447:this.edge_06_onout_bang();break;case-407339627:this.edge_06_offout_bang();break;case-1313779944:this.edge_07_onout_bang();break;case 1151781846:this.edge_07_offout_bang();break;case-611950441:this.edge_08_onout_bang();break;case-1584063977:this.edge_08_offout_bang()}}processOutletAtCurrentTime(t,e,a){}processOutletEvent(t,e,a,r){this.updateTime(r),this.processOutletAtCurrentTime(t,e,a)}sendOutlet(t,e){this.getEngine().sendOutlet(this,t,e)}processNumMessage(t,e,a,r){switch(RNBO_UNUSED(e),this.updateTime(a),t){case TAG(\"polymetric_params\"):this.inport_06_value_number_set(r);break;case TAG(\"state\"):this.inport_07_value_number_set(r)}this.p_09.processNumMessage(t,e,a,r),this.p_10.processNumMessage(t,e,a,r),this.p_11.processNumMessage(t,e,a,r),this.p_12.processNumMessage(t,e,a,r)}processListMessage(t,e,a,r){switch(RNBO_UNUSED(e),this.updateTime(a),t){case TAG(\"polymetric_params\"):this.inport_06_value_list_set(r);break;case TAG(\"state\"):this.inport_07_value_list_set(r)}this.p_09.processListMessage(t,e,a,r),this.p_10.processListMessage(t,e,a,r),this.p_11.processListMessage(t,e,a,r),this.p_12.processListMessage(t,e,a,r)}processBangMessage(t,e,a){switch(RNBO_UNUSED(e),this.updateTime(a),t){case TAG(\"polymetric_params\"):this.inport_06_value_bang_bang();break;case TAG(\"state\"):this.inport_07_value_bang_bang()}this.p_09.processBangMessage(t,e,a),this.p_10.processBangMessage(t,e,a),this.p_11.processBangMessage(t,e,a),this.p_12.processBangMessage(t,e,a)}resolveTag(t){switch(t){case TAG(\"pips\"):return\"pips\";case TAG(\"\"):return\"\";case TAG(\"blip\"):return\"blip\";case TAG(\"polymetric_params\"):return\"polymetric_params\";case TAG(\"state\"):return\"state\"}var e=this.p_09.resolveTag(t);if(e)return e;var a=this.p_10.resolveTag(t);if(a)return a;var r=this.p_11.resolveTag(t);if(r)return r;var s=this.p_12.resolveTag(t);return s||null}getDataRef(t){return null}getNumDataRefs(){return 0}fillDataRef(t,e){}processDataViewUpdate(t,e){this.p_09.processDataViewUpdate(t,e),this.p_10.processDataViewUpdate(t,e),this.p_11.processDataViewUpdate(t,e),this.p_12.processDataViewUpdate(t,e)}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(t,e){this._engineInterface=t,this._parentPatcher=e}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_81{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.edge_09_setupDone=!1,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(t){return RNBO_UNUSED(t),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(t,e,a,r){}getNumMidiOutputPorts(){return 0}msToSamps(t,e){return t*e*.001}sampsToMs(t){return t*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 4}getNumOutputChannels(){return 1}setProbingTarget(t){this.setProbingIndex(-1)}setProbingIndex(t){}getProbingChannels(t){return RNBO_UNUSED(t),0}getIsMuted(){return this.isMuted}setIsMuted(t){this.isMuted=t}getPatcherSerial(){return 0}setState(){}processTempoEvent(t,e){}processTransportEvent(t,e){}processBeatTimeEvent(t,e){}onSampleRateChanged(t){}processTimeSignatureEvent(t,e,a){}setParameterValue(t,e,a){}processParameterEvent(t,e,a){this.setParameterValue(t,e,a)}processNormalizedParameterEvent(t,e,a){this.setParameterValueNormalized(t,e,a)}getParameterValue(t){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(t){return\"bogus\"}getParameterId(t){return\"bogus\"}getParameterInfo(t,e){}sendParameter(t){this.getPatcher().sendParameter(t+this.parameterOffset)}setParameterOffset(t){this.parameterOffset=t}applyStepsToNormalizedParameterValue(t,e){if(1==e)t>0&&(t=1);else{let a=1/(e-1);t=1*rnbo_fround(t/a*1/1)*a}return t}convertToNormalizedParameterValue(t,e){return e}convertFromNormalizedParameterValue(t,e){return e=e<0?0:e>1?1:e}constrainParameterValue(t,e){return e}scheduleParamInit(t,e){this.getPatcher().scheduleParamInit(t+this.parameterOffset,e)}processClockEvent(t,e,a,r){switch(RNBO_UNUSED(r),RNBO_UNUSED(a),this.updateTime(t),e){case-611950441:this.edge_09_onout_bang();break;case-1584063977:this.edge_09_offout_bang()}}processOutletAtCurrentTime(t,e,a){}processOutletEvent(t,e,a,r){this.updateTime(r),this.processOutletAtCurrentTime(t,e,a)}sendOutlet(t,e){this.getEngine().sendOutlet(this,t,e)}processNumMessage(t,e,a,r){switch(RNBO_UNUSED(e),this.updateTime(a),t){case TAG(\"chordfollow\"):this.inport_08_value_number_set(r);break;case TAG(\"state\"):this.inport_09_value_number_set(r)}}processListMessage(t,e,a,r){switch(RNBO_UNUSED(e),this.updateTime(a),t){case TAG(\"chordfollow\"):this.inport_08_value_list_set(r);break;case TAG(\"state\"):this.inport_09_value_list_set(r)}}processBangMessage(t,e,a){switch(RNBO_UNUSED(e),this.updateTime(a),t){case TAG(\"chordfollow\"):this.inport_08_value_bang_bang();break;case TAG(\"state\"):this.inport_09_value_bang_bang()}}resolveTag(t){switch(t){case TAG(\"blip\"):return\"blip\";case TAG(\"\"):return\"\";case TAG(\"chordfollow\"):return\"chordfollow\";case TAG(\"state\"):return\"state\"}return null}getDataRef(t){return null}getNumDataRefs(){return 0}fillDataRef(t,e){}processDataViewUpdate(t,e){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(t,e){this._engineInterface=t,this._parentPatcher=e}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_69{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(4),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.edge_10_setupDone=!1,this.gen_05_setupDone=!1,this.peek_tilde_05_buffer=0,this.ip_09_sigbuf=0,this.ip_09_setupDone=!1,this.latch_tilde_09_setupDone=!1,this.latch_tilde_10_setupDone=!1,this.ip_10_sigbuf=0,this.ip_10_setupDone=!1,this.data_137_buffer=0,this.data_137_setupDone=!1,this.data_138_buffer=0,this.data_138_setupDone=!1,this.data_139_buffer=0,this.data_139_setupDone=!1,this.data_140_buffer=0,this.data_140_setupDone=!1,this.data_141_buffer=0,this.data_141_setupDone=!1,this.data_142_buffer=0,this.data_142_setupDone=!1,this.data_143_buffer=0,this.data_143_setupDone=!1,this.data_144_buffer=0,this.data_144_setupDone=!1,this.data_145_buffer=0,this.data_145_setupDone=!1,this.data_146_buffer=0,this.data_146_setupDone=!1,this.data_147_buffer=0,this.data_147_setupDone=!1,this.data_148_buffer=0,this.data_148_setupDone=!1,this.data_149_buffer=0,this.data_149_setupDone=!1,this.data_150_buffer=0,this.data_150_setupDone=!1,this.data_151_buffer=0,this.data_151_setupDone=!1,this.data_152_buffer=0,this.data_152_setupDone=!1,this.data_153_buffer=0,this.data_153_setupDone=!1,this.data_154_buffer=0,this.data_154_setupDone=!1,this.data_155_buffer=0,this.data_155_setupDone=!1,this.data_156_buffer=0,this.data_156_setupDone=!1,this.data_157_buffer=0,this.data_157_setupDone=!1,this.data_158_buffer=0,this.data_158_setupDone=!1,this.data_159_buffer=0,this.data_159_setupDone=!1,this.data_160_buffer=0,this.data_160_setupDone=!1,this.data_161_buffer=0,this.data_161_setupDone=!1,this.data_162_buffer=0,this.data_162_setupDone=!1,this.data_163_buffer=0,this.data_163_setupDone=!1,this.data_164_buffer=0,this.data_164_setupDone=!1,this.data_165_buffer=0,this.data_165_setupDone=!1,this.data_166_buffer=0,this.data_166_setupDone=!1,this.data_167_buffer=0,this.data_167_setupDone=!1,this.data_168_buffer=0,this.data_168_setupDone=!1,this.data_169_buffer=0,this.data_169_setupDone=!1,this.data_170_buffer=0,this.data_170_setupDone=!1,this.peek_tilde_05_bufferobj=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(t){return RNBO_UNUSED(t),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(t,e,a,r){}getNumMidiOutputPorts(){return 0}msToSamps(t,e){return t*e*.001}sampsToMs(t){return t*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 1}getNumOutputChannels(){return 1}setProbingTarget(t){this.setProbingIndex(-1)}setProbingIndex(t){}getProbingChannels(t){return RNBO_UNUSED(t),0}getIsMuted(){return this.isMuted}setIsMuted(t){this.isMuted=t}getPatcherSerial(){return 0}setState(){}processTempoEvent(t,e){}processTransportEvent(t,e){}processBeatTimeEvent(t,e){}onSampleRateChanged(t){}processTimeSignatureEvent(t,e,a){}setParameterValue(t,e,a){}processParameterEvent(t,e,a){this.setParameterValue(t,e,a)}processNormalizedParameterEvent(t,e,a){this.setParameterValueNormalized(t,e,a)}getParameterValue(t){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(t){return\"bogus\"}getParameterId(t){return\"bogus\"}getParameterInfo(t,e){}sendParameter(t){this.getPatcher().sendParameter(t+this.parameterOffset)}setParameterOffset(t){this.parameterOffset=t}applyStepsToNormalizedParameterValue(t,e){if(1==e)t>0&&(t=1);else{let a=1/(e-1);t=1*rnbo_fround(t/a*1/1)*a}return t}convertToNormalizedParameterValue(t,e){return e}convertFromNormalizedParameterValue(t,e){return e=e<0?0:e>1?1:e}constrainParameterValue(t,e){return e}scheduleParamInit(t,e){this.getPatcher().scheduleParamInit(t+this.parameterOffset,e)}processClockEvent(t,e,a,r){switch(RNBO_UNUSED(r),RNBO_UNUSED(a),this.updateTime(t),e){case-611950441:this.edge_10_onout_bang();break;case-1584063977:this.edge_10_offout_bang()}}processOutletAtCurrentTime(t,e,a){}processOutletEvent(t,e,a,r){this.updateTime(r),this.processOutletAtCurrentTime(t,e,a)}sendOutlet(t,e){this.getEngine().sendOutlet(this,t,e)}processNumMessage(t,e,a,r){switch(RNBO_UNUSED(e),this.updateTime(a),t){case TAG(\"state\"):this.inport_10_value_number_set(r)}}processListMessage(t,e,a,r){switch(RNBO_UNUSED(e),this.updateTime(a),t){case TAG(\"state\"):this.inport_10_value_list_set(r)}}processBangMessage(t,e,a){switch(RNBO_UNUSED(e),this.updateTime(a),t){case TAG(\"state\"):this.inport_10_value_bang_bang()}}resolveTag(t){switch(t){case TAG(\"state\"):return\"state\";case TAG(\"\"):return\"\"}return null}getDataRef(t){return null}getNumDataRefs(){return 0}fillDataRef(t,e){}zeroDataRef(t){t.setZero()}processDataViewUpdate(t,e){this.updateTime(e),-1!=t&&6!=t&&5!=t&&4!=t&&14!=t&&13!=t&&12!=t&&11!=t&&22!=t&&21!=t&&20!=t&&19!=t&&29!=t&&28!=t&&27!=t&&26!=t&&33!=t&&32!=t&&31!=t&&30!=t&&3!=t&&2!=t&&1!=t&&0!=t&&10!=t&&9!=t&&8!=t&&7!=t&&18!=t&&17!=t&&16!=t&&15!=t&&25!=t&&24!=t&&23!=t||(this.peek_tilde_05_buffer=new Float32MultiBuffer(this.peek_tilde_05_bufferobj)),0==t&&(this.data_137_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_23),this.data_137_bufferUpdated()),1==t&&(this.data_138_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_22),this.data_138_bufferUpdated()),2==t&&(this.data_139_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_21),this.data_139_bufferUpdated()),3==t&&(this.data_140_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_20),this.data_140_bufferUpdated()),4==t&&(this.data_141_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_3),this.data_141_bufferUpdated()),5==t&&(this.data_142_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_2),this.data_142_bufferUpdated()),6==t&&(this.data_143_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_1),this.data_143_bufferUpdated()),7==t&&(this.data_144_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_27),this.data_144_bufferUpdated()),8==t&&(this.data_145_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_26),this.data_145_bufferUpdated()),9==t&&(this.data_146_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_25),this.data_146_bufferUpdated()),10==t&&(this.data_147_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_24),this.data_147_bufferUpdated()),11==t&&(this.data_148_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_7),this.data_148_bufferUpdated()),12==t&&(this.data_149_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_6),this.data_149_bufferUpdated()),13==t&&(this.data_150_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_5),this.data_150_bufferUpdated()),14==t&&(this.data_151_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_4),this.data_151_bufferUpdated()),15==t&&(this.data_152_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_31),this.data_152_bufferUpdated()),16==t&&(this.data_153_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_30),this.data_153_bufferUpdated()),17==t&&(this.data_154_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_29),this.data_154_bufferUpdated()),18==t&&(this.data_155_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_28),this.data_155_bufferUpdated()),19==t&&(this.data_156_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_11),this.data_156_bufferUpdated()),20==t&&(this.data_157_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_10),this.data_157_bufferUpdated()),21==t&&(this.data_158_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_9),this.data_158_bufferUpdated()),22==t&&(this.data_159_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_8),this.data_159_bufferUpdated()),23==t&&(this.data_160_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_34),this.data_160_bufferUpdated()),24==t&&(this.data_161_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_33),this.data_161_bufferUpdated()),25==t&&(this.data_162_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_32),this.data_162_bufferUpdated()),26==t&&(this.data_163_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_15),this.data_163_bufferUpdated()),27==t&&(this.data_164_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_14),this.data_164_bufferUpdated()),28==t&&(this.data_165_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_13),this.data_165_bufferUpdated()),29==t&&(this.data_166_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_12),this.data_166_bufferUpdated()),30==t&&(this.data_167_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_19),this.data_167_bufferUpdated()),31==t&&(this.data_168_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_18),this.data_168_bufferUpdated()),32==t&&(this.data_169_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_17),this.data_169_bufferUpdated()),33==t&&(this.data_170_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_16),this.data_170_bufferUpdated())}initialize(){this.peek_tilde_05_bufferobj=initMultiRef(this.getPatcher().getPatcher().b_dot_1,this.getPatcher().getPatcher().b_dot_2,this.getPatcher().getPatcher().b_dot_3,this.getPatcher().getPatcher().b_dot_4,this.getPatcher().getPatcher().b_dot_5,this.getPatcher().getPatcher().b_dot_6,this.getPatcher().getPatcher().b_dot_7,this.getPatcher().getPatcher().b_dot_8,this.getPatcher().getPatcher().b_dot_9,this.getPatcher().getPatcher().b_dot_10,this.getPatcher().getPatcher().b_dot_11,this.getPatcher().getPatcher().b_dot_12,this.getPatcher().getPatcher().b_dot_13,this.getPatcher().getPatcher().b_dot_14,this.getPatcher().getPatcher().b_dot_15,this.getPatcher().getPatcher().b_dot_16,this.getPatcher().getPatcher().b_dot_17,this.getPatcher().getPatcher().b_dot_18,this.getPatcher().getPatcher().b_dot_19,this.getPatcher().getPatcher().b_dot_20,this.getPatcher().getPatcher().b_dot_21,this.getPatcher().getPatcher().b_dot_22,this.getPatcher().getPatcher().b_dot_23,this.getPatcher().getPatcher().b_dot_24,this.getPatcher().getPatcher().b_dot_25,this.getPatcher().getPatcher().b_dot_26,this.getPatcher().getPatcher().b_dot_27,this.getPatcher().getPatcher().b_dot_28,this.getPatcher().getPatcher().b_dot_29,this.getPatcher().getPatcher().b_dot_30,this.getPatcher().getPatcher().b_dot_31,this.getPatcher().getPatcher().b_dot_32,this.getPatcher().getPatcher().b_dot_33,this.getPatcher().getPatcher().b_dot_34),this.assign_defaults(),this.setState(),this.peek_tilde_05_bufferobj.setIndex(-1),this.peek_tilde_05_buffer=new Float32MultiBuffer(this.peek_tilde_05_bufferobj),this.data_137_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_23),this.data_138_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_22),this.data_139_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_21),this.data_140_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_20),this.data_141_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_3),this.data_142_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_2),this.data_143_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_1),this.data_144_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_27),this.data_145_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_26),this.data_146_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_25),this.data_147_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_24),this.data_148_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_7),this.data_149_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_6),this.data_150_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_5),this.data_151_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_4),this.data_152_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_31),this.data_153_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_30),this.data_154_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_29),this.data_155_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_28),this.data_156_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_11),this.data_157_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_10),this.data_158_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_9),this.data_159_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_8),this.data_160_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_34),this.data_161_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_33),this.data_162_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_32),this.data_163_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_15),this.data_164_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_14),this.data_165_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_13),this.data_166_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_12),this.data_167_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_19),this.data_168_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_18),this.data_169_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_17),this.data_170_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_16)}assign_defaults(){}setEngineAndPatcher(t,e){this._engineInterface=t,this._parentPatcher=e}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_70{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(t){return RNBO_UNUSED(t),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(t,e,a,r){}getNumMidiOutputPorts(){return 0}msToSamps(t,e){return t*e*.001}sampsToMs(t){return t*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(t){this.setProbingIndex(-1)}setProbingIndex(t){}getProbingChannels(t){return RNBO_UNUSED(t),0}getIsMuted(){return this.isMuted}setIsMuted(t){this.isMuted=t}getPatcherSerial(){return 0}setState(){}processTempoEvent(t,e){}processTransportEvent(t,e){}processBeatTimeEvent(t,e){}onSampleRateChanged(t){}processTimeSignatureEvent(t,e,a){}setParameterValue(t,e,a){}processParameterEvent(t,e,a){this.setParameterValue(t,e,a)}processNormalizedParameterEvent(t,e,a){this.setParameterValueNormalized(t,e,a)}getParameterValue(t){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(t){return\"bogus\"}getParameterId(t){return\"bogus\"}getParameterInfo(t,e){}sendParameter(t){this.getPatcher().sendParameter(t+this.parameterOffset)}setParameterOffset(t){this.parameterOffset=t}applyStepsToNormalizedParameterValue(t,e){if(1==e)t>0&&(t=1);else{let a=1/(e-1);t=1*rnbo_fround(t/a*1/1)*a}return t}convertToNormalizedParameterValue(t,e){return e}convertFromNormalizedParameterValue(t,e){return e=e<0?0:e>1?1:e}constrainParameterValue(t,e){return e}scheduleParamInit(t,e){this.getPatcher().scheduleParamInit(t+this.parameterOffset,e)}processClockEvent(t,e,a,r){}processOutletAtCurrentTime(t,e,a){}processOutletEvent(t,e,a,r){this.updateTime(r),this.processOutletAtCurrentTime(t,e,a)}sendOutlet(t,e){this.getEngine().sendOutlet(this,t,e)}processNumMessage(t,e,a,r){}processListMessage(t,e,a,r){}processBangMessage(t,e,a){}resolveTag(t){return null}getDataRef(t){return null}getNumDataRefs(){return 0}fillDataRef(t,e){}processDataViewUpdate(t,e){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(t,e){this._engineInterface=t,this._parentPatcher=e}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_71{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(t){return stringCompare(t,\"message_obj-5/bangval\")?stringCompare(t,\"message_obj-7/bangval\")?stringCompare(t,\"message_obj-20/bangval\")?stringCompare(t,\"message_obj-24/bangval\")?stringCompare(t,\"message_obj-26/bangval\")?stringCompare(t,\"message_obj-27/bangval\")?stringCompare(t,\"message_obj-28/bangval\")?INVALID_INDEX:6:5:4:3:2:1:0}getNumMidiInputPorts(){return 0}processMidiEvent(t,e,a,r){}getNumMidiOutputPorts(){return 0}msToSamps(t,e){return t*e*.001}sampsToMs(t){return t*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(t){this.setProbingIndex(-1)}setProbingIndex(t){}getProbingChannels(t){return RNBO_UNUSED(t),0}getIsMuted(){return this.isMuted}setIsMuted(t){this.isMuted=t}getPatcherSerial(){return 0}setState(){}processTempoEvent(t,e){}processTransportEvent(t,e){}processBeatTimeEvent(t,e){}onSampleRateChanged(t){}processTimeSignatureEvent(t,e,a){}setParameterValue(t,e,a){switch(RNBO_UNUSED(e),this.updateTime(a),t){case 0:this.message_01_bangval_bang();break;case 1:this.message_02_bangval_bang();break;case 2:this.message_03_bangval_bang();break;case 3:this.message_04_bangval_bang();break;case 4:this.message_05_bangval_bang();break;case 5:this.message_06_bangval_bang();break;case 6:this.message_07_bangval_bang()}}processParameterEvent(t,e,a){this.setParameterValue(t,e,a)}processNormalizedParameterEvent(t,e,a){this.setParameterValueNormalized(t,e,a)}getParameterValue(t){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 7}getParameterName(t){switch(t){case 0:return\"message_01_bangval\";case 1:return\"message_02_bangval\";case 2:return\"message_03_bangval\";case 3:return\"message_04_bangval\";case 4:return\"message_05_bangval\";case 5:return\"message_06_bangval\";case 6:return\"message_07_bangval\";default:return\"bogus\"}}getParameterId(t){switch(t){case 0:return\"p_obj-17/p_obj-29/message_obj-5/bangval\";case 1:return\"p_obj-17/p_obj-29/message_obj-7/bangval\";case 2:return\"p_obj-17/p_obj-29/message_obj-20/bangval\";case 3:return\"p_obj-17/p_obj-29/message_obj-24/bangval\";case 4:return\"p_obj-17/p_obj-29/message_obj-26/bangval\";case 5:return\"p_obj-17/p_obj-29/message_obj-27/bangval\";case 6:return\"p_obj-17/p_obj-29/message_obj-28/bangval\";default:return\"bogus\"}}getParameterInfo(t,e){switch(t){case 0:case 1:case 2:case 3:case 4:case 5:case 6:e.type=ParameterTypeBang,e.initialValue=0,e.min=0,e.max=1,e.exponent=1,e.steps=0,e.debug=!1,e.saveable=!0,e.transmittable=!0,e.initialized=!1,e.visible=!1,e.displayName=\"\",e.unit=\"\",e.ioType=IOTypeUndefined,e.signalIndex=INVALID_INDEX}}sendParameter(t){this.getPatcher().sendParameter(t+this.parameterOffset)}setParameterOffset(t){this.parameterOffset=t}applyStepsToNormalizedParameterValue(t,e){if(1==e)t>0&&(t=1);else{let a=1/(e-1);t=1*rnbo_fround(t/a*1/1)*a}return t}convertToNormalizedParameterValue(t,e){return e}convertFromNormalizedParameterValue(t,e){return e=e<0?0:e>1?1:e}constrainParameterValue(t,e){return e}scheduleParamInit(t,e){this.getPatcher().scheduleParamInit(t+this.parameterOffset,e)}processClockEvent(t,e,a,r){}processOutletAtCurrentTime(t,e,a){}processOutletEvent(t,e,a,r){this.updateTime(r),this.processOutletAtCurrentTime(t,e,a)}sendOutlet(t,e){this.getEngine().sendOutlet(this,t,e)}processNumMessage(t,e,a,r){}processListMessage(t,e,a,r){}processBangMessage(t,e,a){}resolveTag(t){return null}getDataRef(t){return null}getNumDataRefs(){return 0}fillDataRef(t,e){}processDataViewUpdate(t,e){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(t,e){this._engineInterface=t,this._parentPatcher=e}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_82{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0,this.p_13=new Array,this.p_14=new Array,this.p_15=new Array}getParameterIndexForID(t){return RNBO_UNUSED(t),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(t,e,a,r){}getNumMidiOutputPorts(){return 0}msToSamps(t,e){return t*e*.001}sampsToMs(t){return t*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 1}getNumOutputChannels(){return 1}setProbingTarget(t){this.setProbingIndex(-1)}setProbingIndex(t){}getProbingChannels(t){return RNBO_UNUSED(t),0}getIsMuted(){return this.isMuted}setIsMuted(t){this.isMuted=t}getPatcherSerial(){return 0}setState(){this.p_13=new RNBOSubpatcher_69,this.p_13.setEngineAndPatcher(this.getEngine(),this),this.p_13.initialize(),this.p_13.setParameterOffset(this.getParameterOffset(this.p_13)),this.p_14=new RNBOSubpatcher_70,this.p_14.setEngineAndPatcher(this.getEngine(),this),this.p_14.initialize(),this.p_14.setParameterOffset(this.getParameterOffset(this.p_14)),this.p_15=new RNBOSubpatcher_71,this.p_15.setEngineAndPatcher(this.getEngine(),this),this.p_15.initialize(),this.p_15.setParameterOffset(this.getParameterOffset(this.p_15))}processTempoEvent(t,e){this.updateTime(t),this.p_13.processTempoEvent(t,e),this.p_14.processTempoEvent(t,e),this.p_15.processTempoEvent(t,e)}processTransportEvent(t,e){this.updateTime(t),this.p_13.processTransportEvent(t,e),this.p_14.processTransportEvent(t,e),this.p_15.processTransportEvent(t,e)}processBeatTimeEvent(t,e){this.updateTime(t),this.p_13.processBeatTimeEvent(t,e),this.p_14.processBeatTimeEvent(t,e),this.p_15.processBeatTimeEvent(t,e)}onSampleRateChanged(t){}processTimeSignatureEvent(t,e,a){this.updateTime(t),this.p_13.processTimeSignatureEvent(t,e,a),this.p_14.processTimeSignatureEvent(t,e,a),this.p_15.processTimeSignatureEvent(t,e,a)}setParameterValue(t,e,a){RNBO_UNUSED(e),this.updateTime(a),(t-=0)<this.p_13.getNumParameters()&&this.p_13.setParameterValue(t,e,a),(t-=this.p_13.getNumParameters())<this.p_14.getNumParameters()&&this.p_14.setParameterValue(t,e,a),(t-=this.p_14.getNumParameters())<this.p_15.getNumParameters()&&this.p_15.setParameterValue(t,e,a)}processParameterEvent(t,e,a){this.setParameterValue(t,e,a)}processNormalizedParameterEvent(t,e,a){this.setParameterValueNormalized(t,e,a)}getParameterValue(t){return(t-=0)<this.p_13.getNumParameters()?this.p_13.getParameterValue(t):(t-=this.p_13.getNumParameters())<this.p_14.getNumParameters()?this.p_14.getParameterValue(t):(t-=this.p_14.getNumParameters())<this.p_15.getNumParameters()?this.p_15.getParameterValue(t):0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0+this.p_13.getNumParameters()+this.p_14.getNumParameters()+this.p_15.getNumParameters()}getParameterName(t){return(t-=0)<this.p_13.getNumParameters()?this.p_13.getParameterName(t):(t-=this.p_13.getNumParameters())<this.p_14.getNumParameters()?this.p_14.getParameterName(t):(t-=this.p_14.getNumParameters())<this.p_15.getNumParameters()?this.p_15.getParameterName(t):\"bogus\"}getParameterId(t){return(t-=0)<this.p_13.getNumParameters()?this.p_13.getParameterId(t):(t-=this.p_13.getNumParameters())<this.p_14.getNumParameters()?this.p_14.getParameterId(t):(t-=this.p_14.getNumParameters())<this.p_15.getNumParameters()?this.p_15.getParameterId(t):\"bogus\"}getParameterInfo(t,e){(t-=0)<this.p_13.getNumParameters()&&this.p_13.getParameterInfo(t,e),(t-=this.p_13.getNumParameters())<this.p_14.getNumParameters()&&this.p_14.getParameterInfo(t,e),(t-=this.p_14.getNumParameters())<this.p_15.getNumParameters()&&this.p_15.getParameterInfo(t,e)}sendParameter(t){this.getPatcher().sendParameter(t+this.parameterOffset)}getParameterOffset(t){return t==this.p_13?0:t==this.p_14?0+this.p_13.getNumParameters():t==this.p_15?0+this.p_13.getNumParameters()+this.p_14.getNumParameters():0}setParameterOffset(t){this.parameterOffset=t}applyStepsToNormalizedParameterValue(t,e){if(1==e)t>0&&(t=1);else{let a=1/(e-1);t=1*rnbo_fround(t/a*1/1)*a}return t}convertToNormalizedParameterValue(t,e){return(t-=0)<this.p_13.getNumParameters()?this.p_13.convertToNormalizedParameterValue(t,e):(t-=this.p_13.getNumParameters())<this.p_14.getNumParameters()?this.p_14.convertToNormalizedParameterValue(t,e):(t-=this.p_14.getNumParameters())<this.p_15.getNumParameters()?this.p_15.convertToNormalizedParameterValue(t,e):e}convertFromNormalizedParameterValue(t,e){return e=e<0?0:e>1?1:e,(t-=0)<this.p_13.getNumParameters()?this.p_13.convertFromNormalizedParameterValue(t,e):(t-=this.p_13.getNumParameters())<this.p_14.getNumParameters()?this.p_14.convertFromNormalizedParameterValue(t,e):(t-=this.p_14.getNumParameters())<this.p_15.getNumParameters()?this.p_15.convertFromNormalizedParameterValue(t,e):e}constrainParameterValue(t,e){return(t-=0)<this.p_13.getNumParameters()?this.p_13.constrainParameterValue(t,e):(t-=this.p_13.getNumParameters())<this.p_14.getNumParameters()?this.p_14.constrainParameterValue(t,e):(t-=this.p_14.getNumParameters())<this.p_15.getNumParameters()?this.p_15.constrainParameterValue(t,e):e}scheduleParamInit(t,e){this.getPatcher().scheduleParamInit(t+this.parameterOffset,e)}processClockEvent(t,e,a,r){}processOutletAtCurrentTime(t,e,a){}processOutletEvent(t,e,a,r){this.updateTime(r),this.processOutletAtCurrentTime(t,e,a)}sendOutlet(t,e){this.getEngine().sendOutlet(this,t,e)}processNumMessage(t,e,a,r){switch(RNBO_UNUSED(e),this.updateTime(a),t){case TAG(\"chordsampler\"):this.inport_11_value_number_set(r);break;case TAG(\"chordscale\"):this.inport_12_value_number_set(r)}this.p_13.processNumMessage(t,e,a,r),this.p_14.processNumMessage(t,e,a,r),this.p_15.processNumMessage(t,e,a,r)}processListMessage(t,e,a,r){switch(RNBO_UNUSED(e),this.updateTime(a),t){case TAG(\"chordsampler\"):this.inport_11_value_list_set(r);break;case TAG(\"chordscale\"):this.inport_12_value_list_set(r)}this.p_13.processListMessage(t,e,a,r),this.p_14.processListMessage(t,e,a,r),this.p_15.processListMessage(t,e,a,r)}processBangMessage(t,e,a){switch(RNBO_UNUSED(e),this.updateTime(a),t){case TAG(\"chordsampler\"):this.inport_11_value_bang_bang();break;case TAG(\"chordscale\"):this.inport_12_value_bang_bang()}this.p_13.processBangMessage(t,e,a),this.p_14.processBangMessage(t,e,a),this.p_15.processBangMessage(t,e,a)}resolveTag(t){switch(t){case TAG(\"debug_chord\"):return\"debug_chord\";case TAG(\"\"):return\"\";case TAG(\"chordsampler\"):return\"chordsampler\";case TAG(\"chordscale\"):return\"chordscale\"}var e=this.p_13.resolveTag(t);if(e)return e;var a=this.p_14.resolveTag(t);if(a)return a;var r=this.p_15.resolveTag(t);return r||null}getDataRef(t){return null}getNumDataRefs(){return 0}fillDataRef(t,e){}processDataViewUpdate(t,e){this.p_13.processDataViewUpdate(t,e),this.p_14.processDataViewUpdate(t,e),this.p_15.processDataViewUpdate(t,e)}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(t,e){this._engineInterface=t,this._parentPatcher=e}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_72{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(2),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(t){return RNBO_UNUSED(t),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(t,e,a,r){}getNumMidiOutputPorts(){return 0}msToSamps(t,e){return t*e*.001}sampsToMs(t){return t*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 1}setProbingTarget(t){this.setProbingIndex(-1)}setProbingIndex(t){}getProbingChannels(t){return RNBO_UNUSED(t),0}getIsMuted(){return this.isMuted}setIsMuted(t){this.isMuted=t}getPatcherSerial(){return 0}setState(){}processTempoEvent(t,e){}processTransportEvent(t,e){}processBeatTimeEvent(t,e){}onSampleRateChanged(t){}processTimeSignatureEvent(t,e,a){}setParameterValue(t,e,a){}processParameterEvent(t,e,a){this.setParameterValue(t,e,a)}processNormalizedParameterEvent(t,e,a){this.setParameterValueNormalized(t,e,a)}getParameterValue(t){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(t){return\"bogus\"}getParameterId(t){return\"bogus\"}getParameterInfo(t,e){}sendParameter(t){this.getPatcher().sendParameter(t+this.parameterOffset)}setParameterOffset(t){this.parameterOffset=t}applyStepsToNormalizedParameterValue(t,e){if(1==e)t>0&&(t=1);else{let a=1/(e-1);t=1*rnbo_fround(t/a*1/1)*a}return t}convertToNormalizedParameterValue(t,e){return e}convertFromNormalizedParameterValue(t,e){return e=e<0?0:e>1?1:e}constrainParameterValue(t,e){return e}scheduleParamInit(t,e){this.getPatcher().scheduleParamInit(t+this.parameterOffset,e)}processClockEvent(t,e,a,r){switch(RNBO_UNUSED(r),RNBO_UNUSED(a),this.updateTime(t),e){case 760652352:this.line_05_target_bang()}}processOutletAtCurrentTime(t,e,a){}processOutletEvent(t,e,a,r){this.updateTime(r),this.processOutletAtCurrentTime(t,e,a)}sendOutlet(t,e){this.getEngine().sendOutlet(this,t,e)}processNumMessage(t,e,a,r){}processListMessage(t,e,a,r){}processBangMessage(t,e,a){}resolveTag(t){return null}getDataRef(t){return null}getNumDataRefs(){return 0}fillDataRef(t,e){}processDataViewUpdate(t,e){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(t,e){this._engineInterface=t,this._parentPatcher=e}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_74{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(2),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.click_05_buf=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0,this.p_16=new Array}getParameterIndexForID(t){return stringCompare(t,\"toggle_obj-9/value\")?INVALID_INDEX:0}getNumMidiInputPorts(){return 0}processMidiEvent(t,e,a,r){}getNumMidiOutputPorts(){return 0}msToSamps(t,e){return t*e*.001}sampsToMs(t){return t*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 1}setProbingTarget(t){this.setProbingIndex(-1)}setProbingIndex(t){}getProbingChannels(t){return RNBO_UNUSED(t),0}getIsMuted(){return this.isMuted}setIsMuted(t){this.isMuted=t}getPatcherSerial(){return 0}setState(){this.p_16=new RNBOSubpatcher_72,this.p_16.setEngineAndPatcher(this.getEngine(),this),this.p_16.initialize(),this.p_16.setParameterOffset(this.getParameterOffset(this.p_16))}processTempoEvent(t,e){this.updateTime(t),this.p_16.processTempoEvent(t,e)}processTransportEvent(t,e){this.updateTime(t),this.p_16.processTransportEvent(t,e)}processBeatTimeEvent(t,e){this.updateTime(t),this.p_16.processBeatTimeEvent(t,e)}onSampleRateChanged(t){}processTimeSignatureEvent(t,e,a){this.updateTime(t),this.p_16.processTimeSignatureEvent(t,e,a)}setParameterValue(t,e,a){switch(this.updateTime(a),t){case 0:this.toggle_01_value_set(e);break;default:(t-=1)<this.p_16.getNumParameters()&&this.p_16.setParameterValue(t,e,a)}}processParameterEvent(t,e,a){this.setParameterValue(t,e,a)}processNormalizedParameterEvent(t,e,a){this.setParameterValueNormalized(t,e,a)}getParameterValue(t){switch(t){case 0:return this.toggle_01_value;default:return(t-=1)<this.p_16.getNumParameters()?this.p_16.getParameterValue(t):0}}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 1+this.p_16.getNumParameters()}getParameterName(t){switch(t){case 0:return\"toggle_01_value\";default:return(t-=1)<this.p_16.getNumParameters()?this.p_16.getParameterName(t):\"bogus\"}}getParameterId(t){switch(t){case 0:return\"p_obj-1/p_obj-2/toggle_obj-9/value\";default:return(t-=1)<this.p_16.getNumParameters()?this.p_16.getParameterId(t):\"bogus\"}}getParameterInfo(t,e){switch(t){case 0:e.type=ParameterTypeNumber,e.initialValue=0,e.min=0,e.max=1,e.exponent=1,e.steps=0,e.debug=!1,e.saveable=!0,e.transmittable=!0,e.initialized=!0,e.visible=!1,e.displayName=\"\",e.unit=\"\",e.ioType=IOTypeUndefined,e.signalIndex=INVALID_INDEX;break;default:(t-=1)<this.p_16.getNumParameters()&&this.p_16.getParameterInfo(t,e)}}sendParameter(t){this.getPatcher().sendParameter(t+this.parameterOffset)}getParameterOffset(t){return t==this.p_16?1:0}setParameterOffset(t){this.parameterOffset=t}applyStepsToNormalizedParameterValue(t,e){if(1==e)t>0&&(t=1);else{let a=1/(e-1);t=1*rnbo_fround(t/a*1/1)*a}return t}convertToNormalizedParameterValue(t,e){switch(t){case 0:return((e=e<0?0:e>1?1:e)-0)/1;default:return(t-=1)<this.p_16.getNumParameters()?this.p_16.convertToNormalizedParameterValue(t,e):e}}convertFromNormalizedParameterValue(t,e){switch(e=e<0?0:e>1?1:e,t){case 0:return 0+1*(e=e<0?0:e>1?1:e);default:return(t-=1)<this.p_16.getNumParameters()?this.p_16.convertFromNormalizedParameterValue(t,e):e}}constrainParameterValue(t,e){return(t-=1)<this.p_16.getNumParameters()?this.p_16.constrainParameterValue(t,e):e}scheduleParamInit(t,e){this.getPatcher().scheduleParamInit(t+this.parameterOffset,e)}processClockEvent(t,e,a,r){}processOutletAtCurrentTime(t,e,a){}processOutletEvent(t,e,a,r){this.updateTime(r),this.processOutletAtCurrentTime(t,e,a)}sendOutlet(t,e){this.getEngine().sendOutlet(this,t,e)}processNumMessage(t,e,a,r){RNBO_UNUSED(e),this.updateTime(a),this.p_16.processNumMessage(t,e,a,r)}processListMessage(t,e,a,r){RNBO_UNUSED(e),this.updateTime(a),this.p_16.processListMessage(t,e,a,r)}processBangMessage(t,e,a){RNBO_UNUSED(e),this.updateTime(a),this.p_16.processBangMessage(t,e,a)}resolveTag(t){var e=this.p_16.resolveTag(t);return e||null}getDataRef(t){return null}getNumDataRefs(){return 0}fillDataRef(t,e){}processDataViewUpdate(t,e){this.p_16.processDataViewUpdate(t,e)}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(t,e){this._engineInterface=t,this._parentPatcher=e}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_73{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(2),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(t){return RNBO_UNUSED(t),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(t,e,a,r){}getNumMidiOutputPorts(){return 0}msToSamps(t,e){return t*e*.001}sampsToMs(t){return t*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 1}setProbingTarget(t){this.setProbingIndex(-1)}setProbingIndex(t){}getProbingChannels(t){return RNBO_UNUSED(t),0}getIsMuted(){return this.isMuted}setIsMuted(t){this.isMuted=t}getPatcherSerial(){return 0}setState(){}processTempoEvent(t,e){}processTransportEvent(t,e){}processBeatTimeEvent(t,e){}onSampleRateChanged(t){}processTimeSignatureEvent(t,e,a){}setParameterValue(t,e,a){}processParameterEvent(t,e,a){this.setParameterValue(t,e,a)}processNormalizedParameterEvent(t,e,a){this.setParameterValueNormalized(t,e,a)}getParameterValue(t){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(t){return\"bogus\"}getParameterId(t){return\"bogus\"}getParameterInfo(t,e){}sendParameter(t){this.getPatcher().sendParameter(t+this.parameterOffset)}setParameterOffset(t){this.parameterOffset=t}applyStepsToNormalizedParameterValue(t,e){if(1==e)t>0&&(t=1);else{let a=1/(e-1);t=1*rnbo_fround(t/a*1/1)*a}return t}convertToNormalizedParameterValue(t,e){return e}convertFromNormalizedParameterValue(t,e){return e=e<0?0:e>1?1:e}constrainParameterValue(t,e){return e}scheduleParamInit(t,e){this.getPatcher().scheduleParamInit(t+this.parameterOffset,e)}processClockEvent(t,e,a,r){switch(RNBO_UNUSED(r),RNBO_UNUSED(a),this.updateTime(t),e){case 760652352:this.line_06_target_bang()}}processOutletAtCurrentTime(t,e,a){}processOutletEvent(t,e,a,r){this.updateTime(r),this.processOutletAtCurrentTime(t,e,a)}sendOutlet(t,e){this.getEngine().sendOutlet(this,t,e)}processNumMessage(t,e,a,r){}processListMessage(t,e,a,r){}processBangMessage(t,e,a){}resolveTag(t){return null}getDataRef(t){return null}getNumDataRefs(){return 0}fillDataRef(t,e){}processDataViewUpdate(t,e){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(t,e){this._engineInterface=t,this._parentPatcher=e}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_75{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(2),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.click_06_buf=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0,this.p_17=new Array}getParameterIndexForID(t){return stringCompare(t,\"toggle_obj-9/value\")?INVALID_INDEX:0}getNumMidiInputPorts(){return 0}processMidiEvent(t,e,a,r){}getNumMidiOutputPorts(){return 0}msToSamps(t,e){return t*e*.001}sampsToMs(t){return t*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 1}setProbingTarget(t){this.setProbingIndex(-1)}setProbingIndex(t){}getProbingChannels(t){return RNBO_UNUSED(t),0}getIsMuted(){return this.isMuted}setIsMuted(t){this.isMuted=t}getPatcherSerial(){return 0}setState(){this.p_17=new RNBOSubpatcher_73,this.p_17.setEngineAndPatcher(this.getEngine(),this),this.p_17.initialize(),this.p_17.setParameterOffset(this.getParameterOffset(this.p_17))}processTempoEvent(t,e){this.updateTime(t),this.p_17.processTempoEvent(t,e)}processTransportEvent(t,e){this.updateTime(t),this.p_17.processTransportEvent(t,e)}processBeatTimeEvent(t,e){this.updateTime(t),this.p_17.processBeatTimeEvent(t,e)}onSampleRateChanged(t){}processTimeSignatureEvent(t,e,a){this.updateTime(t),this.p_17.processTimeSignatureEvent(t,e,a)}setParameterValue(t,e,a){switch(this.updateTime(a),t){case 0:this.toggle_02_value_set(e);break;default:(t-=1)<this.p_17.getNumParameters()&&this.p_17.setParameterValue(t,e,a)}}processParameterEvent(t,e,a){this.setParameterValue(t,e,a)}processNormalizedParameterEvent(t,e,a){this.setParameterValueNormalized(t,e,a)}getParameterValue(t){switch(t){case 0:return this.toggle_02_value;default:return(t-=1)<this.p_17.getNumParameters()?this.p_17.getParameterValue(t):0}}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 1+this.p_17.getNumParameters()}getParameterName(t){switch(t){case 0:return\"toggle_02_value\";default:return(t-=1)<this.p_17.getNumParameters()?this.p_17.getParameterName(t):\"bogus\"}}getParameterId(t){switch(t){case 0:return\"p_obj-1/p_obj-12/toggle_obj-9/value\";default:return(t-=1)<this.p_17.getNumParameters()?this.p_17.getParameterId(t):\"bogus\"}}getParameterInfo(t,e){switch(t){case 0:e.type=ParameterTypeNumber,e.initialValue=0,e.min=0,e.max=1,e.exponent=1,e.steps=0,e.debug=!1,e.saveable=!0,e.transmittable=!0,e.initialized=!0,e.visible=!1,e.displayName=\"\",e.unit=\"\",e.ioType=IOTypeUndefined,e.signalIndex=INVALID_INDEX;break;default:(t-=1)<this.p_17.getNumParameters()&&this.p_17.getParameterInfo(t,e)}}sendParameter(t){this.getPatcher().sendParameter(t+this.parameterOffset)}getParameterOffset(t){return t==this.p_17?1:0}setParameterOffset(t){this.parameterOffset=t}applyStepsToNormalizedParameterValue(t,e){if(1==e)t>0&&(t=1);else{let a=1/(e-1);t=1*rnbo_fround(t/a*1/1)*a}return t}convertToNormalizedParameterValue(t,e){switch(t){case 0:return((e=e<0?0:e>1?1:e)-0)/1;default:return(t-=1)<this.p_17.getNumParameters()?this.p_17.convertToNormalizedParameterValue(t,e):e}}convertFromNormalizedParameterValue(t,e){switch(e=e<0?0:e>1?1:e,t){case 0:return 0+1*(e=e<0?0:e>1?1:e);default:return(t-=1)<this.p_17.getNumParameters()?this.p_17.convertFromNormalizedParameterValue(t,e):e}}constrainParameterValue(t,e){return(t-=1)<this.p_17.getNumParameters()?this.p_17.constrainParameterValue(t,e):e}scheduleParamInit(t,e){this.getPatcher().scheduleParamInit(t+this.parameterOffset,e)}processClockEvent(t,e,a,r){}processOutletAtCurrentTime(t,e,a){}processOutletEvent(t,e,a,r){this.updateTime(r),this.processOutletAtCurrentTime(t,e,a)}sendOutlet(t,e){this.getEngine().sendOutlet(this,t,e)}processNumMessage(t,e,a,r){RNBO_UNUSED(e),this.updateTime(a),this.p_17.processNumMessage(t,e,a,r)}processListMessage(t,e,a,r){RNBO_UNUSED(e),this.updateTime(a),this.p_17.processListMessage(t,e,a,r)}processBangMessage(t,e,a){RNBO_UNUSED(e),this.updateTime(a),this.p_17.processBangMessage(t,e,a)}resolveTag(t){var e=this.p_17.resolveTag(t);return e||null}getDataRef(t){return null}getNumDataRefs(){return 0}fillDataRef(t,e){}processDataViewUpdate(t,e){this.p_17.processDataViewUpdate(t,e)}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(t,e){this._engineInterface=t,this._parentPatcher=e}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_83{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(1),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.edge_11_setupDone=!1,this.edge_12_setupDone=!1,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0,this.p_18=new Array,this.p_19=new Array}getParameterIndexForID(t){return RNBO_UNUSED(t),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(t,e,a,r){}getNumMidiOutputPorts(){return 0}msToSamps(t,e){return t*e*.001}sampsToMs(t){return t*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 2}setProbingTarget(t){this.setProbingIndex(-1)}setProbingIndex(t){}getProbingChannels(t){return RNBO_UNUSED(t),0}getIsMuted(){return this.isMuted}setIsMuted(t){this.isMuted=t}getPatcherSerial(){return 0}setState(){this.p_18=new RNBOSubpatcher_74,this.p_18.setEngineAndPatcher(this.getEngine(),this),this.p_18.initialize(),this.p_18.setParameterOffset(this.getParameterOffset(this.p_18)),this.p_19=new RNBOSubpatcher_75,this.p_19.setEngineAndPatcher(this.getEngine(),this),this.p_19.initialize(),this.p_19.setParameterOffset(this.getParameterOffset(this.p_19))}processTempoEvent(t,e){this.updateTime(t),this.p_18.processTempoEvent(t,e),this.p_19.processTempoEvent(t,e)}processTransportEvent(t,e){this.updateTime(t),this.p_18.processTransportEvent(t,e),this.p_19.processTransportEvent(t,e)}processBeatTimeEvent(t,e){this.updateTime(t),this.p_18.processBeatTimeEvent(t,e),this.p_19.processBeatTimeEvent(t,e)}onSampleRateChanged(t){}processTimeSignatureEvent(t,e,a){this.updateTime(t),this.p_18.processTimeSignatureEvent(t,e,a),this.p_19.processTimeSignatureEvent(t,e,a)}setParameterValue(t,e,a){RNBO_UNUSED(e),this.updateTime(a),(t-=0)<this.p_18.getNumParameters()&&this.p_18.setParameterValue(t,e,a),(t-=this.p_18.getNumParameters())<this.p_19.getNumParameters()&&this.p_19.setParameterValue(t,e,a)}processParameterEvent(t,e,a){this.setParameterValue(t,e,a)}processNormalizedParameterEvent(t,e,a){this.setParameterValueNormalized(t,e,a)}getParameterValue(t){return(t-=0)<this.p_18.getNumParameters()?this.p_18.getParameterValue(t):(t-=this.p_18.getNumParameters())<this.p_19.getNumParameters()?this.p_19.getParameterValue(t):0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0+this.p_18.getNumParameters()+this.p_19.getNumParameters()}getParameterName(t){return(t-=0)<this.p_18.getNumParameters()?this.p_18.getParameterName(t):(t-=this.p_18.getNumParameters())<this.p_19.getNumParameters()?this.p_19.getParameterName(t):\"bogus\"}getParameterId(t){return(t-=0)<this.p_18.getNumParameters()?this.p_18.getParameterId(t):(t-=this.p_18.getNumParameters())<this.p_19.getNumParameters()?this.p_19.getParameterId(t):\"bogus\"}getParameterInfo(t,e){(t-=0)<this.p_18.getNumParameters()&&this.p_18.getParameterInfo(t,e),(t-=this.p_18.getNumParameters())<this.p_19.getNumParameters()&&this.p_19.getParameterInfo(t,e)}sendParameter(t){this.getPatcher().sendParameter(t+this.parameterOffset)}getParameterOffset(t){return t==this.p_18?0:t==this.p_19?0+this.p_18.getNumParameters():0}setParameterOffset(t){this.parameterOffset=t}applyStepsToNormalizedParameterValue(t,e){if(1==e)t>0&&(t=1);else{let a=1/(e-1);t=1*rnbo_fround(t/a*1/1)*a}return t}convertToNormalizedParameterValue(t,e){return(t-=0)<this.p_18.getNumParameters()?this.p_18.convertToNormalizedParameterValue(t,e):(t-=this.p_18.getNumParameters())<this.p_19.getNumParameters()?this.p_19.convertToNormalizedParameterValue(t,e):e}convertFromNormalizedParameterValue(t,e){return e=e<0?0:e>1?1:e,(t-=0)<this.p_18.getNumParameters()?this.p_18.convertFromNormalizedParameterValue(t,e):(t-=this.p_18.getNumParameters())<this.p_19.getNumParameters()?this.p_19.convertFromNormalizedParameterValue(t,e):e}constrainParameterValue(t,e){return(t-=0)<this.p_18.getNumParameters()?this.p_18.constrainParameterValue(t,e):(t-=this.p_18.getNumParameters())<this.p_19.getNumParameters()?this.p_19.constrainParameterValue(t,e):e}scheduleParamInit(t,e){this.getPatcher().scheduleParamInit(t+this.parameterOffset,e)}processClockEvent(t,e,a,r){switch(RNBO_UNUSED(r),RNBO_UNUSED(a),this.updateTime(t),e){case-1313779944:this.edge_11_onout_bang();break;case 1151781846:this.edge_11_offout_bang();break;case-611950441:this.edge_12_onout_bang();break;case-1584063977:this.edge_12_offout_bang()}}processOutletAtCurrentTime(t,e,a){}processOutletEvent(t,e,a,r){this.updateTime(r),this.processOutletAtCurrentTime(t,e,a)}sendOutlet(t,e){this.getEngine().sendOutlet(this,t,e)}processNumMessage(t,e,a,r){switch(RNBO_UNUSED(e),this.updateTime(a),t){case TAG(\"state\"):this.inport_13_value_number_set(r);break;case TAG(\"retrigger_params\"):this.inport_14_value_number_set(r)}this.p_18.processNumMessage(t,e,a,r),this.p_19.processNumMessage(t,e,a,r)}processListMessage(t,e,a,r){switch(RNBO_UNUSED(e),this.updateTime(a),t){case TAG(\"state\"):this.inport_13_value_list_set(r);break;case TAG(\"retrigger_params\"):this.inport_14_value_list_set(r)}this.p_18.processListMessage(t,e,a,r),this.p_19.processListMessage(t,e,a,r)}processBangMessage(t,e,a){switch(RNBO_UNUSED(e),this.updateTime(a),t){case TAG(\"state\"):this.inport_13_value_bang_bang();break;case TAG(\"retrigger_params\"):this.inport_14_value_bang_bang()}this.p_18.processBangMessage(t,e,a),this.p_19.processBangMessage(t,e,a)}resolveTag(t){switch(t){case TAG(\"blip\"):return\"blip\";case TAG(\"\"):return\"\";case TAG(\"state\"):return\"state\";case TAG(\"retrigger_params\"):return\"retrigger_params\"}var e=this.p_18.resolveTag(t);if(e)return e;var a=this.p_19.resolveTag(t);return a||null}getDataRef(t){return null}getNumDataRefs(){return 0}fillDataRef(t,e){}processDataViewUpdate(t,e){this.p_18.processDataViewUpdate(t,e),this.p_19.processDataViewUpdate(t,e)}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(t,e){this._engineInterface=t,this._parentPatcher=e}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_76{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(4),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.edge_13_setupDone=!1,this.gen_06_setupDone=!1,this.peek_tilde_06_buffer=0,this.ip_11_sigbuf=0,this.ip_11_setupDone=!1,this.latch_tilde_11_setupDone=!1,this.latch_tilde_12_setupDone=!1,this.ip_12_sigbuf=0,this.ip_12_setupDone=!1,this.data_171_buffer=0,this.data_171_setupDone=!1,this.data_172_buffer=0,this.data_172_setupDone=!1,this.data_173_buffer=0,this.data_173_setupDone=!1,this.data_174_buffer=0,this.data_174_setupDone=!1,this.data_175_buffer=0,this.data_175_setupDone=!1,this.data_176_buffer=0,this.data_176_setupDone=!1,this.data_177_buffer=0,this.data_177_setupDone=!1,this.data_178_buffer=0,this.data_178_setupDone=!1,this.data_179_buffer=0,this.data_179_setupDone=!1,this.data_180_buffer=0,this.data_180_setupDone=!1,this.data_181_buffer=0,this.data_181_setupDone=!1,this.data_182_buffer=0,this.data_182_setupDone=!1,this.data_183_buffer=0,this.data_183_setupDone=!1,this.data_184_buffer=0,this.data_184_setupDone=!1,this.data_185_buffer=0,this.data_185_setupDone=!1,this.data_186_buffer=0,this.data_186_setupDone=!1,this.data_187_buffer=0,this.data_187_setupDone=!1,this.data_188_buffer=0,this.data_188_setupDone=!1,this.data_189_buffer=0,this.data_189_setupDone=!1,this.data_190_buffer=0,this.data_190_setupDone=!1,this.data_191_buffer=0,this.data_191_setupDone=!1,this.data_192_buffer=0,this.data_192_setupDone=!1,this.data_193_buffer=0,this.data_193_setupDone=!1,this.data_194_buffer=0,this.data_194_setupDone=!1,this.data_195_buffer=0,this.data_195_setupDone=!1,this.data_196_buffer=0,this.data_196_setupDone=!1,this.data_197_buffer=0,this.data_197_setupDone=!1,this.data_198_buffer=0,this.data_198_setupDone=!1,this.data_199_buffer=0,this.data_199_setupDone=!1,this.data_200_buffer=0,this.data_200_setupDone=!1,this.data_201_buffer=0,this.data_201_setupDone=!1,this.data_202_buffer=0,this.data_202_setupDone=!1,this.data_203_buffer=0,this.data_203_setupDone=!1,this.data_204_buffer=0,this.data_204_setupDone=!1,this.peek_tilde_06_bufferobj=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(t){return RNBO_UNUSED(t),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(t,e,a,r){}getNumMidiOutputPorts(){return 0}msToSamps(t,e){return t*e*.001}sampsToMs(t){return t*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 1}getNumOutputChannels(){return 1}setProbingTarget(t){this.setProbingIndex(-1)}setProbingIndex(t){}getProbingChannels(t){return RNBO_UNUSED(t),0}getIsMuted(){return this.isMuted}setIsMuted(t){this.isMuted=t}getPatcherSerial(){return 0}setState(){}processTempoEvent(t,e){}processTransportEvent(t,e){}processBeatTimeEvent(t,e){}onSampleRateChanged(t){}processTimeSignatureEvent(t,e,a){}setParameterValue(t,e,a){}processParameterEvent(t,e,a){this.setParameterValue(t,e,a)}processNormalizedParameterEvent(t,e,a){this.setParameterValueNormalized(t,e,a)}getParameterValue(t){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(t){return\"bogus\"}getParameterId(t){return\"bogus\"}getParameterInfo(t,e){}sendParameter(t){this.getPatcher().sendParameter(t+this.parameterOffset)}setParameterOffset(t){this.parameterOffset=t}applyStepsToNormalizedParameterValue(t,e){if(1==e)t>0&&(t=1);else{let a=1/(e-1);t=1*rnbo_fround(t/a*1/1)*a}return t}convertToNormalizedParameterValue(t,e){return e}convertFromNormalizedParameterValue(t,e){return e=e<0?0:e>1?1:e}constrainParameterValue(t,e){return e}scheduleParamInit(t,e){this.getPatcher().scheduleParamInit(t+this.parameterOffset,e)}processClockEvent(t,e,a,r){switch(RNBO_UNUSED(r),RNBO_UNUSED(a),this.updateTime(t),e){case-611950441:this.edge_13_onout_bang();break;case-1584063977:this.edge_13_offout_bang()}}processOutletAtCurrentTime(t,e,a){}processOutletEvent(t,e,a,r){this.updateTime(r),this.processOutletAtCurrentTime(t,e,a)}sendOutlet(t,e){this.getEngine().sendOutlet(this,t,e)}processNumMessage(t,e,a,r){switch(RNBO_UNUSED(e),this.updateTime(a),t){case TAG(\"state\"):this.inport_15_value_number_set(r)}}processListMessage(t,e,a,r){switch(RNBO_UNUSED(e),this.updateTime(a),t){case TAG(\"state\"):this.inport_15_value_list_set(r)}}processBangMessage(t,e,a){switch(RNBO_UNUSED(e),this.updateTime(a),t){case TAG(\"state\"):this.inport_15_value_bang_bang()}}resolveTag(t){switch(t){case TAG(\"state\"):return\"state\";case TAG(\"\"):return\"\"}return null}getDataRef(t){return null}getNumDataRefs(){return 0}fillDataRef(t,e){}zeroDataRef(t){t.setZero()}processDataViewUpdate(t,e){this.updateTime(e),-1!=t&&6!=t&&5!=t&&4!=t&&14!=t&&13!=t&&12!=t&&11!=t&&22!=t&&21!=t&&20!=t&&19!=t&&29!=t&&28!=t&&27!=t&&26!=t&&33!=t&&32!=t&&31!=t&&30!=t&&3!=t&&2!=t&&1!=t&&0!=t&&10!=t&&9!=t&&8!=t&&7!=t&&18!=t&&17!=t&&16!=t&&15!=t&&25!=t&&24!=t&&23!=t||(this.peek_tilde_06_buffer=new Float32MultiBuffer(this.peek_tilde_06_bufferobj)),0==t&&(this.data_171_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_23),this.data_171_bufferUpdated()),1==t&&(this.data_172_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_22),this.data_172_bufferUpdated()),2==t&&(this.data_173_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_21),this.data_173_bufferUpdated()),3==t&&(this.data_174_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_20),this.data_174_bufferUpdated()),4==t&&(this.data_175_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_3),this.data_175_bufferUpdated()),5==t&&(this.data_176_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_2),this.data_176_bufferUpdated()),6==t&&(this.data_177_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_1),this.data_177_bufferUpdated()),7==t&&(this.data_178_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_27),this.data_178_bufferUpdated()),8==t&&(this.data_179_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_26),this.data_179_bufferUpdated()),9==t&&(this.data_180_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_25),this.data_180_bufferUpdated()),10==t&&(this.data_181_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_24),this.data_181_bufferUpdated()),11==t&&(this.data_182_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_7),this.data_182_bufferUpdated()),12==t&&(this.data_183_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_6),this.data_183_bufferUpdated()),13==t&&(this.data_184_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_5),this.data_184_bufferUpdated()),14==t&&(this.data_185_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_4),this.data_185_bufferUpdated()),15==t&&(this.data_186_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_31),this.data_186_bufferUpdated()),16==t&&(this.data_187_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_30),this.data_187_bufferUpdated()),17==t&&(this.data_188_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_29),this.data_188_bufferUpdated()),18==t&&(this.data_189_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_28),this.data_189_bufferUpdated()),19==t&&(this.data_190_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_11),this.data_190_bufferUpdated()),20==t&&(this.data_191_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_10),this.data_191_bufferUpdated()),21==t&&(this.data_192_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_9),this.data_192_bufferUpdated()),22==t&&(this.data_193_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_8),this.data_193_bufferUpdated()),23==t&&(this.data_194_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_34),this.data_194_bufferUpdated()),24==t&&(this.data_195_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_33),this.data_195_bufferUpdated()),25==t&&(this.data_196_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_32),this.data_196_bufferUpdated()),26==t&&(this.data_197_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_15),this.data_197_bufferUpdated()),27==t&&(this.data_198_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_14),this.data_198_bufferUpdated()),28==t&&(this.data_199_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_13),this.data_199_bufferUpdated()),29==t&&(this.data_200_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_12),this.data_200_bufferUpdated()),30==t&&(this.data_201_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_19),this.data_201_bufferUpdated()),31==t&&(this.data_202_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_18),this.data_202_bufferUpdated()),32==t&&(this.data_203_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_17),this.data_203_bufferUpdated()),33==t&&(this.data_204_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_16),this.data_204_bufferUpdated())}initialize(){this.peek_tilde_06_bufferobj=initMultiRef(this.getPatcher().getPatcher().b_dot_1,this.getPatcher().getPatcher().b_dot_2,this.getPatcher().getPatcher().b_dot_3,this.getPatcher().getPatcher().b_dot_4,this.getPatcher().getPatcher().b_dot_5,this.getPatcher().getPatcher().b_dot_6,this.getPatcher().getPatcher().b_dot_7,this.getPatcher().getPatcher().b_dot_8,this.getPatcher().getPatcher().b_dot_9,this.getPatcher().getPatcher().b_dot_10,this.getPatcher().getPatcher().b_dot_11,this.getPatcher().getPatcher().b_dot_12,this.getPatcher().getPatcher().b_dot_13,this.getPatcher().getPatcher().b_dot_14,this.getPatcher().getPatcher().b_dot_15,this.getPatcher().getPatcher().b_dot_16,this.getPatcher().getPatcher().b_dot_17,this.getPatcher().getPatcher().b_dot_18,this.getPatcher().getPatcher().b_dot_19,this.getPatcher().getPatcher().b_dot_20,this.getPatcher().getPatcher().b_dot_21,this.getPatcher().getPatcher().b_dot_22,this.getPatcher().getPatcher().b_dot_23,this.getPatcher().getPatcher().b_dot_24,this.getPatcher().getPatcher().b_dot_25,this.getPatcher().getPatcher().b_dot_26,this.getPatcher().getPatcher().b_dot_27,this.getPatcher().getPatcher().b_dot_28,this.getPatcher().getPatcher().b_dot_29,this.getPatcher().getPatcher().b_dot_30,this.getPatcher().getPatcher().b_dot_31,this.getPatcher().getPatcher().b_dot_32,this.getPatcher().getPatcher().b_dot_33,this.getPatcher().getPatcher().b_dot_34),this.assign_defaults(),this.setState(),this.peek_tilde_06_bufferobj.setIndex(-1),this.peek_tilde_06_buffer=new Float32MultiBuffer(this.peek_tilde_06_bufferobj),this.data_171_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_23),this.data_172_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_22),this.data_173_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_21),this.data_174_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_20),this.data_175_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_3),this.data_176_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_2),this.data_177_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_1),this.data_178_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_27),this.data_179_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_26),this.data_180_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_25),this.data_181_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_24),this.data_182_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_7),this.data_183_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_6),this.data_184_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_5),this.data_185_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_4),this.data_186_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_31),this.data_187_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_30),this.data_188_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_29),this.data_189_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_28),this.data_190_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_11),this.data_191_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_10),this.data_192_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_9),this.data_193_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_8),this.data_194_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_34),this.data_195_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_33),this.data_196_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_32),this.data_197_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_15),this.data_198_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_14),this.data_199_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_13),this.data_200_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_12),this.data_201_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_19),this.data_202_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_18),this.data_203_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_17),this.data_204_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_16)}assign_defaults(){}setEngineAndPatcher(t,e){this._engineInterface=t,this._parentPatcher=e}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_77{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(4),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.edge_14_setupDone=!1,this.gen_07_setupDone=!1,this.peek_tilde_07_buffer=0,this.ip_13_sigbuf=0,this.ip_13_setupDone=!1,this.latch_tilde_13_setupDone=!1,this.latch_tilde_14_setupDone=!1,this.ip_14_sigbuf=0,this.ip_14_setupDone=!1,this.data_205_buffer=0,this.data_205_setupDone=!1,this.data_206_buffer=0,this.data_206_setupDone=!1,this.data_207_buffer=0,this.data_207_setupDone=!1,this.data_208_buffer=0,this.data_208_setupDone=!1,this.data_209_buffer=0,this.data_209_setupDone=!1,this.data_210_buffer=0,this.data_210_setupDone=!1,this.data_211_buffer=0,this.data_211_setupDone=!1,this.data_212_buffer=0,this.data_212_setupDone=!1,this.data_213_buffer=0,this.data_213_setupDone=!1,this.data_214_buffer=0,this.data_214_setupDone=!1,this.data_215_buffer=0,this.data_215_setupDone=!1,this.data_216_buffer=0,this.data_216_setupDone=!1,this.data_217_buffer=0,this.data_217_setupDone=!1,this.data_218_buffer=0,this.data_218_setupDone=!1,this.data_219_buffer=0,this.data_219_setupDone=!1,this.data_220_buffer=0,this.data_220_setupDone=!1,this.data_221_buffer=0,this.data_221_setupDone=!1,this.data_222_buffer=0,this.data_222_setupDone=!1,this.data_223_buffer=0,this.data_223_setupDone=!1,this.data_224_buffer=0,this.data_224_setupDone=!1,this.data_225_buffer=0,this.data_225_setupDone=!1,this.data_226_buffer=0,this.data_226_setupDone=!1,this.data_227_buffer=0,this.data_227_setupDone=!1,this.data_228_buffer=0,this.data_228_setupDone=!1,this.data_229_buffer=0,this.data_229_setupDone=!1,this.data_230_buffer=0,this.data_230_setupDone=!1,this.data_231_buffer=0,this.data_231_setupDone=!1,this.data_232_buffer=0,this.data_232_setupDone=!1,this.data_233_buffer=0,this.data_233_setupDone=!1,this.data_234_buffer=0,this.data_234_setupDone=!1,this.data_235_buffer=0,this.data_235_setupDone=!1,this.data_236_buffer=0,this.data_236_setupDone=!1,this.data_237_buffer=0,this.data_237_setupDone=!1,this.data_238_buffer=0,this.data_238_setupDone=!1,this.peek_tilde_07_bufferobj=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(t){return RNBO_UNUSED(t),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(t,e,a,r){}getNumMidiOutputPorts(){return 0}msToSamps(t,e){return t*e*.001}sampsToMs(t){return t*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 1}getNumOutputChannels(){return 1}setProbingTarget(t){this.setProbingIndex(-1)}setProbingIndex(t){}getProbingChannels(t){return RNBO_UNUSED(t),0}getIsMuted(){return this.isMuted}setIsMuted(t){this.isMuted=t}getPatcherSerial(){return 0}setState(){}processTempoEvent(t,e){}processTransportEvent(t,e){}processBeatTimeEvent(t,e){}onSampleRateChanged(t){}processTimeSignatureEvent(t,e,a){}setParameterValue(t,e,a){}processParameterEvent(t,e,a){this.setParameterValue(t,e,a)}processNormalizedParameterEvent(t,e,a){this.setParameterValueNormalized(t,e,a)}getParameterValue(t){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(t){return\"bogus\"}getParameterId(t){return\"bogus\"}getParameterInfo(t,e){}sendParameter(t){this.getPatcher().sendParameter(t+this.parameterOffset)}setParameterOffset(t){this.parameterOffset=t}applyStepsToNormalizedParameterValue(t,e){if(1==e)t>0&&(t=1);else{let a=1/(e-1);t=1*rnbo_fround(t/a*1/1)*a}return t}convertToNormalizedParameterValue(t,e){return e}convertFromNormalizedParameterValue(t,e){return e=e<0?0:e>1?1:e}constrainParameterValue(t,e){return e}scheduleParamInit(t,e){this.getPatcher().scheduleParamInit(t+this.parameterOffset,e)}processClockEvent(t,e,a,r){switch(RNBO_UNUSED(r),RNBO_UNUSED(a),this.updateTime(t),e){case-611950441:this.edge_14_onout_bang();break;case-1584063977:this.edge_14_offout_bang()}}processOutletAtCurrentTime(t,e,a){}processOutletEvent(t,e,a,r){this.updateTime(r),this.processOutletAtCurrentTime(t,e,a)}sendOutlet(t,e){this.getEngine().sendOutlet(this,t,e)}processNumMessage(t,e,a,r){switch(RNBO_UNUSED(e),this.updateTime(a),t){case TAG(\"state\"):this.inport_16_value_number_set(r)}}processListMessage(t,e,a,r){switch(RNBO_UNUSED(e),this.updateTime(a),t){case TAG(\"state\"):this.inport_16_value_list_set(r)}}processBangMessage(t,e,a){switch(RNBO_UNUSED(e),this.updateTime(a),t){case TAG(\"state\"):this.inport_16_value_bang_bang()}}resolveTag(t){switch(t){case TAG(\"state\"):return\"state\";case TAG(\"\"):return\"\"}return null}getDataRef(t){return null}getNumDataRefs(){return 0}fillDataRef(t,e){}zeroDataRef(t){t.setZero()}processDataViewUpdate(t,e){this.updateTime(e),-1!=t&&6!=t&&5!=t&&4!=t&&14!=t&&13!=t&&12!=t&&11!=t&&22!=t&&21!=t&&20!=t&&19!=t&&29!=t&&28!=t&&27!=t&&26!=t&&33!=t&&32!=t&&31!=t&&30!=t&&3!=t&&2!=t&&1!=t&&0!=t&&10!=t&&9!=t&&8!=t&&7!=t&&18!=t&&17!=t&&16!=t&&15!=t&&25!=t&&24!=t&&23!=t||(this.peek_tilde_07_buffer=new Float32MultiBuffer(this.peek_tilde_07_bufferobj)),0==t&&(this.data_205_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_23),this.data_205_bufferUpdated()),1==t&&(this.data_206_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_22),this.data_206_bufferUpdated()),2==t&&(this.data_207_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_21),this.data_207_bufferUpdated()),3==t&&(this.data_208_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_20),this.data_208_bufferUpdated()),4==t&&(this.data_209_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_3),this.data_209_bufferUpdated()),5==t&&(this.data_210_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_2),this.data_210_bufferUpdated()),6==t&&(this.data_211_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_1),this.data_211_bufferUpdated()),7==t&&(this.data_212_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_27),this.data_212_bufferUpdated()),8==t&&(this.data_213_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_26),this.data_213_bufferUpdated()),9==t&&(this.data_214_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_25),this.data_214_bufferUpdated()),10==t&&(this.data_215_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_24),this.data_215_bufferUpdated()),11==t&&(this.data_216_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_7),this.data_216_bufferUpdated()),12==t&&(this.data_217_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_6),this.data_217_bufferUpdated()),13==t&&(this.data_218_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_5),this.data_218_bufferUpdated()),14==t&&(this.data_219_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_4),this.data_219_bufferUpdated()),15==t&&(this.data_220_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_31),this.data_220_bufferUpdated()),16==t&&(this.data_221_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_30),this.data_221_bufferUpdated()),17==t&&(this.data_222_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_29),this.data_222_bufferUpdated()),18==t&&(this.data_223_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_28),this.data_223_bufferUpdated()),19==t&&(this.data_224_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_11),this.data_224_bufferUpdated()),20==t&&(this.data_225_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_10),this.data_225_bufferUpdated()),21==t&&(this.data_226_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_9),this.data_226_bufferUpdated()),22==t&&(this.data_227_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_8),this.data_227_bufferUpdated()),23==t&&(this.data_228_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_34),this.data_228_bufferUpdated()),24==t&&(this.data_229_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_33),this.data_229_bufferUpdated()),25==t&&(this.data_230_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_32),this.data_230_bufferUpdated()),26==t&&(this.data_231_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_15),this.data_231_bufferUpdated()),27==t&&(this.data_232_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_14),this.data_232_bufferUpdated()),28==t&&(this.data_233_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_13),this.data_233_bufferUpdated()),29==t&&(this.data_234_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_12),this.data_234_bufferUpdated()),30==t&&(this.data_235_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_19),this.data_235_bufferUpdated()),31==t&&(this.data_236_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_18),this.data_236_bufferUpdated()),32==t&&(this.data_237_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_17),this.data_237_bufferUpdated()),33==t&&(this.data_238_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_16),this.data_238_bufferUpdated())}initialize(){this.peek_tilde_07_bufferobj=initMultiRef(this.getPatcher().getPatcher().b_dot_1,this.getPatcher().getPatcher().b_dot_2,this.getPatcher().getPatcher().b_dot_3,this.getPatcher().getPatcher().b_dot_4,this.getPatcher().getPatcher().b_dot_5,this.getPatcher().getPatcher().b_dot_6,this.getPatcher().getPatcher().b_dot_7,this.getPatcher().getPatcher().b_dot_8,this.getPatcher().getPatcher().b_dot_9,this.getPatcher().getPatcher().b_dot_10,this.getPatcher().getPatcher().b_dot_11,this.getPatcher().getPatcher().b_dot_12,this.getPatcher().getPatcher().b_dot_13,this.getPatcher().getPatcher().b_dot_14,this.getPatcher().getPatcher().b_dot_15,this.getPatcher().getPatcher().b_dot_16,this.getPatcher().getPatcher().b_dot_17,this.getPatcher().getPatcher().b_dot_18,this.getPatcher().getPatcher().b_dot_19,this.getPatcher().getPatcher().b_dot_20,this.getPatcher().getPatcher().b_dot_21,this.getPatcher().getPatcher().b_dot_22,this.getPatcher().getPatcher().b_dot_23,this.getPatcher().getPatcher().b_dot_24,this.getPatcher().getPatcher().b_dot_25,this.getPatcher().getPatcher().b_dot_26,this.getPatcher().getPatcher().b_dot_27,this.getPatcher().getPatcher().b_dot_28,this.getPatcher().getPatcher().b_dot_29,this.getPatcher().getPatcher().b_dot_30,this.getPatcher().getPatcher().b_dot_31,this.getPatcher().getPatcher().b_dot_32,this.getPatcher().getPatcher().b_dot_33,this.getPatcher().getPatcher().b_dot_34),this.assign_defaults(),this.setState(),this.peek_tilde_07_bufferobj.setIndex(-1),this.peek_tilde_07_buffer=new Float32MultiBuffer(this.peek_tilde_07_bufferobj),this.data_205_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_23),this.data_206_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_22),this.data_207_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_21),this.data_208_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_20),this.data_209_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_3),this.data_210_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_2),this.data_211_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_1),this.data_212_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_27),this.data_213_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_26),this.data_214_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_25),this.data_215_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_24),this.data_216_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_7),this.data_217_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_6),this.data_218_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_5),this.data_219_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_4),this.data_220_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_31),this.data_221_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_30),this.data_222_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_29),this.data_223_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_28),this.data_224_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_11),this.data_225_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_10),this.data_226_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_9),this.data_227_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_8),this.data_228_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_34),this.data_229_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_33),this.data_230_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_32),this.data_231_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_15),this.data_232_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_14),this.data_233_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_13),this.data_234_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_12),this.data_235_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_19),this.data_236_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_18),this.data_237_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_17),this.data_238_buffer=new Float32Buffer(this.getPatcher().getPatcher().b_dot_16)}assign_defaults(){}setEngineAndPatcher(t,e){this._engineInterface=t,this._parentPatcher=e}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_84{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(2),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0,this.p_20=new Array,this.p_21=new Array}getParameterIndexForID(t){return RNBO_UNUSED(t),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(t,e,a,r){}getNumMidiOutputPorts(){return 0}msToSamps(t,e){return t*e*.001}sampsToMs(t){return t*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 2}getNumOutputChannels(){return 1}setProbingTarget(t){this.setProbingIndex(-1)}setProbingIndex(t){}getProbingChannels(t){return RNBO_UNUSED(t),0}getIsMuted(){return this.isMuted}setIsMuted(t){this.isMuted=t}getPatcherSerial(){return 0}setState(){this.p_20=new RNBOSubpatcher_76,this.p_20.setEngineAndPatcher(this.getEngine(),this),this.p_20.initialize(),this.p_20.setParameterOffset(this.getParameterOffset(this.p_20)),this.p_21=new RNBOSubpatcher_77,this.p_21.setEngineAndPatcher(this.getEngine(),this),this.p_21.initialize(),this.p_21.setParameterOffset(this.getParameterOffset(this.p_21))}processTempoEvent(t,e){this.updateTime(t),this.p_20.processTempoEvent(t,e),this.p_21.processTempoEvent(t,e)}processTransportEvent(t,e){this.updateTime(t),this.p_20.processTransportEvent(t,e),this.p_21.processTransportEvent(t,e)}processBeatTimeEvent(t,e){this.updateTime(t),this.p_20.processBeatTimeEvent(t,e),this.p_21.processBeatTimeEvent(t,e)}onSampleRateChanged(t){}processTimeSignatureEvent(t,e,a){this.updateTime(t),this.p_20.processTimeSignatureEvent(t,e,a),this.p_21.processTimeSignatureEvent(t,e,a)}setParameterValue(t,e,a){RNBO_UNUSED(e),this.updateTime(a),(t-=0)<this.p_20.getNumParameters()&&this.p_20.setParameterValue(t,e,a),(t-=this.p_20.getNumParameters())<this.p_21.getNumParameters()&&this.p_21.setParameterValue(t,e,a)}processParameterEvent(t,e,a){this.setParameterValue(t,e,a)}processNormalizedParameterEvent(t,e,a){this.setParameterValueNormalized(t,e,a)}getParameterValue(t){return(t-=0)<this.p_20.getNumParameters()?this.p_20.getParameterValue(t):(t-=this.p_20.getNumParameters())<this.p_21.getNumParameters()?this.p_21.getParameterValue(t):0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0+this.p_20.getNumParameters()+this.p_21.getNumParameters()}getParameterName(t){return(t-=0)<this.p_20.getNumParameters()?this.p_20.getParameterName(t):(t-=this.p_20.getNumParameters())<this.p_21.getNumParameters()?this.p_21.getParameterName(t):\"bogus\"}getParameterId(t){return(t-=0)<this.p_20.getNumParameters()?this.p_20.getParameterId(t):(t-=this.p_20.getNumParameters())<this.p_21.getNumParameters()?this.p_21.getParameterId(t):\"bogus\"}getParameterInfo(t,e){(t-=0)<this.p_20.getNumParameters()&&this.p_20.getParameterInfo(t,e),(t-=this.p_20.getNumParameters())<this.p_21.getNumParameters()&&this.p_21.getParameterInfo(t,e)}sendParameter(t){this.getPatcher().sendParameter(t+this.parameterOffset)}getParameterOffset(t){return t==this.p_20?0:t==this.p_21?0+this.p_20.getNumParameters():0}setParameterOffset(t){this.parameterOffset=t}applyStepsToNormalizedParameterValue(t,e){if(1==e)t>0&&(t=1);else{let a=1/(e-1);t=1*rnbo_fround(t/a*1/1)*a}return t}convertToNormalizedParameterValue(t,e){return(t-=0)<this.p_20.getNumParameters()?this.p_20.convertToNormalizedParameterValue(t,e):(t-=this.p_20.getNumParameters())<this.p_21.getNumParameters()?this.p_21.convertToNormalizedParameterValue(t,e):e}convertFromNormalizedParameterValue(t,e){return e=e<0?0:e>1?1:e,(t-=0)<this.p_20.getNumParameters()?this.p_20.convertFromNormalizedParameterValue(t,e):(t-=this.p_20.getNumParameters())<this.p_21.getNumParameters()?this.p_21.convertFromNormalizedParameterValue(t,e):e}constrainParameterValue(t,e){return(t-=0)<this.p_20.getNumParameters()?this.p_20.constrainParameterValue(t,e):(t-=this.p_20.getNumParameters())<this.p_21.getNumParameters()?this.p_21.constrainParameterValue(t,e):e}scheduleParamInit(t,e){this.getPatcher().scheduleParamInit(t+this.parameterOffset,e)}processClockEvent(t,e,a,r){}processOutletAtCurrentTime(t,e,a){}processOutletEvent(t,e,a,r){this.updateTime(r),this.processOutletAtCurrentTime(t,e,a)}sendOutlet(t,e){this.getEngine().sendOutlet(this,t,e)}processNumMessage(t,e,a,r){switch(RNBO_UNUSED(e),this.updateTime(a),t){case TAG(\"sampler_params\"):this.inport_17_value_number_set(r)}this.p_20.processNumMessage(t,e,a,r),this.p_21.processNumMessage(t,e,a,r)}processListMessage(t,e,a,r){switch(RNBO_UNUSED(e),this.updateTime(a),t){case TAG(\"sampler_params\"):this.inport_17_value_list_set(r)}this.p_20.processListMessage(t,e,a,r),this.p_21.processListMessage(t,e,a,r)}processBangMessage(t,e,a){switch(RNBO_UNUSED(e),this.updateTime(a),t){case TAG(\"sampler_params\"):this.inport_17_value_bang_bang()}this.p_20.processBangMessage(t,e,a),this.p_21.processBangMessage(t,e,a)}resolveTag(t){switch(t){case TAG(\"sampler_params\"):return\"sampler_params\";case TAG(\"\"):return\"\"}var e=this.p_20.resolveTag(t);if(e)return e;var a=this.p_21.resolveTag(t);return a||null}getDataRef(t){return null}getNumDataRefs(){return 0}fillDataRef(t,e){}processDataViewUpdate(t,e){this.p_20.processDataViewUpdate(t,e),this.p_21.processDataViewUpdate(t,e)}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(t,e){this._engineInterface=t,this._parentPatcher=e}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOPatcher{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(6),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.globaltransport_tempo=0,this.globaltransport_tempoNeedsReset=!1,this.globaltransport_state=0,this.globaltransport_stateNeedsReset=!1,this.globaltransport_notify=!1,this.globaltransport_setupDone=!1,this.b_dot_23=0,this.b_dot_22=0,this.b_dot_21=0,this.b_dot_20=0,this.b_dot_3=0,this.b_dot_2=0,this.b_dot_1=0,this.b_dot_27=0,this.b_dot_26=0,this.b_dot_25=0,this.b_dot_24=0,this.b_dot_7=0,this.b_dot_6=0,this.b_dot_5=0,this.b_dot_4=0,this.b_dot_31=0,this.b_dot_30=0,this.b_dot_29=0,this.b_dot_28=0,this.b_dot_11=0,this.b_dot_10=0,this.b_dot_9=0,this.b_dot_8=0,this.b_dot_34=0,this.b_dot_33=0,this.b_dot_32=0,this.b_dot_15=0,this.b_dot_14=0,this.b_dot_13=0,this.b_dot_12=0,this.b_dot_19=0,this.b_dot_18=0,this.b_dot_17=0,this.b_dot_16=0,this._voiceIndex=0,this.isMuted=1,this.paramInitIndices=[],this.paramInitOrder=[],this.p_22=new Array,this.p_23=new Array,this.p_24=new Array,this.p_25=new Array,this.p_26=new Array,this.p_27=new Array,this.p_28=new Array}getParameterIndexForID(t){return RNBO_UNUSED(t),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(t,e,a,r){}getNumMidiOutputPorts(){return 0}msToSamps(t,e){return t*e*.001}sampsToMs(t){return t*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 1}setProbingTarget(t){this.setProbingIndex(-1)}setProbingIndex(t){}getProbingChannels(t){return RNBO_UNUSED(t),0}getDataRef(t){switch(t){case 0:return addressOf(this.b_dot_23);case 1:return addressOf(this.b_dot_22);case 2:return addressOf(this.b_dot_21);case 3:return addressOf(this.b_dot_20);case 4:return addressOf(this.b_dot_3);case 5:return addressOf(this.b_dot_2);case 6:return addressOf(this.b_dot_1);case 7:return addressOf(this.b_dot_27);case 8:return addressOf(this.b_dot_26);case 9:return addressOf(this.b_dot_25);case 10:return addressOf(this.b_dot_24);case 11:return addressOf(this.b_dot_7);case 12:return addressOf(this.b_dot_6);case 13:return addressOf(this.b_dot_5);case 14:return addressOf(this.b_dot_4);case 15:return addressOf(this.b_dot_31);case 16:return addressOf(this.b_dot_30);case 17:return addressOf(this.b_dot_29);case 18:return addressOf(this.b_dot_28);case 19:return addressOf(this.b_dot_11);case 20:return addressOf(this.b_dot_10);case 21:return addressOf(this.b_dot_9);case 22:return addressOf(this.b_dot_8);case 23:return addressOf(this.b_dot_34);case 24:return addressOf(this.b_dot_33);case 25:return addressOf(this.b_dot_32);case 26:return addressOf(this.b_dot_15);case 27:return addressOf(this.b_dot_14);case 28:return addressOf(this.b_dot_13);case 29:return addressOf(this.b_dot_12);case 30:return addressOf(this.b_dot_19);case 31:return addressOf(this.b_dot_18);case 32:return addressOf(this.b_dot_17);case 33:return addressOf(this.b_dot_16);default:return null}}getNumDataRefs(){return 34}fillDataRef(t,e){}zeroDataRef(t){t.setZero()}processDataViewUpdate(t,e){this.p_22.processDataViewUpdate(t,e),this.p_23.processDataViewUpdate(t,e),this.p_24.processDataViewUpdate(t,e),this.p_25.processDataViewUpdate(t,e),this.p_26.processDataViewUpdate(t,e),this.p_27.processDataViewUpdate(t,e),this.p_28.processDataViewUpdate(t,e)}initialize(){this.b_dot_23=initDataRef(\"b.23\",!1,null),this.b_dot_22=initDataRef(\"b.22\",!1,null),this.b_dot_21=initDataRef(\"b.21\",!1,null),this.b_dot_20=initDataRef(\"b.20\",!1,null),this.b_dot_3=initDataRef(\"b.3\",!1,null),this.b_dot_2=initDataRef(\"b.2\",!1,null),this.b_dot_1=initDataRef(\"b.1\",!1,null),this.b_dot_27=initDataRef(\"b.27\",!1,null),this.b_dot_26=initDataRef(\"b.26\",!1,null),this.b_dot_25=initDataRef(\"b.25\",!1,null),this.b_dot_24=initDataRef(\"b.24\",!1,null),this.b_dot_7=initDataRef(\"b.7\",!1,null),this.b_dot_6=initDataRef(\"b.6\",!1,null),this.b_dot_5=initDataRef(\"b.5\",!1,null),this.b_dot_4=initDataRef(\"b.4\",!1,null),this.b_dot_31=initDataRef(\"b.31\",!1,null),this.b_dot_30=initDataRef(\"b.30\",!1,null),this.b_dot_29=initDataRef(\"b.29\",!1,null),this.b_dot_28=initDataRef(\"b.28\",!1,null),this.b_dot_11=initDataRef(\"b.11\",!1,null),this.b_dot_10=initDataRef(\"b.10\",!1,null),this.b_dot_9=initDataRef(\"b.9\",!1,null),this.b_dot_8=initDataRef(\"b.8\",!1,null),this.b_dot_34=initDataRef(\"b.34\",!1,null),this.b_dot_33=initDataRef(\"b.33\",!1,null),this.b_dot_32=initDataRef(\"b.32\",!1,null),this.b_dot_15=initDataRef(\"b.15\",!1,null),this.b_dot_14=initDataRef(\"b.14\",!1,null),this.b_dot_13=initDataRef(\"b.13\",!1,null),this.b_dot_12=initDataRef(\"b.12\",!1,null),this.b_dot_19=initDataRef(\"b.19\",!1,null),this.b_dot_18=initDataRef(\"b.18\",!1,null),this.b_dot_17=initDataRef(\"b.17\",!1,null),this.b_dot_16=initDataRef(\"b.16\",!1,null),this.assign_defaults(),this.setState(),this.b_dot_23.setIndex(0),this.b_dot_22.setIndex(1),this.b_dot_21.setIndex(2),this.b_dot_20.setIndex(3),this.b_dot_3.setIndex(4),this.b_dot_2.setIndex(5),this.b_dot_1.setIndex(6),this.b_dot_27.setIndex(7),this.b_dot_26.setIndex(8),this.b_dot_25.setIndex(9),this.b_dot_24.setIndex(10),this.b_dot_7.setIndex(11),this.b_dot_6.setIndex(12),this.b_dot_5.setIndex(13),this.b_dot_4.setIndex(14),this.b_dot_31.setIndex(15),this.b_dot_30.setIndex(16),this.b_dot_29.setIndex(17),this.b_dot_28.setIndex(18),this.b_dot_11.setIndex(19),this.b_dot_10.setIndex(20),this.b_dot_9.setIndex(21),this.b_dot_8.setIndex(22),this.b_dot_34.setIndex(23),this.b_dot_33.setIndex(24),this.b_dot_32.setIndex(25),this.b_dot_15.setIndex(26),this.b_dot_14.setIndex(27),this.b_dot_13.setIndex(28),this.b_dot_12.setIndex(29),this.b_dot_19.setIndex(30),this.b_dot_18.setIndex(31),this.b_dot_17.setIndex(32),this.b_dot_16.setIndex(33),this.initializeObjects(),this.allocateDataRefs(),this.startup()}getIsMuted(){return this.isMuted}setIsMuted(t){this.isMuted=t}getPatcherSerial(){return 0}setState(){this.p_22=new RNBOSubpatcher_78,this.p_22.setEngineAndPatcher(this.getEngine(),this),this.p_22.initialize(),this.p_22.setParameterOffset(this.getParameterOffset(this.p_22)),this.p_23=new RNBOSubpatcher_79,this.p_23.setEngineAndPatcher(this.getEngine(),this),this.p_23.initialize(),this.p_23.setParameterOffset(this.getParameterOffset(this.p_23)),this.p_24=new RNBOSubpatcher_80,this.p_24.setEngineAndPatcher(this.getEngine(),this),this.p_24.initialize(),this.p_24.setParameterOffset(this.getParameterOffset(this.p_24)),this.p_25=new RNBOSubpatcher_81,this.p_25.setEngineAndPatcher(this.getEngine(),this),this.p_25.initialize(),this.p_25.setParameterOffset(this.getParameterOffset(this.p_25)),this.p_26=new RNBOSubpatcher_82,this.p_26.setEngineAndPatcher(this.getEngine(),this),this.p_26.initialize(),this.p_26.setParameterOffset(this.getParameterOffset(this.p_26)),this.p_27=new RNBOSubpatcher_83,this.p_27.setEngineAndPatcher(this.getEngine(),this),this.p_27.initialize(),this.p_27.setParameterOffset(this.getParameterOffset(this.p_27)),this.p_28=new RNBOSubpatcher_84,this.p_28.setEngineAndPatcher(this.getEngine(),this),this.p_28.initialize(),this.p_28.setParameterOffset(this.getParameterOffset(this.p_28))}processTempoEvent(t,e){this.updateTime(t),this.globaltransport_setTempo(e,!1)&&(this.p_22.processTempoEvent(t,e),this.p_23.processTempoEvent(t,e),this.p_24.processTempoEvent(t,e),this.p_25.processTempoEvent(t,e),this.p_26.processTempoEvent(t,e),this.p_27.processTempoEvent(t,e),this.p_28.processTempoEvent(t,e))}processTransportEvent(t,e){this.updateTime(t),this.globaltransport_setState(e,!1)&&(this.p_22.processTransportEvent(t,e),this.p_23.processTransportEvent(t,e),this.p_24.processTransportEvent(t,e),this.p_25.processTransportEvent(t,e),this.p_26.processTransportEvent(t,e),this.p_27.processTransportEvent(t,e),this.p_28.processTransportEvent(t,e))}processBeatTimeEvent(t,e){this.updateTime(t),this.globaltransport_setBeatTime(e,!1)&&(this.p_22.processBeatTimeEvent(t,e),this.p_23.processBeatTimeEvent(t,e),this.p_24.processBeatTimeEvent(t,e),this.p_25.processBeatTimeEvent(t,e),this.p_26.processBeatTimeEvent(t,e),this.p_27.processBeatTimeEvent(t,e),this.p_28.processBeatTimeEvent(t,e))}onSampleRateChanged(t){}processTimeSignatureEvent(t,e,a){this.updateTime(t),this.globaltransport_setTimeSignature(e,a,!1)&&(this.p_22.processTimeSignatureEvent(t,e,a),this.p_23.processTimeSignatureEvent(t,e,a),this.p_24.processTimeSignatureEvent(t,e,a),this.p_25.processTimeSignatureEvent(t,e,a),this.p_26.processTimeSignatureEvent(t,e,a),this.p_27.processTimeSignatureEvent(t,e,a),this.p_28.processTimeSignatureEvent(t,e,a))}setParameterValue(t,e,a){RNBO_UNUSED(e),this.updateTime(a),(t-=0)<this.p_22.getNumParameters()&&this.p_22.setParameterValue(t,e,a),(t-=this.p_22.getNumParameters())<this.p_23.getNumParameters()&&this.p_23.setParameterValue(t,e,a),(t-=this.p_23.getNumParameters())<this.p_24.getNumParameters()&&this.p_24.setParameterValue(t,e,a),(t-=this.p_24.getNumParameters())<this.p_25.getNumParameters()&&this.p_25.setParameterValue(t,e,a),(t-=this.p_25.getNumParameters())<this.p_26.getNumParameters()&&this.p_26.setParameterValue(t,e,a),(t-=this.p_26.getNumParameters())<this.p_27.getNumParameters()&&this.p_27.setParameterValue(t,e,a),(t-=this.p_27.getNumParameters())<this.p_28.getNumParameters()&&this.p_28.setParameterValue(t,e,a)}processParameterEvent(t,e,a){this.setParameterValue(t,e,a)}processNormalizedParameterEvent(t,e,a){this.setParameterValueNormalized(t,e,a)}getParameterValue(t){return(t-=0)<this.p_22.getNumParameters()?this.p_22.getParameterValue(t):(t-=this.p_22.getNumParameters())<this.p_23.getNumParameters()?this.p_23.getParameterValue(t):(t-=this.p_23.getNumParameters())<this.p_24.getNumParameters()?this.p_24.getParameterValue(t):(t-=this.p_24.getNumParameters())<this.p_25.getNumParameters()?this.p_25.getParameterValue(t):(t-=this.p_25.getNumParameters())<this.p_26.getNumParameters()?this.p_26.getParameterValue(t):(t-=this.p_26.getNumParameters())<this.p_27.getNumParameters()?this.p_27.getParameterValue(t):(t-=this.p_27.getNumParameters())<this.p_28.getNumParameters()?this.p_28.getParameterValue(t):0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0+this.p_22.getNumParameters()+this.p_23.getNumParameters()+this.p_24.getNumParameters()+this.p_25.getNumParameters()+this.p_26.getNumParameters()+this.p_27.getNumParameters()+this.p_28.getNumParameters()}getParameterName(t){return(t-=0)<this.p_22.getNumParameters()?this.p_22.getParameterName(t):(t-=this.p_22.getNumParameters())<this.p_23.getNumParameters()?this.p_23.getParameterName(t):(t-=this.p_23.getNumParameters())<this.p_24.getNumParameters()?this.p_24.getParameterName(t):(t-=this.p_24.getNumParameters())<this.p_25.getNumParameters()?this.p_25.getParameterName(t):(t-=this.p_25.getNumParameters())<this.p_26.getNumParameters()?this.p_26.getParameterName(t):(t-=this.p_26.getNumParameters())<this.p_27.getNumParameters()?this.p_27.getParameterName(t):(t-=this.p_27.getNumParameters())<this.p_28.getNumParameters()?this.p_28.getParameterName(t):\"bogus\"}getParameterId(t){return(t-=0)<this.p_22.getNumParameters()?this.p_22.getParameterId(t):(t-=this.p_22.getNumParameters())<this.p_23.getNumParameters()?this.p_23.getParameterId(t):(t-=this.p_23.getNumParameters())<this.p_24.getNumParameters()?this.p_24.getParameterId(t):(t-=this.p_24.getNumParameters())<this.p_25.getNumParameters()?this.p_25.getParameterId(t):(t-=this.p_25.getNumParameters())<this.p_26.getNumParameters()?this.p_26.getParameterId(t):(t-=this.p_26.getNumParameters())<this.p_27.getNumParameters()?this.p_27.getParameterId(t):(t-=this.p_27.getNumParameters())<this.p_28.getNumParameters()?this.p_28.getParameterId(t):\"bogus\"}getParameterInfo(t,e){(t-=0)<this.p_22.getNumParameters()&&this.p_22.getParameterInfo(t,e),(t-=this.p_22.getNumParameters())<this.p_23.getNumParameters()&&this.p_23.getParameterInfo(t,e),(t-=this.p_23.getNumParameters())<this.p_24.getNumParameters()&&this.p_24.getParameterInfo(t,e),(t-=this.p_24.getNumParameters())<this.p_25.getNumParameters()&&this.p_25.getParameterInfo(t,e),(t-=this.p_25.getNumParameters())<this.p_26.getNumParameters()&&this.p_26.getParameterInfo(t,e),(t-=this.p_26.getNumParameters())<this.p_27.getNumParameters()&&this.p_27.getParameterInfo(t,e),(t-=this.p_27.getNumParameters())<this.p_28.getNumParameters()&&this.p_28.getParameterInfo(t,e)}sendParameter(t){this.getEngine().notifyParameterValueChanged(t,this.getParameterValue(t))}getParameterOffset(t){return t==this.p_22?0:t==this.p_23?0+this.p_22.getNumParameters():t==this.p_24?0+this.p_22.getNumParameters()+this.p_23.getNumParameters():t==this.p_25?0+this.p_22.getNumParameters()+this.p_23.getNumParameters()+this.p_24.getNumParameters():t==this.p_26?0+this.p_22.getNumParameters()+this.p_23.getNumParameters()+this.p_24.getNumParameters()+this.p_25.getNumParameters():t==this.p_27?0+this.p_22.getNumParameters()+this.p_23.getNumParameters()+this.p_24.getNumParameters()+this.p_25.getNumParameters()+this.p_26.getNumParameters():t==this.p_28?0+this.p_22.getNumParameters()+this.p_23.getNumParameters()+this.p_24.getNumParameters()+this.p_25.getNumParameters()+this.p_26.getNumParameters()+this.p_27.getNumParameters():0}applyStepsToNormalizedParameterValue(t,e){if(1==e)t>0&&(t=1);else{let a=1/(e-1);t=1*rnbo_fround(t/a*1/1)*a}return t}convertToNormalizedParameterValue(t,e){return(t-=0)<this.p_22.getNumParameters()?this.p_22.convertToNormalizedParameterValue(t,e):(t-=this.p_22.getNumParameters())<this.p_23.getNumParameters()?this.p_23.convertToNormalizedParameterValue(t,e):(t-=this.p_23.getNumParameters())<this.p_24.getNumParameters()?this.p_24.convertToNormalizedParameterValue(t,e):(t-=this.p_24.getNumParameters())<this.p_25.getNumParameters()?this.p_25.convertToNormalizedParameterValue(t,e):(t-=this.p_25.getNumParameters())<this.p_26.getNumParameters()?this.p_26.convertToNormalizedParameterValue(t,e):(t-=this.p_26.getNumParameters())<this.p_27.getNumParameters()?this.p_27.convertToNormalizedParameterValue(t,e):(t-=this.p_27.getNumParameters())<this.p_28.getNumParameters()?this.p_28.convertToNormalizedParameterValue(t,e):e}convertFromNormalizedParameterValue(t,e){return e=e<0?0:e>1?1:e,(t-=0)<this.p_22.getNumParameters()?this.p_22.convertFromNormalizedParameterValue(t,e):(t-=this.p_22.getNumParameters())<this.p_23.getNumParameters()?this.p_23.convertFromNormalizedParameterValue(t,e):(t-=this.p_23.getNumParameters())<this.p_24.getNumParameters()?this.p_24.convertFromNormalizedParameterValue(t,e):(t-=this.p_24.getNumParameters())<this.p_25.getNumParameters()?this.p_25.convertFromNormalizedParameterValue(t,e):(t-=this.p_25.getNumParameters())<this.p_26.getNumParameters()?this.p_26.convertFromNormalizedParameterValue(t,e):(t-=this.p_26.getNumParameters())<this.p_27.getNumParameters()?this.p_27.convertFromNormalizedParameterValue(t,e):(t-=this.p_27.getNumParameters())<this.p_28.getNumParameters()?this.p_28.convertFromNormalizedParameterValue(t,e):e}constrainParameterValue(t,e){return(t-=0)<this.p_22.getNumParameters()?this.p_22.constrainParameterValue(t,e):(t-=this.p_22.getNumParameters())<this.p_23.getNumParameters()?this.p_23.constrainParameterValue(t,e):(t-=this.p_23.getNumParameters())<this.p_24.getNumParameters()?this.p_24.constrainParameterValue(t,e):(t-=this.p_24.getNumParameters())<this.p_25.getNumParameters()?this.p_25.constrainParameterValue(t,e):(t-=this.p_25.getNumParameters())<this.p_26.getNumParameters()?this.p_26.constrainParameterValue(t,e):(t-=this.p_26.getNumParameters())<this.p_27.getNumParameters()?this.p_27.constrainParameterValue(t,e):(t-=this.p_27.getNumParameters())<this.p_28.getNumParameters()?this.p_28.constrainParameterValue(t,e):e}scheduleParamInit(t,e){this.paramInitIndices.push(t),this.paramInitOrder.push(e)}processParamInitEvents(){this.listquicksort(this.paramInitOrder,this.paramInitIndices,0,this.paramInitOrder.length-1,!0);for(var t=0;t<this.paramInitOrder.length;t++)this.getEngine().scheduleParameterChange(this.paramInitIndices[t],this.getParameterValue(this.paramInitIndices[t]),0)}processClockEvent(t,e,a,r){}processOutletAtCurrentTime(t,e,a){}processOutletEvent(t,e,a,r){this.updateTime(r),this.processOutletAtCurrentTime(t,e,a)}sendOutlet(t,e){this.getEngine().sendOutlet(this,t,e)}processNumMessage(t,e,a,r){switch(RNBO_UNUSED(e),this.updateTime(a),t){case TAG(\"state\"):this.inport_18_value_number_set(r);break;case TAG(\"rate\"):this.inport_19_value_number_set(r);break;case TAG(\"global_cycle\"):this.inport_20_value_number_set(r)}this.p_22.processNumMessage(t,e,a,r),this.p_23.processNumMessage(t,e,a,r),this.p_24.processNumMessage(t,e,a,r),this.p_25.processNumMessage(t,e,a,r),this.p_26.processNumMessage(t,e,a,r),this.p_27.processNumMessage(t,e,a,r),this.p_28.processNumMessage(t,e,a,r)}processListMessage(t,e,a,r){switch(RNBO_UNUSED(e),this.updateTime(a),t){case TAG(\"state\"):this.inport_18_value_list_set(r);break;case TAG(\"rate\"):this.inport_19_value_list_set(r);break;case TAG(\"global_cycle\"):this.inport_20_value_list_set(r)}this.p_22.processListMessage(t,e,a,r),this.p_23.processListMessage(t,e,a,r),this.p_24.processListMessage(t,e,a,r),this.p_25.processListMessage(t,e,a,r),this.p_26.processListMessage(t,e,a,r),this.p_27.processListMessage(t,e,a,r),this.p_28.processListMessage(t,e,a,r)}processBangMessage(t,e,a){switch(RNBO_UNUSED(e),this.updateTime(a),t){case TAG(\"state\"):this.inport_18_value_bang_bang();break;case TAG(\"rate\"):this.inport_19_value_bang_bang();break;case TAG(\"global_cycle\"):this.inport_20_value_bang_bang()}this.p_22.processBangMessage(t,e,a),this.p_23.processBangMessage(t,e,a),this.p_24.processBangMessage(t,e,a),this.p_25.processBangMessage(t,e,a),this.p_26.processBangMessage(t,e,a),this.p_27.processBangMessage(t,e,a),this.p_28.processBangMessage(t,e,a)}resolveTag(t){switch(t){case TAG(\"state\"):return\"state\";case TAG(\"\"):return\"\";case TAG(\"rate\"):return\"rate\";case TAG(\"global_cycle\"):return\"global_cycle\"}var e=this.p_22.resolveTag(t);if(e)return e;var a=this.p_23.resolveTag(t);if(a)return a;var r=this.p_24.resolveTag(t);if(r)return r;var s=this.p_25.resolveTag(t);if(s)return s;var i=this.p_26.resolveTag(t);if(i)return i;var h=this.p_27.resolveTag(t);if(h)return h;var _=this.p_28.resolveTag(t);return _||\"\"}getNumMessages(){return 12}getMessageInfo(t){switch(t){case 0:return{tag:\"state\",type:Inport};case 1:return{tag:\"rate\",type:Inport};case 2:return{tag:\"global_cycle\",type:Inport};case 3:return{tag:\"sampler_params\",type:Inport};case 4:return{tag:\"pips\",type:Outport};case 5:return{tag:\"blip\",type:Outport};case 6:return{tag:\"polymetric_params\",type:Inport};case 7:return{tag:\"chordfollow\",type:Inport};case 8:return{tag:\"debug_chord\",type:Outport};case 9:return{tag:\"chordsampler\",type:Inport};case 10:return{tag:\"chordscale\",type:Inport};case 11:return{tag:\"retrigger_params\",type:Inport}}return NullMessageInfo}assign_defaults(){}setEngineAndPatcher(t,e){this._engineInterface=t,this._parentPatcher=e}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this}}rnboObj=new RNBOPatcher;",
  "wasm": "",
  "wasmEncoding": "base64",
  "presets": [
    {
      "name": "main",
      "preset": {
        "__sps": {
          "p_obj-1": {
            "__sps": {
              "p_obj-12": {
                "__sps": {
                  "p_obj-60": {}
                }
              },
              "p_obj-2": {
                "__sps": {
                  "p_obj-60": {}
                }
              }
            }
          },
          "p_obj-17": {
            "__sps": {
              "p_obj-25": {},
              "p_obj-29": {},
              "p_obj-3": {}
            }
          },
          "p_obj-18": {
            "__sps": {
              "p_obj-2": {},
              "p_obj-4": {}
            }
          },
          "p_obj-3": {
            "__sps": {
              "p_obj-14": {
                "__sps": {
                  "p_obj-60": {}
                }
              },
              "p_obj-16": {
                "__sps": {
                  "p_obj-60": {}
                }
              },
              "p_obj-17": {
                "__sps": {
                  "p_obj-60": {}
                }
              },
              "p_obj-18": {
                "__sps": {
                  "p_obj-60": {}
                }
              }
            }
          },
          "p_obj-50": {},
          "p_obj-57": {
            "__sps": {
              "p_obj-2": {},
              "p_obj-4": {},
              "p_obj-6": {},
              "p_obj-8": {}
            }
          },
          "p_obj-64": {}
        }
      }
    }
  ]
}