{
  "desc": {
    "parameters": [
      {
        "type": "ParameterTypeNumber",
        "index": 0,
        "name": "freq",
        "paramId": "fm/fmguts/p_obj-79/freq",
        "minimum": 0,
        "maximum": 44100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 50,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s01",
        "constrainFunc": "param_01_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 1,
        "name": "gain",
        "paramId": "fm/fmguts/p_obj-79/gain",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s02",
        "constrainFunc": "param_02_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 2,
        "name": "len",
        "paramId": "fm/fmguts/p_obj-79/len",
        "minimum": 1,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 100,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s03",
        "constrainFunc": "param_03_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 3,
        "name": "ratio",
        "paramId": "fm/fmguts/p_obj-79/ratio",
        "minimum": 0,
        "maximum": 50000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s04",
        "constrainFunc": "param_04_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 4,
        "name": "freq",
        "paramId": "fm/fmguts/p_obj-65/freq",
        "minimum": 0,
        "maximum": 44100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 50,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s01",
        "constrainFunc": "param_05_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 5,
        "name": "gain",
        "paramId": "fm/fmguts/p_obj-65/gain",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s02",
        "constrainFunc": "param_06_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 6,
        "name": "len",
        "paramId": "fm/fmguts/p_obj-65/len",
        "minimum": 1,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 100,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s03",
        "constrainFunc": "param_07_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 7,
        "name": "ratio",
        "paramId": "fm/fmguts/p_obj-65/ratio",
        "minimum": 0,
        "maximum": 50000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s04",
        "constrainFunc": "param_08_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 8,
        "name": "freq",
        "paramId": "fm/fmguts/p_obj-37/freq",
        "minimum": 0,
        "maximum": 44100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 50,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s01",
        "constrainFunc": "param_09_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 9,
        "name": "gain",
        "paramId": "fm/fmguts/p_obj-37/gain",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s02",
        "constrainFunc": "param_10_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 10,
        "name": "len",
        "paramId": "fm/fmguts/p_obj-37/len",
        "minimum": 1,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 100,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s03",
        "constrainFunc": "param_11_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 11,
        "name": "ratio",
        "paramId": "fm/fmguts/p_obj-37/ratio",
        "minimum": 0,
        "maximum": 50000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s04",
        "constrainFunc": "param_12_value_constrain"
      }
    ],
    "numParameters": 12,
    "numSignalInParameters": 0,
    "numSignalOutParameters": 0,
    "numInputChannels": 0,
    "numOutputChannels": 1,
    "numMidiInputPorts": 0,
    "numMidiOutputPorts": 0,
    "externalDataRefs": [
      {
        "id": "grid",
        "type": "Float64Buffer",
        "tag": "data"
      },
      {
        "id": "wavetable",
        "type": "Float32Buffer",
        "tag": "buffer~"
      }
    ],
    "patcherSerial": 0,
    "inports": [
      {
        "tag": "state",
        "meta": ""
      },
      {
        "tag": "bpm",
        "meta": ""
      },
      {
        "tag": "direction",
        "meta": ""
      },
      {
        "tag": "multiplier",
        "meta": ""
      },
      {
        "tag": "grid_start",
        "meta": ""
      },
      {
        "tag": "grid_end",
        "meta": ""
      },
      {
        "tag": "kick_volume",
        "meta": ""
      },
      {
        "tag": "kick_params",
        "meta": ""
      },
      {
        "tag": "snare_volume",
        "meta": ""
      },
      {
        "tag": "snare_params",
        "meta": ""
      },
      {
        "tag": "euclid_generator",
        "meta": ""
      },
      {
        "tag": "grid",
        "meta": ""
      },
      {
        "tag": "metal_volume",
        "meta": ""
      },
      {
        "tag": "metal_params",
        "meta": ""
      },
      {
        "tag": "fm_volume",
        "meta": ""
      },
      {
        "tag": "fm_params",
        "meta": ""
      },
      {
        "tag": "randomise",
        "meta": ""
      }
    ],
    "outports": [
      {
        "tag": "kick_env",
        "meta": ""
      },
      {
        "tag": "step",
        "meta": ""
      },
      {
        "tag": "snare_env",
        "meta": ""
      },
      {
        "tag": "metal_env",
        "meta": ""
      },
      {
        "tag": "fm_env",
        "meta": ""
      },
      {
        "tag": "randomise_debug",
        "meta": ""
      }
    ],
    "inlets": [],
    "outlets": [
      {
        "type": "signal",
        "index": 1,
        "tag": "out1",
        "meta": ""
      }
    ],
    "paramConversion": {
      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_45.getNumParameters())\n            return this.p_45.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_45.getNumParameters();\n\n        if (index < this.p_46.getNumParameters())\n            return this.p_46.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_46.getNumParameters();\n\n        if (index < this.p_47.getNumParameters())\n            return this.p_47.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_47.getNumParameters();\n\n        if (index < this.p_48.getNumParameters())\n            return this.p_48.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_48.getNumParameters();\n\n        if (index < this.p_49.getNumParameters())\n            return this.p_49.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_49.getNumParameters();\n\n        if (index < this.p_50.getNumParameters())\n            return this.p_50.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_50.getNumParameters();\n\n        if (index < this.p_51.getNumParameters())\n            return this.p_51.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_45.getNumParameters())\n            return this.p_45.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_45.getNumParameters();\n\n        if (index < this.p_46.getNumParameters())\n            return this.p_46.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_46.getNumParameters();\n\n        if (index < this.p_47.getNumParameters())\n            return this.p_47.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_47.getNumParameters();\n\n        if (index < this.p_48.getNumParameters())\n            return this.p_48.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_48.getNumParameters();\n\n        if (index < this.p_49.getNumParameters())\n            return this.p_49.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_49.getNumParameters();\n\n        if (index < this.p_50.getNumParameters())\n            return this.p_50.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_50.getNumParameters();\n\n        if (index < this.p_51.getNumParameters())\n            return this.p_51.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
      "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_45.getNumParameters() + this.p_46.getNumParameters() + this.p_47.getNumParameters() + this.p_48.getNumParameters() + this.p_49.getNumParameters() + this.p_50.getNumParameters() + this.p_51.getNumParameters();\n}",
      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_45.getNumParameters())\n            return this.p_45.constrainParameterValue(index, value);\n\n        index -= this.p_45.getNumParameters();\n\n        if (index < this.p_46.getNumParameters())\n            return this.p_46.constrainParameterValue(index, value);\n\n        index -= this.p_46.getNumParameters();\n\n        if (index < this.p_47.getNumParameters())\n            return this.p_47.constrainParameterValue(index, value);\n\n        index -= this.p_47.getNumParameters();\n\n        if (index < this.p_48.getNumParameters())\n            return this.p_48.constrainParameterValue(index, value);\n\n        index -= this.p_48.getNumParameters();\n\n        if (index < this.p_49.getNumParameters())\n            return this.p_49.constrainParameterValue(index, value);\n\n        index -= this.p_49.getNumParameters();\n\n        if (index < this.p_50.getNumParameters())\n            return this.p_50.constrainParameterValue(index, value);\n\n        index -= this.p_50.getNumParameters();\n\n        if (index < this.p_51.getNumParameters())\n            return this.p_51.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
      "subpatches": {
        "p_45": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_05.getNumParameters())\n            return this.p_05.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_05.getNumParameters();\n\n        if (index < this.p_06.getNumParameters())\n            return this.p_06.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_06.getNumParameters();\n\n        if (index < this.p_07.getNumParameters())\n            return this.p_07.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_07.getNumParameters();\n\n        if (index < this.p_08.getNumParameters())\n            return this.p_08.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_08.getNumParameters();\n\n        if (index < this.p_09.getNumParameters())\n            return this.p_09.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_09.getNumParameters();\n\n        if (index < this.p_10.getNumParameters())\n            return this.p_10.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_10.getNumParameters();\n\n        if (index < this.p_11.getNumParameters())\n            return this.p_11.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_11.getNumParameters();\n\n        if (index < this.p_12.getNumParameters())\n            return this.p_12.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_12.getNumParameters();\n\n        if (index < this.p_13.getNumParameters())\n            return this.p_13.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_13.getNumParameters();\n\n        if (index < this.p_14.getNumParameters())\n            return this.p_14.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_14.getNumParameters();\n\n        if (index < this.p_15.getNumParameters())\n            return this.p_15.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_15.getNumParameters();\n\n        if (index < this.p_16.getNumParameters())\n            return this.p_16.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_16.getNumParameters();\n\n        if (index < this.p_17.getNumParameters())\n            return this.p_17.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_05.getNumParameters())\n            return this.p_05.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_05.getNumParameters();\n\n        if (index < this.p_06.getNumParameters())\n            return this.p_06.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_06.getNumParameters();\n\n        if (index < this.p_07.getNumParameters())\n            return this.p_07.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_07.getNumParameters();\n\n        if (index < this.p_08.getNumParameters())\n            return this.p_08.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_08.getNumParameters();\n\n        if (index < this.p_09.getNumParameters())\n            return this.p_09.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_09.getNumParameters();\n\n        if (index < this.p_10.getNumParameters())\n            return this.p_10.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_10.getNumParameters();\n\n        if (index < this.p_11.getNumParameters())\n            return this.p_11.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_11.getNumParameters();\n\n        if (index < this.p_12.getNumParameters())\n            return this.p_12.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_12.getNumParameters();\n\n        if (index < this.p_13.getNumParameters())\n            return this.p_13.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_13.getNumParameters();\n\n        if (index < this.p_14.getNumParameters())\n            return this.p_14.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_14.getNumParameters();\n\n        if (index < this.p_15.getNumParameters())\n            return this.p_15.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_15.getNumParameters();\n\n        if (index < this.p_16.getNumParameters())\n            return this.p_16.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_16.getNumParameters();\n\n        if (index < this.p_17.getNumParameters())\n            return this.p_17.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_05.getNumParameters() + this.p_06.getNumParameters() + this.p_07.getNumParameters() + this.p_08.getNumParameters() + this.p_09.getNumParameters() + this.p_10.getNumParameters() + this.p_11.getNumParameters() + this.p_12.getNumParameters() + this.p_13.getNumParameters() + this.p_14.getNumParameters() + this.p_15.getNumParameters() + this.p_16.getNumParameters() + this.p_17.getNumParameters();\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_05.getNumParameters())\n            return this.p_05.constrainParameterValue(index, value);\n\n        index -= this.p_05.getNumParameters();\n\n        if (index < this.p_06.getNumParameters())\n            return this.p_06.constrainParameterValue(index, value);\n\n        index -= this.p_06.getNumParameters();\n\n        if (index < this.p_07.getNumParameters())\n            return this.p_07.constrainParameterValue(index, value);\n\n        index -= this.p_07.getNumParameters();\n\n        if (index < this.p_08.getNumParameters())\n            return this.p_08.constrainParameterValue(index, value);\n\n        index -= this.p_08.getNumParameters();\n\n        if (index < this.p_09.getNumParameters())\n            return this.p_09.constrainParameterValue(index, value);\n\n        index -= this.p_09.getNumParameters();\n\n        if (index < this.p_10.getNumParameters())\n            return this.p_10.constrainParameterValue(index, value);\n\n        index -= this.p_10.getNumParameters();\n\n        if (index < this.p_11.getNumParameters())\n            return this.p_11.constrainParameterValue(index, value);\n\n        index -= this.p_11.getNumParameters();\n\n        if (index < this.p_12.getNumParameters())\n            return this.p_12.constrainParameterValue(index, value);\n\n        index -= this.p_12.getNumParameters();\n\n        if (index < this.p_13.getNumParameters())\n            return this.p_13.constrainParameterValue(index, value);\n\n        index -= this.p_13.getNumParameters();\n\n        if (index < this.p_14.getNumParameters())\n            return this.p_14.constrainParameterValue(index, value);\n\n        index -= this.p_14.getNumParameters();\n\n        if (index < this.p_15.getNumParameters())\n            return this.p_15.constrainParameterValue(index, value);\n\n        index -= this.p_15.getNumParameters();\n\n        if (index < this.p_16.getNumParameters())\n            return this.p_16.constrainParameterValue(index, value);\n\n        index -= this.p_16.getNumParameters();\n\n        if (index < this.p_17.getNumParameters())\n            return this.p_17.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
          "subpatches": {
            "p_05": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_06": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_07": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_08": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_09": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_10": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_01.getNumParameters())\n            return this.p_01.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_01.getNumParameters();\n\n        if (index < this.p_02.getNumParameters())\n            return this.p_02.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_02.getNumParameters();\n\n        if (index < this.p_03.getNumParameters())\n            return this.p_03.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_01.getNumParameters())\n            return this.p_01.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_01.getNumParameters();\n\n        if (index < this.p_02.getNumParameters())\n            return this.p_02.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_02.getNumParameters();\n\n        if (index < this.p_03.getNumParameters())\n            return this.p_03.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_01.getNumParameters() + this.p_02.getNumParameters() + this.p_03.getNumParameters();\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_01.getNumParameters())\n            return this.p_01.constrainParameterValue(index, value);\n\n        index -= this.p_01.getNumParameters();\n\n        if (index < this.p_02.getNumParameters())\n            return this.p_02.constrainParameterValue(index, value);\n\n        index -= this.p_02.getNumParameters();\n\n        if (index < this.p_03.getNumParameters())\n            return this.p_03.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
              "subpatches": {
                "p_01": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_02": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_03": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_11": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_04.getNumParameters())\n            return this.p_04.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_04.getNumParameters())\n            return this.p_04.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_04.getNumParameters();\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_04.getNumParameters())\n            return this.p_04.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
              "subpatches": {
                "p_04": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_12": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_13": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_14": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_15": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_16": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_17": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            }
          },
          "isPolyphonic": false
        },
        "p_46": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "subpatches": {},
          "isPolyphonic": false
        },
        "p_47": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_18.getNumParameters())\n            return this.p_18.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_18.getNumParameters();\n\n        if (index < this.p_19.getNumParameters())\n            return this.p_19.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_19.getNumParameters();\n\n        if (index < this.p_20.getNumParameters())\n            return this.p_20.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_20.getNumParameters();\n\n        if (index < this.p_21.getNumParameters())\n            return this.p_21.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_21.getNumParameters();\n\n        if (index < this.p_22.getNumParameters())\n            return this.p_22.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_22.getNumParameters();\n\n        if (index < this.p_23.getNumParameters())\n            return this.p_23.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_18.getNumParameters())\n            return this.p_18.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_18.getNumParameters();\n\n        if (index < this.p_19.getNumParameters())\n            return this.p_19.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_19.getNumParameters();\n\n        if (index < this.p_20.getNumParameters())\n            return this.p_20.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_20.getNumParameters();\n\n        if (index < this.p_21.getNumParameters())\n            return this.p_21.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_21.getNumParameters();\n\n        if (index < this.p_22.getNumParameters())\n            return this.p_22.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_22.getNumParameters();\n\n        if (index < this.p_23.getNumParameters())\n            return this.p_23.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_18.getNumParameters() + this.p_19.getNumParameters() + this.p_20.getNumParameters() + this.p_21.getNumParameters() + this.p_22.getNumParameters() + this.p_23.getNumParameters();\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_18.getNumParameters())\n            return this.p_18.constrainParameterValue(index, value);\n\n        index -= this.p_18.getNumParameters();\n\n        if (index < this.p_19.getNumParameters())\n            return this.p_19.constrainParameterValue(index, value);\n\n        index -= this.p_19.getNumParameters();\n\n        if (index < this.p_20.getNumParameters())\n            return this.p_20.constrainParameterValue(index, value);\n\n        index -= this.p_20.getNumParameters();\n\n        if (index < this.p_21.getNumParameters())\n            return this.p_21.constrainParameterValue(index, value);\n\n        index -= this.p_21.getNumParameters();\n\n        if (index < this.p_22.getNumParameters())\n            return this.p_22.constrainParameterValue(index, value);\n\n        index -= this.p_22.getNumParameters();\n\n        if (index < this.p_23.getNumParameters())\n            return this.p_23.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
          "subpatches": {
            "p_18": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_19": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_20": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_21": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_22": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_23": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            }
          },
          "isPolyphonic": false
        },
        "p_48": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_30.getNumParameters())\n            return this.p_30.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_30.getNumParameters();\n\n        if (index < this.p_31.getNumParameters())\n            return this.p_31.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_31.getNumParameters();\n\n        if (index < this.p_32.getNumParameters())\n            return this.p_32.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_32.getNumParameters();\n\n        if (index < this.p_33.getNumParameters())\n            return this.p_33.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_33.getNumParameters();\n\n        if (index < this.p_34.getNumParameters())\n            return this.p_34.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_30.getNumParameters())\n            return this.p_30.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_30.getNumParameters();\n\n        if (index < this.p_31.getNumParameters())\n            return this.p_31.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_31.getNumParameters();\n\n        if (index < this.p_32.getNumParameters())\n            return this.p_32.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_32.getNumParameters();\n\n        if (index < this.p_33.getNumParameters())\n            return this.p_33.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_33.getNumParameters();\n\n        if (index < this.p_34.getNumParameters())\n            return this.p_34.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_30.getNumParameters() + this.p_31.getNumParameters() + this.p_32.getNumParameters() + this.p_33.getNumParameters() + this.p_34.getNumParameters();\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_30.getNumParameters())\n            return this.p_30.constrainParameterValue(index, value);\n\n        index -= this.p_30.getNumParameters();\n\n        if (index < this.p_31.getNumParameters())\n            return this.p_31.constrainParameterValue(index, value);\n\n        index -= this.p_31.getNumParameters();\n\n        if (index < this.p_32.getNumParameters())\n            return this.p_32.constrainParameterValue(index, value);\n\n        index -= this.p_32.getNumParameters();\n\n        if (index < this.p_33.getNumParameters())\n            return this.p_33.constrainParameterValue(index, value);\n\n        index -= this.p_33.getNumParameters();\n\n        if (index < this.p_34.getNumParameters())\n            return this.p_34.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
          "subpatches": {
            "p_30": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_24.getNumParameters())\n            return this.p_24.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_24.getNumParameters();\n\n        if (index < this.p_25.getNumParameters())\n            return this.p_25.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_25.getNumParameters();\n\n        if (index < this.p_26.getNumParameters())\n            return this.p_26.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_26.getNumParameters();\n\n        if (index < this.p_27.getNumParameters())\n            return this.p_27.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_27.getNumParameters();\n\n        if (index < this.p_28.getNumParameters())\n            return this.p_28.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_28.getNumParameters();\n\n        if (index < this.p_29.getNumParameters())\n            return this.p_29.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_24.getNumParameters())\n            return this.p_24.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_24.getNumParameters();\n\n        if (index < this.p_25.getNumParameters())\n            return this.p_25.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_25.getNumParameters();\n\n        if (index < this.p_26.getNumParameters())\n            return this.p_26.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_26.getNumParameters();\n\n        if (index < this.p_27.getNumParameters())\n            return this.p_27.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_27.getNumParameters();\n\n        if (index < this.p_28.getNumParameters())\n            return this.p_28.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_28.getNumParameters();\n\n        if (index < this.p_29.getNumParameters())\n            return this.p_29.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_24.getNumParameters() + this.p_25.getNumParameters() + this.p_26.getNumParameters() + this.p_27.getNumParameters() + this.p_28.getNumParameters() + this.p_29.getNumParameters();\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_24.getNumParameters())\n            return this.p_24.constrainParameterValue(index, value);\n\n        index -= this.p_24.getNumParameters();\n\n        if (index < this.p_25.getNumParameters())\n            return this.p_25.constrainParameterValue(index, value);\n\n        index -= this.p_25.getNumParameters();\n\n        if (index < this.p_26.getNumParameters())\n            return this.p_26.constrainParameterValue(index, value);\n\n        index -= this.p_26.getNumParameters();\n\n        if (index < this.p_27.getNumParameters())\n            return this.p_27.constrainParameterValue(index, value);\n\n        index -= this.p_27.getNumParameters();\n\n        if (index < this.p_28.getNumParameters())\n            return this.p_28.constrainParameterValue(index, value);\n\n        index -= this.p_28.getNumParameters();\n\n        if (index < this.p_29.getNumParameters())\n            return this.p_29.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
              "subpatches": {
                "p_24": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_25": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_26": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_27": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_28": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_29": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_31": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_32": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_33": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_34": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            }
          },
          "isPolyphonic": false
        },
        "p_49": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_41.getNumParameters())\n            return this.p_41.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_41.getNumParameters();\n\n        if (index < this.p_42.getNumParameters())\n            return this.p_42.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_42.getNumParameters();\n\n        if (index < this.p_43.getNumParameters())\n            return this.p_43.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_43.getNumParameters();\n\n        if (index < this.p_44.getNumParameters())\n            return this.p_44.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_41.getNumParameters())\n            return this.p_41.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_41.getNumParameters();\n\n        if (index < this.p_42.getNumParameters())\n            return this.p_42.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_42.getNumParameters();\n\n        if (index < this.p_43.getNumParameters())\n            return this.p_43.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_43.getNumParameters();\n\n        if (index < this.p_44.getNumParameters())\n            return this.p_44.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_41.getNumParameters() + this.p_42.getNumParameters() + this.p_43.getNumParameters() + this.p_44.getNumParameters();\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_41.getNumParameters())\n            return this.p_41.constrainParameterValue(index, value);\n\n        index -= this.p_41.getNumParameters();\n\n        if (index < this.p_42.getNumParameters())\n            return this.p_42.constrainParameterValue(index, value);\n\n        index -= this.p_42.getNumParameters();\n\n        if (index < this.p_43.getNumParameters())\n            return this.p_43.constrainParameterValue(index, value);\n\n        index -= this.p_43.getNumParameters();\n\n        if (index < this.p_44.getNumParameters())\n            return this.p_44.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
          "subpatches": {
            "p_41": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_35.getNumParameters())\n            return this.p_35.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_35.getNumParameters();\n\n        if (index < this.p_36.getNumParameters())\n            return this.p_36.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_36.getNumParameters();\n\n        if (index < this.p_37.getNumParameters())\n            return this.p_37.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_37.getNumParameters();\n\n        if (index < this.p_38.getNumParameters())\n            return this.p_38.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_38.getNumParameters();\n\n        if (index < this.p_39.getNumParameters())\n            return this.p_39.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_39.getNumParameters();\n\n        if (index < this.p_40.getNumParameters())\n            return this.p_40.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_35.getNumParameters())\n            return this.p_35.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_35.getNumParameters();\n\n        if (index < this.p_36.getNumParameters())\n            return this.p_36.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_36.getNumParameters();\n\n        if (index < this.p_37.getNumParameters())\n            return this.p_37.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_37.getNumParameters();\n\n        if (index < this.p_38.getNumParameters())\n            return this.p_38.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_38.getNumParameters();\n\n        if (index < this.p_39.getNumParameters())\n            return this.p_39.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_39.getNumParameters();\n\n        if (index < this.p_40.getNumParameters())\n            return this.p_40.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_35.getNumParameters() + this.p_36.getNumParameters() + this.p_37.getNumParameters() + this.p_38.getNumParameters() + this.p_39.getNumParameters() + this.p_40.getNumParameters();\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_35.getNumParameters())\n            return this.p_35.constrainParameterValue(index, value);\n\n        index -= this.p_35.getNumParameters();\n\n        if (index < this.p_36.getNumParameters())\n            return this.p_36.constrainParameterValue(index, value);\n\n        index -= this.p_36.getNumParameters();\n\n        if (index < this.p_37.getNumParameters())\n            return this.p_37.constrainParameterValue(index, value);\n\n        index -= this.p_37.getNumParameters();\n\n        if (index < this.p_38.getNumParameters())\n            return this.p_38.constrainParameterValue(index, value);\n\n        index -= this.p_38.getNumParameters();\n\n        if (index < this.p_39.getNumParameters())\n            return this.p_39.constrainParameterValue(index, value);\n\n        index -= this.p_39.getNumParameters();\n\n        if (index < this.p_40.getNumParameters())\n            return this.p_40.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
              "subpatches": {
                "p_35": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n            return normalizedValue;\n        }\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 44100 ? 44100 : value));\n            let normalizedValue = (value - 0) / (44100 - 0);\n            return normalizedValue;\n        }\n    case 3:\n        {\n            value = (value < 0 ? 0 : (value > 50000 ? 50000 : value));\n            let normalizedValue = (value - 0) / (50000 - 0);\n            return normalizedValue;\n        }\n    case 2:\n        {\n            value = (value < 1 ? 1 : (value > 5000 ? 5000 : value));\n            let normalizedValue = (value - 1) / (5000 - 1);\n            return normalizedValue;\n        }\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (44100 - 0);\n            }\n        }\n    case 3:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (50000 - 0);\n            }\n        }\n    case 2:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 1 + value * (5000 - 1);\n            }\n        }\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 4;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    case 0:\n        {\n            v = (v > 44100 ? 44100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 1:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 2:\n        {\n            v = (v > 5000 ? 5000 : (v < 1 ? 1 : v));\n            return v;\n        }\n    case 3:\n        {\n            v = (v > 50000 ? 50000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_36": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_37": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n            return normalizedValue;\n        }\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 44100 ? 44100 : value));\n            let normalizedValue = (value - 0) / (44100 - 0);\n            return normalizedValue;\n        }\n    case 3:\n        {\n            value = (value < 0 ? 0 : (value > 50000 ? 50000 : value));\n            let normalizedValue = (value - 0) / (50000 - 0);\n            return normalizedValue;\n        }\n    case 2:\n        {\n            value = (value < 1 ? 1 : (value > 5000 ? 5000 : value));\n            let normalizedValue = (value - 1) / (5000 - 1);\n            return normalizedValue;\n        }\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (44100 - 0);\n            }\n        }\n    case 3:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (50000 - 0);\n            }\n        }\n    case 2:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 1 + value * (5000 - 1);\n            }\n        }\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 4;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    case 0:\n        {\n            v = (v > 44100 ? 44100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 1:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 2:\n        {\n            v = (v > 5000 ? 5000 : (v < 1 ? 1 : v));\n            return v;\n        }\n    case 3:\n        {\n            v = (v > 50000 ? 50000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_38": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_39": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n            return normalizedValue;\n        }\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 44100 ? 44100 : value));\n            let normalizedValue = (value - 0) / (44100 - 0);\n            return normalizedValue;\n        }\n    case 3:\n        {\n            value = (value < 0 ? 0 : (value > 50000 ? 50000 : value));\n            let normalizedValue = (value - 0) / (50000 - 0);\n            return normalizedValue;\n        }\n    case 2:\n        {\n            value = (value < 1 ? 1 : (value > 5000 ? 5000 : value));\n            let normalizedValue = (value - 1) / (5000 - 1);\n            return normalizedValue;\n        }\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (44100 - 0);\n            }\n        }\n    case 3:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (50000 - 0);\n            }\n        }\n    case 2:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 1 + value * (5000 - 1);\n            }\n        }\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 4;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    case 0:\n        {\n            v = (v > 44100 ? 44100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 1:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 2:\n        {\n            v = (v > 5000 ? 5000 : (v < 1 ? 1 : v));\n            return v;\n        }\n    case 3:\n        {\n            v = (v > 50000 ? 50000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_40": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_42": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_43": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_44": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            }
          },
          "isPolyphonic": false
        },
        "p_50": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "subpatches": {},
          "isPolyphonic": false
        },
        "p_51": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "subpatches": {},
          "isPolyphonic": false
        }
      },
      "isPolyphonic": false
    },
    "presetid": "rnbo",
    "meta": {
      "architecture": "x64",
      "filename": "main.maxpat",
      "maxversion": "9.0.0",
      "rnboversion": "1.1.2"
    }
  },
  "presets": [
    {
      "name": "seq-1",
      "preset": {
        "__sps": {
          "counter": {},
          "euclidean_generator": {},
          "fm": {
            "__sps": {
              "fmguts": {
                "__sps": {
                  "p_obj-27": {},
                  "p_obj-31": {},
                  "p_obj-37": {
                    "freq": {
                      "value": 46.33918727987541
                    },
                    "gain": {
                      "value": 0
                    },
                    "len": {
                      "value": 851.9480407094201
                    },
                    "ratio": {
                      "value": 3.174458865427525
                    }
                  },
                  "p_obj-38": {},
                  "p_obj-65": {
                    "freq": {
                      "value": 46.33918727987541
                    },
                    "gain": {
                      "value": 0
                    },
                    "len": {
                      "value": 1156.1128372921953
                    },
                    "ratio": {
                      "value": 0.501443333335215
                    }
                  },
                  "p_obj-79": {
                    "freq": {
                      "value": 46.33918727987541
                    },
                    "gain": {
                      "value": 1
                    },
                    "len": {
                      "value": 1572.1543406640374
                    },
                    "ratio": {
                      "value": 1.55672268907563
                    }
                  }
                }
              },
              "p_obj-10": {},
              "scale_params": {},
              "velocity_distort": {}
            }
          },
          "grid writer": {},
          "kick": {
            "__sps": {
              "listclamp[1]": {},
              "p_obj-104": {},
              "p_obj-3": {},
              "p_obj-4": {},
              "p_obj-5": {
                "__sps": {
                  "p_obj-20": {}
                }
              },
              "p_obj-8": {},
              "p_obj-82": {},
              "p_obj-85": {},
              "p_obj-88": {},
              "p_obj-9": {
                "__sps": {
                  "p_obj-16": {},
                  "p_obj-36": {},
                  "p_obj-78": {}
                }
              },
              "p_obj-93": {},
              "p_obj-99": {},
              "saturation_limiter": {}
            }
          },
          "metal": {
            "__sps": {
              "amp_envelope": {},
              "filter_waveshape": {},
              "free_verb": {},
              "listclamp[1]": {},
              "sqaure_FM": {
                "__sps": {
                  "fm": {},
                  "fm[1]": {},
                  "fm[2]": {},
                  "fm[3]": {},
                  "fm[4]": {},
                  "fm[5]": {}
                }
              }
            }
          },
          "p_obj-16": {
            "__sps": {
              "envelope": {},
              "free_verb": {},
              "listclamp[1]": {},
              "membrane": {},
              "p_obj-10": {},
              "snare": {}
            }
          }
        }
      }
    }
  ],
  "src": [
    {
      "code": "",
      "compression": "zlib",
      "encoding": "base64",
      "type": "wasm"
    }
  ]
}