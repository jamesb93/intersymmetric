{
  "desc": {
    "parameters": [
      {
        "type": "ParameterTypeNumber",
        "index": 0,
        "name": "mix",
        "paramId": "CHANNEL_004/bass/p_obj-23/reverb/mix",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 100,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "displayorder": "-",
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s01",
        "constrainFunc": "param_01_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 1,
        "name": "jitter",
        "paramId": "CHANNEL_004/bass/p_obj-23/reverb/jitter",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 50,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Jitter",
        "unit": "%",
        "order": 5,
        "displayorder": "-",
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s02",
        "constrainFunc": "param_02_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 2,
        "name": "size",
        "paramId": "CHANNEL_004/bass/p_obj-23/reverb/size",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 50,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Size",
        "unit": "%",
        "order": 3,
        "displayorder": "-",
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s03",
        "constrainFunc": "param_03_value_constrain"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 3,
        "name": "diff",
        "paramId": "CHANNEL_004/bass/p_obj-23/reverb/diff",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 50,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Diff",
        "unit": "%",
        "order": 2,
        "displayorder": "-",
        "sendinit": true,
        "initialized": true,
        "debug": false,
        "saveable": true,
        "transmittable": true,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined",
        "serialId": "param_s04",
        "constrainFunc": "param_04_value_constrain"
      }
    ],
    "numParameters": 4,
    "numSignalInParameters": 0,
    "numSignalOutParameters": 0,
    "numInputChannels": 0,
    "numOutputChannels": 2,
    "numMidiInputPorts": 1,
    "numMidiOutputPorts": 0,
    "externalDataRefs": [],
    "patcherSerial": 0,
    "inports": [
      {
        "tag": "sliders3",
        "meta": ""
      },
      {
        "tag": "sliders2",
        "meta": ""
      },
      {
        "tag": "sliders1",
        "meta": ""
      },
      {
        "tag": "on_off",
        "meta": ""
      },
      {
        "tag": "sliders0",
        "meta": ""
      }
    ],
    "outports": [],
    "inlets": [
      {
        "type": "midi"
      }
    ],
    "outlets": [
      {
        "type": "signal",
        "index": 1,
        "tag": "out1",
        "meta": ""
      },
      {
        "type": "signal",
        "index": 2,
        "tag": "out2",
        "meta": ""
      }
    ],
    "paramConversion": {
      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_176.getNumParameters())\n            return this.p_176.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_176.getNumParameters();\n\n        if (index < this.p_177.getNumParameters())\n            return this.p_177.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_177.getNumParameters();\n\n        if (index < this.p_178.getNumParameters())\n            return this.p_178.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_178.getNumParameters();\n\n        if (index < this.p_179.getNumParameters())\n            return this.p_179.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_179.getNumParameters();\n\n        if (index < this.p_180.getNumParameters())\n            return this.p_180.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_176.getNumParameters())\n            return this.p_176.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_176.getNumParameters();\n\n        if (index < this.p_177.getNumParameters())\n            return this.p_177.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_177.getNumParameters();\n\n        if (index < this.p_178.getNumParameters())\n            return this.p_178.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_178.getNumParameters();\n\n        if (index < this.p_179.getNumParameters())\n            return this.p_179.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_179.getNumParameters();\n\n        if (index < this.p_180.getNumParameters())\n            return this.p_180.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
      "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_176.getNumParameters() + this.p_177.getNumParameters() + this.p_178.getNumParameters() + this.p_179.getNumParameters() + this.p_180.getNumParameters();\n}",
      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_176.getNumParameters())\n            return this.p_176.constrainParameterValue(index, value);\n\n        index -= this.p_176.getNumParameters();\n\n        if (index < this.p_177.getNumParameters())\n            return this.p_177.constrainParameterValue(index, value);\n\n        index -= this.p_177.getNumParameters();\n\n        if (index < this.p_178.getNumParameters())\n            return this.p_178.constrainParameterValue(index, value);\n\n        index -= this.p_178.getNumParameters();\n\n        if (index < this.p_179.getNumParameters())\n            return this.p_179.constrainParameterValue(index, value);\n\n        index -= this.p_179.getNumParameters();\n\n        if (index < this.p_180.getNumParameters())\n            return this.p_180.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
      "subpatches": {
        "p_176": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_21.getNumParameters())\n            return this.p_21.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_21.getNumParameters();\n\n        if (index < this.p_22.getNumParameters())\n            return this.p_22.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_22.getNumParameters();\n\n        if (index < this.p_23.getNumParameters())\n            return this.p_23.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_21.getNumParameters())\n            return this.p_21.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_21.getNumParameters();\n\n        if (index < this.p_22.getNumParameters())\n            return this.p_22.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_22.getNumParameters();\n\n        if (index < this.p_23.getNumParameters())\n            return this.p_23.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_21.getNumParameters() + this.p_22.getNumParameters() + this.p_23.getNumParameters();\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_21.getNumParameters())\n            return this.p_21.constrainParameterValue(index, value);\n\n        index -= this.p_21.getNumParameters();\n\n        if (index < this.p_22.getNumParameters())\n            return this.p_22.constrainParameterValue(index, value);\n\n        index -= this.p_22.getNumParameters();\n\n        if (index < this.p_23.getNumParameters())\n            return this.p_23.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
          "subpatches": {
            "p_21": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_03.getNumParameters())\n            return this.p_03.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_03.getNumParameters();\n\n        if (index < this.p_04.getNumParameters())\n            return this.p_04.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_04.getNumParameters();\n\n        if (index < this.p_05.getNumParameters())\n            return this.p_05.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_05.getNumParameters();\n\n        if (index < this.p_06.getNumParameters())\n            return this.p_06.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_06.getNumParameters();\n\n        if (index < this.p_07.getNumParameters())\n            return this.p_07.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_07.getNumParameters();\n\n        if (index < this.p_08.getNumParameters())\n            return this.p_08.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_08.getNumParameters();\n\n        if (index < this.p_09.getNumParameters())\n            return this.p_09.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_03.getNumParameters())\n            return this.p_03.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_03.getNumParameters();\n\n        if (index < this.p_04.getNumParameters())\n            return this.p_04.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_04.getNumParameters();\n\n        if (index < this.p_05.getNumParameters())\n            return this.p_05.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_05.getNumParameters();\n\n        if (index < this.p_06.getNumParameters())\n            return this.p_06.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_06.getNumParameters();\n\n        if (index < this.p_07.getNumParameters())\n            return this.p_07.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_07.getNumParameters();\n\n        if (index < this.p_08.getNumParameters())\n            return this.p_08.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_08.getNumParameters();\n\n        if (index < this.p_09.getNumParameters())\n            return this.p_09.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_03.getNumParameters() + this.p_04.getNumParameters() + this.p_05.getNumParameters() + this.p_06.getNumParameters() + this.p_07.getNumParameters() + this.p_08.getNumParameters() + this.p_09.getNumParameters();\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_03.getNumParameters())\n            return this.p_03.constrainParameterValue(index, value);\n\n        index -= this.p_03.getNumParameters();\n\n        if (index < this.p_04.getNumParameters())\n            return this.p_04.constrainParameterValue(index, value);\n\n        index -= this.p_04.getNumParameters();\n\n        if (index < this.p_05.getNumParameters())\n            return this.p_05.constrainParameterValue(index, value);\n\n        index -= this.p_05.getNumParameters();\n\n        if (index < this.p_06.getNumParameters())\n            return this.p_06.constrainParameterValue(index, value);\n\n        index -= this.p_06.getNumParameters();\n\n        if (index < this.p_07.getNumParameters())\n            return this.p_07.constrainParameterValue(index, value);\n\n        index -= this.p_07.getNumParameters();\n\n        if (index < this.p_08.getNumParameters())\n            return this.p_08.constrainParameterValue(index, value);\n\n        index -= this.p_08.getNumParameters();\n\n        if (index < this.p_09.getNumParameters())\n            return this.p_09.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
              "subpatches": {
                "p_03": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_04": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_05": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_06": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_07": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_08": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_09": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_01.getNumParameters())\n            return this.p_01.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_01.getNumParameters();\n\n        if (index < this.p_02.getNumParameters())\n            return this.p_02.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_01.getNumParameters())\n            return this.p_01.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_01.getNumParameters();\n\n        if (index < this.p_02.getNumParameters())\n            return this.p_02.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_01.getNumParameters() + this.p_02.getNumParameters();\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_01.getNumParameters())\n            return this.p_01.constrainParameterValue(index, value);\n\n        index -= this.p_01.getNumParameters();\n\n        if (index < this.p_02.getNumParameters())\n            return this.p_02.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "subpatches": {
                    "p_01": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_02": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    }
                  },
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_22": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_14.getNumParameters())\n            return this.p_14.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_14.getNumParameters();\n\n        if (index < this.p_15.getNumParameters())\n            return this.p_15.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_15.getNumParameters();\n\n        if (index < this.p_16.getNumParameters())\n            return this.p_16.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_16.getNumParameters();\n\n        if (index < this.p_17.getNumParameters())\n            return this.p_17.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_17.getNumParameters();\n\n        if (index < this.p_18.getNumParameters())\n            return this.p_18.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_18.getNumParameters();\n\n        if (index < this.p_19.getNumParameters())\n            return this.p_19.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_19.getNumParameters();\n\n        if (index < this.p_20.getNumParameters())\n            return this.p_20.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_14.getNumParameters())\n            return this.p_14.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_14.getNumParameters();\n\n        if (index < this.p_15.getNumParameters())\n            return this.p_15.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_15.getNumParameters();\n\n        if (index < this.p_16.getNumParameters())\n            return this.p_16.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_16.getNumParameters();\n\n        if (index < this.p_17.getNumParameters())\n            return this.p_17.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_17.getNumParameters();\n\n        if (index < this.p_18.getNumParameters())\n            return this.p_18.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_18.getNumParameters();\n\n        if (index < this.p_19.getNumParameters())\n            return this.p_19.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_19.getNumParameters();\n\n        if (index < this.p_20.getNumParameters())\n            return this.p_20.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_14.getNumParameters() + this.p_15.getNumParameters() + this.p_16.getNumParameters() + this.p_17.getNumParameters() + this.p_18.getNumParameters() + this.p_19.getNumParameters() + this.p_20.getNumParameters();\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_14.getNumParameters())\n            return this.p_14.constrainParameterValue(index, value);\n\n        index -= this.p_14.getNumParameters();\n\n        if (index < this.p_15.getNumParameters())\n            return this.p_15.constrainParameterValue(index, value);\n\n        index -= this.p_15.getNumParameters();\n\n        if (index < this.p_16.getNumParameters())\n            return this.p_16.constrainParameterValue(index, value);\n\n        index -= this.p_16.getNumParameters();\n\n        if (index < this.p_17.getNumParameters())\n            return this.p_17.constrainParameterValue(index, value);\n\n        index -= this.p_17.getNumParameters();\n\n        if (index < this.p_18.getNumParameters())\n            return this.p_18.constrainParameterValue(index, value);\n\n        index -= this.p_18.getNumParameters();\n\n        if (index < this.p_19.getNumParameters())\n            return this.p_19.constrainParameterValue(index, value);\n\n        index -= this.p_19.getNumParameters();\n\n        if (index < this.p_20.getNumParameters())\n            return this.p_20.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
              "subpatches": {
                "p_14": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_10.getNumParameters())\n            return this.p_10.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_10.getNumParameters())\n            return this.p_10.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_10.getNumParameters();\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_10.getNumParameters())\n            return this.p_10.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "subpatches": {
                    "p_10": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    }
                  },
                  "isPolyphonic": false
                },
                "p_15": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_11.getNumParameters())\n            return this.p_11.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_11.getNumParameters())\n            return this.p_11.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_11.getNumParameters();\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_11.getNumParameters())\n            return this.p_11.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "subpatches": {
                    "p_11": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    }
                  },
                  "isPolyphonic": false
                },
                "p_16": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_17": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_12.getNumParameters())\n            return this.p_12.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_12.getNumParameters())\n            return this.p_12.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_12.getNumParameters();\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_12.getNumParameters())\n            return this.p_12.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "subpatches": {
                    "p_12": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    }
                  },
                  "isPolyphonic": false
                },
                "p_18": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_19": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_13.getNumParameters())\n            return this.p_13.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_13.getNumParameters())\n            return this.p_13.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_13.getNumParameters();\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_13.getNumParameters())\n            return this.p_13.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "subpatches": {
                    "p_13": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    }
                  },
                  "isPolyphonic": false
                },
                "p_20": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_23": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            }
          },
          "isPolyphonic": false
        },
        "p_177": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_46.getNumParameters())\n            return this.p_46.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_46.getNumParameters();\n\n        if (index < this.p_47.getNumParameters())\n            return this.p_47.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_47.getNumParameters();\n\n        if (index < this.p_48.getNumParameters())\n            return this.p_48.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_48.getNumParameters();\n\n        if (index < this.p_49.getNumParameters())\n            return this.p_49.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_46.getNumParameters())\n            return this.p_46.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_46.getNumParameters();\n\n        if (index < this.p_47.getNumParameters())\n            return this.p_47.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_47.getNumParameters();\n\n        if (index < this.p_48.getNumParameters())\n            return this.p_48.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_48.getNumParameters();\n\n        if (index < this.p_49.getNumParameters())\n            return this.p_49.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_46.getNumParameters() + this.p_47.getNumParameters() + this.p_48.getNumParameters() + this.p_49.getNumParameters();\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_46.getNumParameters())\n            return this.p_46.constrainParameterValue(index, value);\n\n        index -= this.p_46.getNumParameters();\n\n        if (index < this.p_47.getNumParameters())\n            return this.p_47.constrainParameterValue(index, value);\n\n        index -= this.p_47.getNumParameters();\n\n        if (index < this.p_48.getNumParameters())\n            return this.p_48.constrainParameterValue(index, value);\n\n        index -= this.p_48.getNumParameters();\n\n        if (index < this.p_49.getNumParameters())\n            return this.p_49.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
          "subpatches": {
            "p_46": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_30.getNumParameters())\n            return this.p_30.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_30.getNumParameters();\n\n        if (index < this.p_31.getNumParameters())\n            return this.p_31.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_31.getNumParameters();\n\n        if (index < this.p_32.getNumParameters())\n            return this.p_32.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_32.getNumParameters();\n\n        if (index < this.p_33.getNumParameters())\n            return this.p_33.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_33.getNumParameters();\n\n        if (index < this.p_34.getNumParameters())\n            return this.p_34.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_30.getNumParameters())\n            return this.p_30.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_30.getNumParameters();\n\n        if (index < this.p_31.getNumParameters())\n            return this.p_31.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_31.getNumParameters();\n\n        if (index < this.p_32.getNumParameters())\n            return this.p_32.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_32.getNumParameters();\n\n        if (index < this.p_33.getNumParameters())\n            return this.p_33.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_33.getNumParameters();\n\n        if (index < this.p_34.getNumParameters())\n            return this.p_34.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_30.getNumParameters() + this.p_31.getNumParameters() + this.p_32.getNumParameters() + this.p_33.getNumParameters() + this.p_34.getNumParameters();\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_30.getNumParameters())\n            return this.p_30.constrainParameterValue(index, value);\n\n        index -= this.p_30.getNumParameters();\n\n        if (index < this.p_31.getNumParameters())\n            return this.p_31.constrainParameterValue(index, value);\n\n        index -= this.p_31.getNumParameters();\n\n        if (index < this.p_32.getNumParameters())\n            return this.p_32.constrainParameterValue(index, value);\n\n        index -= this.p_32.getNumParameters();\n\n        if (index < this.p_33.getNumParameters())\n            return this.p_33.constrainParameterValue(index, value);\n\n        index -= this.p_33.getNumParameters();\n\n        if (index < this.p_34.getNumParameters())\n            return this.p_34.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
              "subpatches": {
                "p_30": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_31": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_24.getNumParameters())\n            return this.p_24.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_24.getNumParameters();\n\n        if (index < this.p_25.getNumParameters())\n            return this.p_25.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_25.getNumParameters();\n\n        if (index < this.p_26.getNumParameters())\n            return this.p_26.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_26.getNumParameters();\n\n        if (index < this.p_27.getNumParameters())\n            return this.p_27.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_27.getNumParameters();\n\n        if (index < this.p_28.getNumParameters())\n            return this.p_28.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_28.getNumParameters();\n\n        if (index < this.p_29.getNumParameters())\n            return this.p_29.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_24.getNumParameters())\n            return this.p_24.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_24.getNumParameters();\n\n        if (index < this.p_25.getNumParameters())\n            return this.p_25.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_25.getNumParameters();\n\n        if (index < this.p_26.getNumParameters())\n            return this.p_26.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_26.getNumParameters();\n\n        if (index < this.p_27.getNumParameters())\n            return this.p_27.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_27.getNumParameters();\n\n        if (index < this.p_28.getNumParameters())\n            return this.p_28.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_28.getNumParameters();\n\n        if (index < this.p_29.getNumParameters())\n            return this.p_29.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_24.getNumParameters() + this.p_25.getNumParameters() + this.p_26.getNumParameters() + this.p_27.getNumParameters() + this.p_28.getNumParameters() + this.p_29.getNumParameters();\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_24.getNumParameters())\n            return this.p_24.constrainParameterValue(index, value);\n\n        index -= this.p_24.getNumParameters();\n\n        if (index < this.p_25.getNumParameters())\n            return this.p_25.constrainParameterValue(index, value);\n\n        index -= this.p_25.getNumParameters();\n\n        if (index < this.p_26.getNumParameters())\n            return this.p_26.constrainParameterValue(index, value);\n\n        index -= this.p_26.getNumParameters();\n\n        if (index < this.p_27.getNumParameters())\n            return this.p_27.constrainParameterValue(index, value);\n\n        index -= this.p_27.getNumParameters();\n\n        if (index < this.p_28.getNumParameters())\n            return this.p_28.constrainParameterValue(index, value);\n\n        index -= this.p_28.getNumParameters();\n\n        if (index < this.p_29.getNumParameters())\n            return this.p_29.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "subpatches": {
                    "p_24": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_25": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_26": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_27": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_28": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_29": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    }
                  },
                  "isPolyphonic": false
                },
                "p_32": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_33": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_34": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_47": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_39.getNumParameters())\n            return this.p_39.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_39.getNumParameters();\n\n        if (index < this.p_40.getNumParameters())\n            return this.p_40.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_40.getNumParameters();\n\n        if (index < this.p_41.getNumParameters())\n            return this.p_41.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_41.getNumParameters();\n\n        if (index < this.p_42.getNumParameters())\n            return this.p_42.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_42.getNumParameters();\n\n        if (index < this.p_43.getNumParameters())\n            return this.p_43.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_43.getNumParameters();\n\n        if (index < this.p_44.getNumParameters())\n            return this.p_44.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_44.getNumParameters();\n\n        if (index < this.p_45.getNumParameters())\n            return this.p_45.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_39.getNumParameters())\n            return this.p_39.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_39.getNumParameters();\n\n        if (index < this.p_40.getNumParameters())\n            return this.p_40.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_40.getNumParameters();\n\n        if (index < this.p_41.getNumParameters())\n            return this.p_41.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_41.getNumParameters();\n\n        if (index < this.p_42.getNumParameters())\n            return this.p_42.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_42.getNumParameters();\n\n        if (index < this.p_43.getNumParameters())\n            return this.p_43.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_43.getNumParameters();\n\n        if (index < this.p_44.getNumParameters())\n            return this.p_44.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_44.getNumParameters();\n\n        if (index < this.p_45.getNumParameters())\n            return this.p_45.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_39.getNumParameters() + this.p_40.getNumParameters() + this.p_41.getNumParameters() + this.p_42.getNumParameters() + this.p_43.getNumParameters() + this.p_44.getNumParameters() + this.p_45.getNumParameters();\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_39.getNumParameters())\n            return this.p_39.constrainParameterValue(index, value);\n\n        index -= this.p_39.getNumParameters();\n\n        if (index < this.p_40.getNumParameters())\n            return this.p_40.constrainParameterValue(index, value);\n\n        index -= this.p_40.getNumParameters();\n\n        if (index < this.p_41.getNumParameters())\n            return this.p_41.constrainParameterValue(index, value);\n\n        index -= this.p_41.getNumParameters();\n\n        if (index < this.p_42.getNumParameters())\n            return this.p_42.constrainParameterValue(index, value);\n\n        index -= this.p_42.getNumParameters();\n\n        if (index < this.p_43.getNumParameters())\n            return this.p_43.constrainParameterValue(index, value);\n\n        index -= this.p_43.getNumParameters();\n\n        if (index < this.p_44.getNumParameters())\n            return this.p_44.constrainParameterValue(index, value);\n\n        index -= this.p_44.getNumParameters();\n\n        if (index < this.p_45.getNumParameters())\n            return this.p_45.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
              "subpatches": {
                "p_39": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_35.getNumParameters())\n            return this.p_35.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_35.getNumParameters())\n            return this.p_35.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_35.getNumParameters();\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_35.getNumParameters())\n            return this.p_35.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "subpatches": {
                    "p_35": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    }
                  },
                  "isPolyphonic": false
                },
                "p_40": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_36.getNumParameters())\n            return this.p_36.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_36.getNumParameters())\n            return this.p_36.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_36.getNumParameters();\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_36.getNumParameters())\n            return this.p_36.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "subpatches": {
                    "p_36": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    }
                  },
                  "isPolyphonic": false
                },
                "p_41": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_42": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_37.getNumParameters())\n            return this.p_37.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_37.getNumParameters())\n            return this.p_37.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_37.getNumParameters();\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_37.getNumParameters())\n            return this.p_37.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "subpatches": {
                    "p_37": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    }
                  },
                  "isPolyphonic": false
                },
                "p_43": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_44": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_38.getNumParameters())\n            return this.p_38.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_38.getNumParameters())\n            return this.p_38.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_38.getNumParameters();\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_38.getNumParameters())\n            return this.p_38.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "subpatches": {
                    "p_38": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    }
                  },
                  "isPolyphonic": false
                },
                "p_45": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_48": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_49": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            }
          },
          "isPolyphonic": false
        },
        "p_178": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_144.getNumParameters())\n            return this.p_144.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_144.getNumParameters();\n\n        if (index < this.p_145.getNumParameters())\n            return this.p_145.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_145.getNumParameters();\n\n        if (index < this.p_146.getNumParameters())\n            return this.p_146.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_144.getNumParameters())\n            return this.p_144.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_144.getNumParameters();\n\n        if (index < this.p_145.getNumParameters())\n            return this.p_145.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_145.getNumParameters();\n\n        if (index < this.p_146.getNumParameters())\n            return this.p_146.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_144.getNumParameters() + this.p_145.getNumParameters() + this.p_146.getNumParameters();\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_144.getNumParameters())\n            return this.p_144.constrainParameterValue(index, value);\n\n        index -= this.p_144.getNumParameters();\n\n        if (index < this.p_145.getNumParameters())\n            return this.p_145.constrainParameterValue(index, value);\n\n        index -= this.p_145.getNumParameters();\n\n        if (index < this.p_146.getNumParameters())\n            return this.p_146.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
          "subpatches": {
            "p_144": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_128.getNumParameters())\n            return this.p_128.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_128.getNumParameters();\n\n        if (index < this.p_129.getNumParameters())\n            return this.p_129.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_129.getNumParameters();\n\n        if (index < this.p_130.getNumParameters())\n            return this.p_130.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_130.getNumParameters();\n\n        if (index < this.p_131.getNumParameters())\n            return this.p_131.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_128.getNumParameters())\n            return this.p_128.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_128.getNumParameters();\n\n        if (index < this.p_129.getNumParameters())\n            return this.p_129.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_129.getNumParameters();\n\n        if (index < this.p_130.getNumParameters())\n            return this.p_130.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_130.getNumParameters();\n\n        if (index < this.p_131.getNumParameters())\n            return this.p_131.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_128.getNumParameters() + this.p_129.getNumParameters() + this.p_130.getNumParameters() + this.p_131.getNumParameters();\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_128.getNumParameters())\n            return this.p_128.constrainParameterValue(index, value);\n\n        index -= this.p_128.getNumParameters();\n\n        if (index < this.p_129.getNumParameters())\n            return this.p_129.constrainParameterValue(index, value);\n\n        index -= this.p_129.getNumParameters();\n\n        if (index < this.p_130.getNumParameters())\n            return this.p_130.constrainParameterValue(index, value);\n\n        index -= this.p_130.getNumParameters();\n\n        if (index < this.p_131.getNumParameters())\n            return this.p_131.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
              "subpatches": {
                "p_128": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_129": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_114.getNumParameters())\n            return this.p_114.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_114.getNumParameters();\n\n        if (index < this.p_115.getNumParameters())\n            return this.p_115.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_115.getNumParameters();\n\n        if (index < this.p_116.getNumParameters())\n            return this.p_116.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_116.getNumParameters();\n\n        if (index < this.p_117.getNumParameters())\n            return this.p_117.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_117.getNumParameters();\n\n        if (index < this.p_118.getNumParameters())\n            return this.p_118.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_114.getNumParameters())\n            return this.p_114.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_114.getNumParameters();\n\n        if (index < this.p_115.getNumParameters())\n            return this.p_115.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_115.getNumParameters();\n\n        if (index < this.p_116.getNumParameters())\n            return this.p_116.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_116.getNumParameters();\n\n        if (index < this.p_117.getNumParameters())\n            return this.p_117.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_117.getNumParameters();\n\n        if (index < this.p_118.getNumParameters())\n            return this.p_118.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_114.getNumParameters() + this.p_115.getNumParameters() + this.p_116.getNumParameters() + this.p_117.getNumParameters() + this.p_118.getNumParameters();\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_114.getNumParameters())\n            return this.p_114.constrainParameterValue(index, value);\n\n        index -= this.p_114.getNumParameters();\n\n        if (index < this.p_115.getNumParameters())\n            return this.p_115.constrainParameterValue(index, value);\n\n        index -= this.p_115.getNumParameters();\n\n        if (index < this.p_116.getNumParameters())\n            return this.p_116.constrainParameterValue(index, value);\n\n        index -= this.p_116.getNumParameters();\n\n        if (index < this.p_117.getNumParameters())\n            return this.p_117.constrainParameterValue(index, value);\n\n        index -= this.p_117.getNumParameters();\n\n        if (index < this.p_118.getNumParameters())\n            return this.p_118.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "subpatches": {
                    "p_114": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_115": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_116": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_117": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_118": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_50.getNumParameters())\n            return this.p_50.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_50.getNumParameters();\n\n        if (index < this.p_51.getNumParameters())\n            return this.p_51.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_51.getNumParameters();\n\n        if (index < this.p_52.getNumParameters())\n            return this.p_52.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_52.getNumParameters();\n\n        if (index < this.p_53.getNumParameters())\n            return this.p_53.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_53.getNumParameters();\n\n        if (index < this.p_54.getNumParameters())\n            return this.p_54.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_54.getNumParameters();\n\n        if (index < this.p_55.getNumParameters())\n            return this.p_55.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_55.getNumParameters();\n\n        if (index < this.p_56.getNumParameters())\n            return this.p_56.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_56.getNumParameters();\n\n        if (index < this.p_57.getNumParameters())\n            return this.p_57.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_57.getNumParameters();\n\n        if (index < this.p_58.getNumParameters())\n            return this.p_58.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_58.getNumParameters();\n\n        if (index < this.p_59.getNumParameters())\n            return this.p_59.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_59.getNumParameters();\n\n        if (index < this.p_60.getNumParameters())\n            return this.p_60.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_60.getNumParameters();\n\n        if (index < this.p_61.getNumParameters())\n            return this.p_61.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_61.getNumParameters();\n\n        if (index < this.p_62.getNumParameters())\n            return this.p_62.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_62.getNumParameters();\n\n        if (index < this.p_63.getNumParameters())\n            return this.p_63.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_63.getNumParameters();\n\n        if (index < this.p_64.getNumParameters())\n            return this.p_64.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_64.getNumParameters();\n\n        if (index < this.p_65.getNumParameters())\n            return this.p_65.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_65.getNumParameters();\n\n        if (index < this.p_66.getNumParameters())\n            return this.p_66.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_66.getNumParameters();\n\n        if (index < this.p_67.getNumParameters())\n            return this.p_67.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_67.getNumParameters();\n\n        if (index < this.p_68.getNumParameters())\n            return this.p_68.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_68.getNumParameters();\n\n        if (index < this.p_69.getNumParameters())\n            return this.p_69.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_69.getNumParameters();\n\n        if (index < this.p_70.getNumParameters())\n            return this.p_70.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_70.getNumParameters();\n\n        if (index < this.p_71.getNumParameters())\n            return this.p_71.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_71.getNumParameters();\n\n        if (index < this.p_72.getNumParameters())\n            return this.p_72.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_72.getNumParameters();\n\n        if (index < this.p_73.getNumParameters())\n            return this.p_73.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_73.getNumParameters();\n\n        if (index < this.p_74.getNumParameters())\n            return this.p_74.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_74.getNumParameters();\n\n        if (index < this.p_75.getNumParameters())\n            return this.p_75.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_75.getNumParameters();\n\n        if (index < this.p_76.getNumParameters())\n            return this.p_76.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_76.getNumParameters();\n\n        if (index < this.p_77.getNumParameters())\n            return this.p_77.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_77.getNumParameters();\n\n        if (index < this.p_78.getNumParameters())\n            return this.p_78.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_78.getNumParameters();\n\n        if (index < this.p_79.getNumParameters())\n            return this.p_79.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_79.getNumParameters();\n\n        if (index < this.p_80.getNumParameters())\n            return this.p_80.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_80.getNumParameters();\n\n        if (index < this.p_81.getNumParameters())\n            return this.p_81.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_81.getNumParameters();\n\n        if (index < this.p_82.getNumParameters())\n            return this.p_82.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_82.getNumParameters();\n\n        if (index < this.p_83.getNumParameters())\n            return this.p_83.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_83.getNumParameters();\n\n        if (index < this.p_84.getNumParameters())\n            return this.p_84.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_84.getNumParameters();\n\n        if (index < this.p_85.getNumParameters())\n            return this.p_85.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_85.getNumParameters();\n\n        if (index < this.p_86.getNumParameters())\n            return this.p_86.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_86.getNumParameters();\n\n        if (index < this.p_87.getNumParameters())\n            return this.p_87.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_87.getNumParameters();\n\n        if (index < this.p_88.getNumParameters())\n            return this.p_88.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_88.getNumParameters();\n\n        if (index < this.p_89.getNumParameters())\n            return this.p_89.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_89.getNumParameters();\n\n        if (index < this.p_90.getNumParameters())\n            return this.p_90.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_90.getNumParameters();\n\n        if (index < this.p_91.getNumParameters())\n            return this.p_91.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_91.getNumParameters();\n\n        if (index < this.p_92.getNumParameters())\n            return this.p_92.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_92.getNumParameters();\n\n        if (index < this.p_93.getNumParameters())\n            return this.p_93.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_93.getNumParameters();\n\n        if (index < this.p_94.getNumParameters())\n            return this.p_94.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_94.getNumParameters();\n\n        if (index < this.p_95.getNumParameters())\n            return this.p_95.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_95.getNumParameters();\n\n        if (index < this.p_96.getNumParameters())\n            return this.p_96.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_96.getNumParameters();\n\n        if (index < this.p_97.getNumParameters())\n            return this.p_97.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_97.getNumParameters();\n\n        if (index < this.p_98.getNumParameters())\n            return this.p_98.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_98.getNumParameters();\n\n        if (index < this.p_99.getNumParameters())\n            return this.p_99.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_99.getNumParameters();\n\n        if (index < this.p_100.getNumParameters())\n            return this.p_100.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_100.getNumParameters();\n\n        if (index < this.p_101.getNumParameters())\n            return this.p_101.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_101.getNumParameters();\n\n        if (index < this.p_102.getNumParameters())\n            return this.p_102.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_102.getNumParameters();\n\n        if (index < this.p_103.getNumParameters())\n            return this.p_103.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_103.getNumParameters();\n\n        if (index < this.p_104.getNumParameters())\n            return this.p_104.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_104.getNumParameters();\n\n        if (index < this.p_105.getNumParameters())\n            return this.p_105.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_105.getNumParameters();\n\n        if (index < this.p_106.getNumParameters())\n            return this.p_106.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_106.getNumParameters();\n\n        if (index < this.p_107.getNumParameters())\n            return this.p_107.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_107.getNumParameters();\n\n        if (index < this.p_108.getNumParameters())\n            return this.p_108.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_108.getNumParameters();\n\n        if (index < this.p_109.getNumParameters())\n            return this.p_109.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_109.getNumParameters();\n\n        if (index < this.p_110.getNumParameters())\n            return this.p_110.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_110.getNumParameters();\n\n        if (index < this.p_111.getNumParameters())\n            return this.p_111.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_111.getNumParameters();\n\n        if (index < this.p_112.getNumParameters())\n            return this.p_112.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_112.getNumParameters();\n\n        if (index < this.p_113.getNumParameters())\n            return this.p_113.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_50.getNumParameters())\n            return this.p_50.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_50.getNumParameters();\n\n        if (index < this.p_51.getNumParameters())\n            return this.p_51.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_51.getNumParameters();\n\n        if (index < this.p_52.getNumParameters())\n            return this.p_52.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_52.getNumParameters();\n\n        if (index < this.p_53.getNumParameters())\n            return this.p_53.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_53.getNumParameters();\n\n        if (index < this.p_54.getNumParameters())\n            return this.p_54.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_54.getNumParameters();\n\n        if (index < this.p_55.getNumParameters())\n            return this.p_55.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_55.getNumParameters();\n\n        if (index < this.p_56.getNumParameters())\n            return this.p_56.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_56.getNumParameters();\n\n        if (index < this.p_57.getNumParameters())\n            return this.p_57.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_57.getNumParameters();\n\n        if (index < this.p_58.getNumParameters())\n            return this.p_58.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_58.getNumParameters();\n\n        if (index < this.p_59.getNumParameters())\n            return this.p_59.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_59.getNumParameters();\n\n        if (index < this.p_60.getNumParameters())\n            return this.p_60.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_60.getNumParameters();\n\n        if (index < this.p_61.getNumParameters())\n            return this.p_61.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_61.getNumParameters();\n\n        if (index < this.p_62.getNumParameters())\n            return this.p_62.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_62.getNumParameters();\n\n        if (index < this.p_63.getNumParameters())\n            return this.p_63.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_63.getNumParameters();\n\n        if (index < this.p_64.getNumParameters())\n            return this.p_64.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_64.getNumParameters();\n\n        if (index < this.p_65.getNumParameters())\n            return this.p_65.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_65.getNumParameters();\n\n        if (index < this.p_66.getNumParameters())\n            return this.p_66.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_66.getNumParameters();\n\n        if (index < this.p_67.getNumParameters())\n            return this.p_67.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_67.getNumParameters();\n\n        if (index < this.p_68.getNumParameters())\n            return this.p_68.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_68.getNumParameters();\n\n        if (index < this.p_69.getNumParameters())\n            return this.p_69.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_69.getNumParameters();\n\n        if (index < this.p_70.getNumParameters())\n            return this.p_70.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_70.getNumParameters();\n\n        if (index < this.p_71.getNumParameters())\n            return this.p_71.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_71.getNumParameters();\n\n        if (index < this.p_72.getNumParameters())\n            return this.p_72.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_72.getNumParameters();\n\n        if (index < this.p_73.getNumParameters())\n            return this.p_73.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_73.getNumParameters();\n\n        if (index < this.p_74.getNumParameters())\n            return this.p_74.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_74.getNumParameters();\n\n        if (index < this.p_75.getNumParameters())\n            return this.p_75.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_75.getNumParameters();\n\n        if (index < this.p_76.getNumParameters())\n            return this.p_76.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_76.getNumParameters();\n\n        if (index < this.p_77.getNumParameters())\n            return this.p_77.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_77.getNumParameters();\n\n        if (index < this.p_78.getNumParameters())\n            return this.p_78.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_78.getNumParameters();\n\n        if (index < this.p_79.getNumParameters())\n            return this.p_79.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_79.getNumParameters();\n\n        if (index < this.p_80.getNumParameters())\n            return this.p_80.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_80.getNumParameters();\n\n        if (index < this.p_81.getNumParameters())\n            return this.p_81.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_81.getNumParameters();\n\n        if (index < this.p_82.getNumParameters())\n            return this.p_82.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_82.getNumParameters();\n\n        if (index < this.p_83.getNumParameters())\n            return this.p_83.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_83.getNumParameters();\n\n        if (index < this.p_84.getNumParameters())\n            return this.p_84.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_84.getNumParameters();\n\n        if (index < this.p_85.getNumParameters())\n            return this.p_85.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_85.getNumParameters();\n\n        if (index < this.p_86.getNumParameters())\n            return this.p_86.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_86.getNumParameters();\n\n        if (index < this.p_87.getNumParameters())\n            return this.p_87.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_87.getNumParameters();\n\n        if (index < this.p_88.getNumParameters())\n            return this.p_88.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_88.getNumParameters();\n\n        if (index < this.p_89.getNumParameters())\n            return this.p_89.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_89.getNumParameters();\n\n        if (index < this.p_90.getNumParameters())\n            return this.p_90.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_90.getNumParameters();\n\n        if (index < this.p_91.getNumParameters())\n            return this.p_91.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_91.getNumParameters();\n\n        if (index < this.p_92.getNumParameters())\n            return this.p_92.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_92.getNumParameters();\n\n        if (index < this.p_93.getNumParameters())\n            return this.p_93.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_93.getNumParameters();\n\n        if (index < this.p_94.getNumParameters())\n            return this.p_94.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_94.getNumParameters();\n\n        if (index < this.p_95.getNumParameters())\n            return this.p_95.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_95.getNumParameters();\n\n        if (index < this.p_96.getNumParameters())\n            return this.p_96.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_96.getNumParameters();\n\n        if (index < this.p_97.getNumParameters())\n            return this.p_97.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_97.getNumParameters();\n\n        if (index < this.p_98.getNumParameters())\n            return this.p_98.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_98.getNumParameters();\n\n        if (index < this.p_99.getNumParameters())\n            return this.p_99.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_99.getNumParameters();\n\n        if (index < this.p_100.getNumParameters())\n            return this.p_100.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_100.getNumParameters();\n\n        if (index < this.p_101.getNumParameters())\n            return this.p_101.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_101.getNumParameters();\n\n        if (index < this.p_102.getNumParameters())\n            return this.p_102.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_102.getNumParameters();\n\n        if (index < this.p_103.getNumParameters())\n            return this.p_103.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_103.getNumParameters();\n\n        if (index < this.p_104.getNumParameters())\n            return this.p_104.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_104.getNumParameters();\n\n        if (index < this.p_105.getNumParameters())\n            return this.p_105.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_105.getNumParameters();\n\n        if (index < this.p_106.getNumParameters())\n            return this.p_106.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_106.getNumParameters();\n\n        if (index < this.p_107.getNumParameters())\n            return this.p_107.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_107.getNumParameters();\n\n        if (index < this.p_108.getNumParameters())\n            return this.p_108.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_108.getNumParameters();\n\n        if (index < this.p_109.getNumParameters())\n            return this.p_109.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_109.getNumParameters();\n\n        if (index < this.p_110.getNumParameters())\n            return this.p_110.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_110.getNumParameters();\n\n        if (index < this.p_111.getNumParameters())\n            return this.p_111.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_111.getNumParameters();\n\n        if (index < this.p_112.getNumParameters())\n            return this.p_112.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_112.getNumParameters();\n\n        if (index < this.p_113.getNumParameters())\n            return this.p_113.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                      "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_50.getNumParameters() + this.p_51.getNumParameters() + this.p_52.getNumParameters() + this.p_53.getNumParameters() + this.p_54.getNumParameters() + this.p_55.getNumParameters() + this.p_56.getNumParameters() + this.p_57.getNumParameters() + this.p_58.getNumParameters() + this.p_59.getNumParameters() + this.p_60.getNumParameters() + this.p_61.getNumParameters() + this.p_62.getNumParameters() + this.p_63.getNumParameters() + this.p_64.getNumParameters() + this.p_65.getNumParameters() + this.p_66.getNumParameters() + this.p_67.getNumParameters() + this.p_68.getNumParameters() + this.p_69.getNumParameters() + this.p_70.getNumParameters() + this.p_71.getNumParameters() + this.p_72.getNumParameters() + this.p_73.getNumParameters() + this.p_74.getNumParameters() + this.p_75.getNumParameters() + this.p_76.getNumParameters() + this.p_77.getNumParameters() + this.p_78.getNumParameters() + this.p_79.getNumParameters() + this.p_80.getNumParameters() + this.p_81.getNumParameters() + this.p_82.getNumParameters() + this.p_83.getNumParameters() + this.p_84.getNumParameters() + this.p_85.getNumParameters() + this.p_86.getNumParameters() + this.p_87.getNumParameters() + this.p_88.getNumParameters() + this.p_89.getNumParameters() + this.p_90.getNumParameters() + this.p_91.getNumParameters() + this.p_92.getNumParameters() + this.p_93.getNumParameters() + this.p_94.getNumParameters() + this.p_95.getNumParameters() + this.p_96.getNumParameters() + this.p_97.getNumParameters() + this.p_98.getNumParameters() + this.p_99.getNumParameters() + this.p_100.getNumParameters() + this.p_101.getNumParameters() + this.p_102.getNumParameters() + this.p_103.getNumParameters() + this.p_104.getNumParameters() + this.p_105.getNumParameters() + this.p_106.getNumParameters() + this.p_107.getNumParameters() + this.p_108.getNumParameters() + this.p_109.getNumParameters() + this.p_110.getNumParameters() + this.p_111.getNumParameters() + this.p_112.getNumParameters() + this.p_113.getNumParameters();\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_50.getNumParameters())\n            return this.p_50.constrainParameterValue(index, value);\n\n        index -= this.p_50.getNumParameters();\n\n        if (index < this.p_51.getNumParameters())\n            return this.p_51.constrainParameterValue(index, value);\n\n        index -= this.p_51.getNumParameters();\n\n        if (index < this.p_52.getNumParameters())\n            return this.p_52.constrainParameterValue(index, value);\n\n        index -= this.p_52.getNumParameters();\n\n        if (index < this.p_53.getNumParameters())\n            return this.p_53.constrainParameterValue(index, value);\n\n        index -= this.p_53.getNumParameters();\n\n        if (index < this.p_54.getNumParameters())\n            return this.p_54.constrainParameterValue(index, value);\n\n        index -= this.p_54.getNumParameters();\n\n        if (index < this.p_55.getNumParameters())\n            return this.p_55.constrainParameterValue(index, value);\n\n        index -= this.p_55.getNumParameters();\n\n        if (index < this.p_56.getNumParameters())\n            return this.p_56.constrainParameterValue(index, value);\n\n        index -= this.p_56.getNumParameters();\n\n        if (index < this.p_57.getNumParameters())\n            return this.p_57.constrainParameterValue(index, value);\n\n        index -= this.p_57.getNumParameters();\n\n        if (index < this.p_58.getNumParameters())\n            return this.p_58.constrainParameterValue(index, value);\n\n        index -= this.p_58.getNumParameters();\n\n        if (index < this.p_59.getNumParameters())\n            return this.p_59.constrainParameterValue(index, value);\n\n        index -= this.p_59.getNumParameters();\n\n        if (index < this.p_60.getNumParameters())\n            return this.p_60.constrainParameterValue(index, value);\n\n        index -= this.p_60.getNumParameters();\n\n        if (index < this.p_61.getNumParameters())\n            return this.p_61.constrainParameterValue(index, value);\n\n        index -= this.p_61.getNumParameters();\n\n        if (index < this.p_62.getNumParameters())\n            return this.p_62.constrainParameterValue(index, value);\n\n        index -= this.p_62.getNumParameters();\n\n        if (index < this.p_63.getNumParameters())\n            return this.p_63.constrainParameterValue(index, value);\n\n        index -= this.p_63.getNumParameters();\n\n        if (index < this.p_64.getNumParameters())\n            return this.p_64.constrainParameterValue(index, value);\n\n        index -= this.p_64.getNumParameters();\n\n        if (index < this.p_65.getNumParameters())\n            return this.p_65.constrainParameterValue(index, value);\n\n        index -= this.p_65.getNumParameters();\n\n        if (index < this.p_66.getNumParameters())\n            return this.p_66.constrainParameterValue(index, value);\n\n        index -= this.p_66.getNumParameters();\n\n        if (index < this.p_67.getNumParameters())\n            return this.p_67.constrainParameterValue(index, value);\n\n        index -= this.p_67.getNumParameters();\n\n        if (index < this.p_68.getNumParameters())\n            return this.p_68.constrainParameterValue(index, value);\n\n        index -= this.p_68.getNumParameters();\n\n        if (index < this.p_69.getNumParameters())\n            return this.p_69.constrainParameterValue(index, value);\n\n        index -= this.p_69.getNumParameters();\n\n        if (index < this.p_70.getNumParameters())\n            return this.p_70.constrainParameterValue(index, value);\n\n        index -= this.p_70.getNumParameters();\n\n        if (index < this.p_71.getNumParameters())\n            return this.p_71.constrainParameterValue(index, value);\n\n        index -= this.p_71.getNumParameters();\n\n        if (index < this.p_72.getNumParameters())\n            return this.p_72.constrainParameterValue(index, value);\n\n        index -= this.p_72.getNumParameters();\n\n        if (index < this.p_73.getNumParameters())\n            return this.p_73.constrainParameterValue(index, value);\n\n        index -= this.p_73.getNumParameters();\n\n        if (index < this.p_74.getNumParameters())\n            return this.p_74.constrainParameterValue(index, value);\n\n        index -= this.p_74.getNumParameters();\n\n        if (index < this.p_75.getNumParameters())\n            return this.p_75.constrainParameterValue(index, value);\n\n        index -= this.p_75.getNumParameters();\n\n        if (index < this.p_76.getNumParameters())\n            return this.p_76.constrainParameterValue(index, value);\n\n        index -= this.p_76.getNumParameters();\n\n        if (index < this.p_77.getNumParameters())\n            return this.p_77.constrainParameterValue(index, value);\n\n        index -= this.p_77.getNumParameters();\n\n        if (index < this.p_78.getNumParameters())\n            return this.p_78.constrainParameterValue(index, value);\n\n        index -= this.p_78.getNumParameters();\n\n        if (index < this.p_79.getNumParameters())\n            return this.p_79.constrainParameterValue(index, value);\n\n        index -= this.p_79.getNumParameters();\n\n        if (index < this.p_80.getNumParameters())\n            return this.p_80.constrainParameterValue(index, value);\n\n        index -= this.p_80.getNumParameters();\n\n        if (index < this.p_81.getNumParameters())\n            return this.p_81.constrainParameterValue(index, value);\n\n        index -= this.p_81.getNumParameters();\n\n        if (index < this.p_82.getNumParameters())\n            return this.p_82.constrainParameterValue(index, value);\n\n        index -= this.p_82.getNumParameters();\n\n        if (index < this.p_83.getNumParameters())\n            return this.p_83.constrainParameterValue(index, value);\n\n        index -= this.p_83.getNumParameters();\n\n        if (index < this.p_84.getNumParameters())\n            return this.p_84.constrainParameterValue(index, value);\n\n        index -= this.p_84.getNumParameters();\n\n        if (index < this.p_85.getNumParameters())\n            return this.p_85.constrainParameterValue(index, value);\n\n        index -= this.p_85.getNumParameters();\n\n        if (index < this.p_86.getNumParameters())\n            return this.p_86.constrainParameterValue(index, value);\n\n        index -= this.p_86.getNumParameters();\n\n        if (index < this.p_87.getNumParameters())\n            return this.p_87.constrainParameterValue(index, value);\n\n        index -= this.p_87.getNumParameters();\n\n        if (index < this.p_88.getNumParameters())\n            return this.p_88.constrainParameterValue(index, value);\n\n        index -= this.p_88.getNumParameters();\n\n        if (index < this.p_89.getNumParameters())\n            return this.p_89.constrainParameterValue(index, value);\n\n        index -= this.p_89.getNumParameters();\n\n        if (index < this.p_90.getNumParameters())\n            return this.p_90.constrainParameterValue(index, value);\n\n        index -= this.p_90.getNumParameters();\n\n        if (index < this.p_91.getNumParameters())\n            return this.p_91.constrainParameterValue(index, value);\n\n        index -= this.p_91.getNumParameters();\n\n        if (index < this.p_92.getNumParameters())\n            return this.p_92.constrainParameterValue(index, value);\n\n        index -= this.p_92.getNumParameters();\n\n        if (index < this.p_93.getNumParameters())\n            return this.p_93.constrainParameterValue(index, value);\n\n        index -= this.p_93.getNumParameters();\n\n        if (index < this.p_94.getNumParameters())\n            return this.p_94.constrainParameterValue(index, value);\n\n        index -= this.p_94.getNumParameters();\n\n        if (index < this.p_95.getNumParameters())\n            return this.p_95.constrainParameterValue(index, value);\n\n        index -= this.p_95.getNumParameters();\n\n        if (index < this.p_96.getNumParameters())\n            return this.p_96.constrainParameterValue(index, value);\n\n        index -= this.p_96.getNumParameters();\n\n        if (index < this.p_97.getNumParameters())\n            return this.p_97.constrainParameterValue(index, value);\n\n        index -= this.p_97.getNumParameters();\n\n        if (index < this.p_98.getNumParameters())\n            return this.p_98.constrainParameterValue(index, value);\n\n        index -= this.p_98.getNumParameters();\n\n        if (index < this.p_99.getNumParameters())\n            return this.p_99.constrainParameterValue(index, value);\n\n        index -= this.p_99.getNumParameters();\n\n        if (index < this.p_100.getNumParameters())\n            return this.p_100.constrainParameterValue(index, value);\n\n        index -= this.p_100.getNumParameters();\n\n        if (index < this.p_101.getNumParameters())\n            return this.p_101.constrainParameterValue(index, value);\n\n        index -= this.p_101.getNumParameters();\n\n        if (index < this.p_102.getNumParameters())\n            return this.p_102.constrainParameterValue(index, value);\n\n        index -= this.p_102.getNumParameters();\n\n        if (index < this.p_103.getNumParameters())\n            return this.p_103.constrainParameterValue(index, value);\n\n        index -= this.p_103.getNumParameters();\n\n        if (index < this.p_104.getNumParameters())\n            return this.p_104.constrainParameterValue(index, value);\n\n        index -= this.p_104.getNumParameters();\n\n        if (index < this.p_105.getNumParameters())\n            return this.p_105.constrainParameterValue(index, value);\n\n        index -= this.p_105.getNumParameters();\n\n        if (index < this.p_106.getNumParameters())\n            return this.p_106.constrainParameterValue(index, value);\n\n        index -= this.p_106.getNumParameters();\n\n        if (index < this.p_107.getNumParameters())\n            return this.p_107.constrainParameterValue(index, value);\n\n        index -= this.p_107.getNumParameters();\n\n        if (index < this.p_108.getNumParameters())\n            return this.p_108.constrainParameterValue(index, value);\n\n        index -= this.p_108.getNumParameters();\n\n        if (index < this.p_109.getNumParameters())\n            return this.p_109.constrainParameterValue(index, value);\n\n        index -= this.p_109.getNumParameters();\n\n        if (index < this.p_110.getNumParameters())\n            return this.p_110.constrainParameterValue(index, value);\n\n        index -= this.p_110.getNumParameters();\n\n        if (index < this.p_111.getNumParameters())\n            return this.p_111.constrainParameterValue(index, value);\n\n        index -= this.p_111.getNumParameters();\n\n        if (index < this.p_112.getNumParameters())\n            return this.p_112.constrainParameterValue(index, value);\n\n        index -= this.p_112.getNumParameters();\n\n        if (index < this.p_113.getNumParameters())\n            return this.p_113.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
                      "subpatches": {
                        "p_50": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_51": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_52": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_53": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_54": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_55": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_56": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_57": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_58": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_59": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_60": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_61": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_62": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_63": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_64": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_65": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_66": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_67": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_68": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_69": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_70": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_71": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_72": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_73": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_74": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_75": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_76": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_77": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_78": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_79": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_80": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_81": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_82": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_83": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_84": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_85": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_86": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_87": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_88": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_89": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_90": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_91": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_92": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_93": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_94": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_95": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_96": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_97": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_98": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_99": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_100": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_101": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_102": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_103": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_104": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_105": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_106": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_107": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_108": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_109": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_110": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_111": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_112": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_113": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        }
                      },
                      "isPolyphonic": false
                    }
                  },
                  "isPolyphonic": false
                },
                "p_130": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_119.getNumParameters())\n            return this.p_119.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_119.getNumParameters())\n            return this.p_119.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_119.getNumParameters();\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_119.getNumParameters())\n            return this.p_119.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "subpatches": {
                    "p_119": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    }
                  },
                  "isPolyphonic": false
                },
                "p_131": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_127.getNumParameters())\n            return this.p_127.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_127.getNumParameters())\n            return this.p_127.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_127.getNumParameters();\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_127.getNumParameters())\n            return this.p_127.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "subpatches": {
                    "p_127": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n            return normalizedValue;\n        }\n    case 1:\n    case 2:\n    case 3:\n        {\n            value = (value < 0 ? 0 : (value > 100 ? 100 : value));\n            let normalizedValue = (value - 0) / (100 - 0);\n            return normalizedValue;\n        }\n    default:\n        index -= 4;\n\n        if (index < this.p_120.getNumParameters())\n            return this.p_120.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_120.getNumParameters();\n\n        if (index < this.p_121.getNumParameters())\n            return this.p_121.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_121.getNumParameters();\n\n        if (index < this.p_122.getNumParameters())\n            return this.p_122.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_122.getNumParameters();\n\n        if (index < this.p_123.getNumParameters())\n            return this.p_123.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_123.getNumParameters();\n\n        if (index < this.p_124.getNumParameters())\n            return this.p_124.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_124.getNumParameters();\n\n        if (index < this.p_125.getNumParameters())\n            return this.p_125.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_125.getNumParameters();\n\n        if (index < this.p_126.getNumParameters())\n            return this.p_126.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    case 1:\n    case 2:\n    case 3:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (100 - 0);\n            }\n        }\n    default:\n        index -= 4;\n\n        if (index < this.p_120.getNumParameters())\n            return this.p_120.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_120.getNumParameters();\n\n        if (index < this.p_121.getNumParameters())\n            return this.p_121.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_121.getNumParameters();\n\n        if (index < this.p_122.getNumParameters())\n            return this.p_122.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_122.getNumParameters();\n\n        if (index < this.p_123.getNumParameters())\n            return this.p_123.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_123.getNumParameters();\n\n        if (index < this.p_124.getNumParameters())\n            return this.p_124.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_124.getNumParameters();\n\n        if (index < this.p_125.getNumParameters())\n            return this.p_125.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_125.getNumParameters();\n\n        if (index < this.p_126.getNumParameters())\n            return this.p_126.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                      "getNumParameters": "function getNumParameters() {\n    return 4 + this.p_120.getNumParameters() + this.p_121.getNumParameters() + this.p_122.getNumParameters() + this.p_123.getNumParameters() + this.p_124.getNumParameters() + this.p_125.getNumParameters() + this.p_126.getNumParameters();\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    case 0:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 1:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 2:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 3:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    default:\n        index -= 4;\n\n        if (index < this.p_120.getNumParameters())\n            return this.p_120.constrainParameterValue(index, value);\n\n        index -= this.p_120.getNumParameters();\n\n        if (index < this.p_121.getNumParameters())\n            return this.p_121.constrainParameterValue(index, value);\n\n        index -= this.p_121.getNumParameters();\n\n        if (index < this.p_122.getNumParameters())\n            return this.p_122.constrainParameterValue(index, value);\n\n        index -= this.p_122.getNumParameters();\n\n        if (index < this.p_123.getNumParameters())\n            return this.p_123.constrainParameterValue(index, value);\n\n        index -= this.p_123.getNumParameters();\n\n        if (index < this.p_124.getNumParameters())\n            return this.p_124.constrainParameterValue(index, value);\n\n        index -= this.p_124.getNumParameters();\n\n        if (index < this.p_125.getNumParameters())\n            return this.p_125.constrainParameterValue(index, value);\n\n        index -= this.p_125.getNumParameters();\n\n        if (index < this.p_126.getNumParameters())\n            return this.p_126.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
                      "subpatches": {
                        "p_120": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_121": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_122": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_123": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_124": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_125": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        },
                        "p_126": {
                          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                          "subpatches": {},
                          "isPolyphonic": false
                        }
                      },
                      "isPolyphonic": false
                    }
                  },
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_145": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_136.getNumParameters())\n            return this.p_136.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_136.getNumParameters();\n\n        if (index < this.p_137.getNumParameters())\n            return this.p_137.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_137.getNumParameters();\n\n        if (index < this.p_138.getNumParameters())\n            return this.p_138.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_138.getNumParameters();\n\n        if (index < this.p_139.getNumParameters())\n            return this.p_139.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_139.getNumParameters();\n\n        if (index < this.p_140.getNumParameters())\n            return this.p_140.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_140.getNumParameters();\n\n        if (index < this.p_141.getNumParameters())\n            return this.p_141.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_141.getNumParameters();\n\n        if (index < this.p_142.getNumParameters())\n            return this.p_142.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_136.getNumParameters())\n            return this.p_136.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_136.getNumParameters();\n\n        if (index < this.p_137.getNumParameters())\n            return this.p_137.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_137.getNumParameters();\n\n        if (index < this.p_138.getNumParameters())\n            return this.p_138.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_138.getNumParameters();\n\n        if (index < this.p_139.getNumParameters())\n            return this.p_139.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_139.getNumParameters();\n\n        if (index < this.p_140.getNumParameters())\n            return this.p_140.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_140.getNumParameters();\n\n        if (index < this.p_141.getNumParameters())\n            return this.p_141.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_141.getNumParameters();\n\n        if (index < this.p_142.getNumParameters())\n            return this.p_142.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_136.getNumParameters() + this.p_137.getNumParameters() + this.p_138.getNumParameters() + this.p_139.getNumParameters() + this.p_140.getNumParameters() + this.p_141.getNumParameters() + this.p_142.getNumParameters();\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_136.getNumParameters())\n            return this.p_136.constrainParameterValue(index, value);\n\n        index -= this.p_136.getNumParameters();\n\n        if (index < this.p_137.getNumParameters())\n            return this.p_137.constrainParameterValue(index, value);\n\n        index -= this.p_137.getNumParameters();\n\n        if (index < this.p_138.getNumParameters())\n            return this.p_138.constrainParameterValue(index, value);\n\n        index -= this.p_138.getNumParameters();\n\n        if (index < this.p_139.getNumParameters())\n            return this.p_139.constrainParameterValue(index, value);\n\n        index -= this.p_139.getNumParameters();\n\n        if (index < this.p_140.getNumParameters())\n            return this.p_140.constrainParameterValue(index, value);\n\n        index -= this.p_140.getNumParameters();\n\n        if (index < this.p_141.getNumParameters())\n            return this.p_141.constrainParameterValue(index, value);\n\n        index -= this.p_141.getNumParameters();\n\n        if (index < this.p_142.getNumParameters())\n            return this.p_142.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
              "subpatches": {
                "p_136": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_132.getNumParameters())\n            return this.p_132.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_132.getNumParameters())\n            return this.p_132.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_132.getNumParameters();\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_132.getNumParameters())\n            return this.p_132.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "subpatches": {
                    "p_132": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    }
                  },
                  "isPolyphonic": false
                },
                "p_137": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_133.getNumParameters())\n            return this.p_133.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_133.getNumParameters())\n            return this.p_133.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_133.getNumParameters();\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_133.getNumParameters())\n            return this.p_133.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "subpatches": {
                    "p_133": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    }
                  },
                  "isPolyphonic": false
                },
                "p_138": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_139": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_134.getNumParameters())\n            return this.p_134.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_134.getNumParameters())\n            return this.p_134.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_134.getNumParameters();\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_134.getNumParameters())\n            return this.p_134.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "subpatches": {
                    "p_134": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    }
                  },
                  "isPolyphonic": false
                },
                "p_140": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_141": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_135.getNumParameters())\n            return this.p_135.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_135.getNumParameters())\n            return this.p_135.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_135.getNumParameters();\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_135.getNumParameters())\n            return this.p_135.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "subpatches": {
                    "p_135": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    }
                  },
                  "isPolyphonic": false
                },
                "p_142": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_146": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_143.getNumParameters())\n            return this.p_143.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_143.getNumParameters())\n            return this.p_143.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_143.getNumParameters();\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_143.getNumParameters())\n            return this.p_143.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
              "subpatches": {
                "p_143": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            }
          },
          "isPolyphonic": false
        },
        "p_179": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_174.getNumParameters())\n            return this.p_174.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_174.getNumParameters();\n\n        if (index < this.p_175.getNumParameters())\n            return this.p_175.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_174.getNumParameters())\n            return this.p_174.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_174.getNumParameters();\n\n        if (index < this.p_175.getNumParameters())\n            return this.p_175.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_174.getNumParameters() + this.p_175.getNumParameters();\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_174.getNumParameters())\n            return this.p_174.constrainParameterValue(index, value);\n\n        index -= this.p_174.getNumParameters();\n\n        if (index < this.p_175.getNumParameters())\n            return this.p_175.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
          "subpatches": {
            "p_174": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_151.getNumParameters())\n            return this.p_151.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_151.getNumParameters();\n\n        if (index < this.p_152.getNumParameters())\n            return this.p_152.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_152.getNumParameters();\n\n        if (index < this.p_153.getNumParameters())\n            return this.p_153.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_153.getNumParameters();\n\n        if (index < this.p_154.getNumParameters())\n            return this.p_154.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_154.getNumParameters();\n\n        if (index < this.p_155.getNumParameters())\n            return this.p_155.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_155.getNumParameters();\n\n        if (index < this.p_156.getNumParameters())\n            return this.p_156.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_156.getNumParameters();\n\n        if (index < this.p_157.getNumParameters())\n            return this.p_157.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_157.getNumParameters();\n\n        if (index < this.p_158.getNumParameters())\n            return this.p_158.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_158.getNumParameters();\n\n        if (index < this.p_159.getNumParameters())\n            return this.p_159.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_159.getNumParameters();\n\n        if (index < this.p_160.getNumParameters())\n            return this.p_160.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_160.getNumParameters();\n\n        if (index < this.p_161.getNumParameters())\n            return this.p_161.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_161.getNumParameters();\n\n        if (index < this.p_162.getNumParameters())\n            return this.p_162.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_151.getNumParameters())\n            return this.p_151.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_151.getNumParameters();\n\n        if (index < this.p_152.getNumParameters())\n            return this.p_152.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_152.getNumParameters();\n\n        if (index < this.p_153.getNumParameters())\n            return this.p_153.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_153.getNumParameters();\n\n        if (index < this.p_154.getNumParameters())\n            return this.p_154.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_154.getNumParameters();\n\n        if (index < this.p_155.getNumParameters())\n            return this.p_155.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_155.getNumParameters();\n\n        if (index < this.p_156.getNumParameters())\n            return this.p_156.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_156.getNumParameters();\n\n        if (index < this.p_157.getNumParameters())\n            return this.p_157.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_157.getNumParameters();\n\n        if (index < this.p_158.getNumParameters())\n            return this.p_158.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_158.getNumParameters();\n\n        if (index < this.p_159.getNumParameters())\n            return this.p_159.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_159.getNumParameters();\n\n        if (index < this.p_160.getNumParameters())\n            return this.p_160.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_160.getNumParameters();\n\n        if (index < this.p_161.getNumParameters())\n            return this.p_161.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_161.getNumParameters();\n\n        if (index < this.p_162.getNumParameters())\n            return this.p_162.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_151.getNumParameters() + this.p_152.getNumParameters() + this.p_153.getNumParameters() + this.p_154.getNumParameters() + this.p_155.getNumParameters() + this.p_156.getNumParameters() + this.p_157.getNumParameters() + this.p_158.getNumParameters() + this.p_159.getNumParameters() + this.p_160.getNumParameters() + this.p_161.getNumParameters() + this.p_162.getNumParameters();\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_151.getNumParameters())\n            return this.p_151.constrainParameterValue(index, value);\n\n        index -= this.p_151.getNumParameters();\n\n        if (index < this.p_152.getNumParameters())\n            return this.p_152.constrainParameterValue(index, value);\n\n        index -= this.p_152.getNumParameters();\n\n        if (index < this.p_153.getNumParameters())\n            return this.p_153.constrainParameterValue(index, value);\n\n        index -= this.p_153.getNumParameters();\n\n        if (index < this.p_154.getNumParameters())\n            return this.p_154.constrainParameterValue(index, value);\n\n        index -= this.p_154.getNumParameters();\n\n        if (index < this.p_155.getNumParameters())\n            return this.p_155.constrainParameterValue(index, value);\n\n        index -= this.p_155.getNumParameters();\n\n        if (index < this.p_156.getNumParameters())\n            return this.p_156.constrainParameterValue(index, value);\n\n        index -= this.p_156.getNumParameters();\n\n        if (index < this.p_157.getNumParameters())\n            return this.p_157.constrainParameterValue(index, value);\n\n        index -= this.p_157.getNumParameters();\n\n        if (index < this.p_158.getNumParameters())\n            return this.p_158.constrainParameterValue(index, value);\n\n        index -= this.p_158.getNumParameters();\n\n        if (index < this.p_159.getNumParameters())\n            return this.p_159.constrainParameterValue(index, value);\n\n        index -= this.p_159.getNumParameters();\n\n        if (index < this.p_160.getNumParameters())\n            return this.p_160.constrainParameterValue(index, value);\n\n        index -= this.p_160.getNumParameters();\n\n        if (index < this.p_161.getNumParameters())\n            return this.p_161.constrainParameterValue(index, value);\n\n        index -= this.p_161.getNumParameters();\n\n        if (index < this.p_162.getNumParameters())\n            return this.p_162.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
              "subpatches": {
                "p_151": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_152": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_153": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_154": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_155": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_147.getNumParameters())\n            return this.p_147.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_147.getNumParameters();\n\n        if (index < this.p_148.getNumParameters())\n            return this.p_148.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_148.getNumParameters();\n\n        if (index < this.p_149.getNumParameters())\n            return this.p_149.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_147.getNumParameters())\n            return this.p_147.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_147.getNumParameters();\n\n        if (index < this.p_148.getNumParameters())\n            return this.p_148.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_148.getNumParameters();\n\n        if (index < this.p_149.getNumParameters())\n            return this.p_149.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_147.getNumParameters() + this.p_148.getNumParameters() + this.p_149.getNumParameters();\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_147.getNumParameters())\n            return this.p_147.constrainParameterValue(index, value);\n\n        index -= this.p_147.getNumParameters();\n\n        if (index < this.p_148.getNumParameters())\n            return this.p_148.constrainParameterValue(index, value);\n\n        index -= this.p_148.getNumParameters();\n\n        if (index < this.p_149.getNumParameters())\n            return this.p_149.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "subpatches": {
                    "p_147": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_148": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_149": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    }
                  },
                  "isPolyphonic": false
                },
                "p_156": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_150.getNumParameters())\n            return this.p_150.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_150.getNumParameters())\n            return this.p_150.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_150.getNumParameters();\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_150.getNumParameters())\n            return this.p_150.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "subpatches": {
                    "p_150": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    }
                  },
                  "isPolyphonic": false
                },
                "p_157": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_158": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_159": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_160": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_161": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_162": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_175": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_167.getNumParameters())\n            return this.p_167.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_167.getNumParameters();\n\n        if (index < this.p_168.getNumParameters())\n            return this.p_168.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_168.getNumParameters();\n\n        if (index < this.p_169.getNumParameters())\n            return this.p_169.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_169.getNumParameters();\n\n        if (index < this.p_170.getNumParameters())\n            return this.p_170.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_170.getNumParameters();\n\n        if (index < this.p_171.getNumParameters())\n            return this.p_171.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_171.getNumParameters();\n\n        if (index < this.p_172.getNumParameters())\n            return this.p_172.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_172.getNumParameters();\n\n        if (index < this.p_173.getNumParameters())\n            return this.p_173.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_167.getNumParameters())\n            return this.p_167.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_167.getNumParameters();\n\n        if (index < this.p_168.getNumParameters())\n            return this.p_168.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_168.getNumParameters();\n\n        if (index < this.p_169.getNumParameters())\n            return this.p_169.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_169.getNumParameters();\n\n        if (index < this.p_170.getNumParameters())\n            return this.p_170.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_170.getNumParameters();\n\n        if (index < this.p_171.getNumParameters())\n            return this.p_171.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_171.getNumParameters();\n\n        if (index < this.p_172.getNumParameters())\n            return this.p_172.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_172.getNumParameters();\n\n        if (index < this.p_173.getNumParameters())\n            return this.p_173.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_167.getNumParameters() + this.p_168.getNumParameters() + this.p_169.getNumParameters() + this.p_170.getNumParameters() + this.p_171.getNumParameters() + this.p_172.getNumParameters() + this.p_173.getNumParameters();\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_167.getNumParameters())\n            return this.p_167.constrainParameterValue(index, value);\n\n        index -= this.p_167.getNumParameters();\n\n        if (index < this.p_168.getNumParameters())\n            return this.p_168.constrainParameterValue(index, value);\n\n        index -= this.p_168.getNumParameters();\n\n        if (index < this.p_169.getNumParameters())\n            return this.p_169.constrainParameterValue(index, value);\n\n        index -= this.p_169.getNumParameters();\n\n        if (index < this.p_170.getNumParameters())\n            return this.p_170.constrainParameterValue(index, value);\n\n        index -= this.p_170.getNumParameters();\n\n        if (index < this.p_171.getNumParameters())\n            return this.p_171.constrainParameterValue(index, value);\n\n        index -= this.p_171.getNumParameters();\n\n        if (index < this.p_172.getNumParameters())\n            return this.p_172.constrainParameterValue(index, value);\n\n        index -= this.p_172.getNumParameters();\n\n        if (index < this.p_173.getNumParameters())\n            return this.p_173.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
              "subpatches": {
                "p_167": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_163.getNumParameters())\n            return this.p_163.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_163.getNumParameters())\n            return this.p_163.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_163.getNumParameters();\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_163.getNumParameters())\n            return this.p_163.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "subpatches": {
                    "p_163": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    }
                  },
                  "isPolyphonic": false
                },
                "p_168": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_164.getNumParameters())\n            return this.p_164.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_164.getNumParameters())\n            return this.p_164.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_164.getNumParameters();\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_164.getNumParameters())\n            return this.p_164.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "subpatches": {
                    "p_164": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    }
                  },
                  "isPolyphonic": false
                },
                "p_169": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_170": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_165.getNumParameters())\n            return this.p_165.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_165.getNumParameters())\n            return this.p_165.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_165.getNumParameters();\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_165.getNumParameters())\n            return this.p_165.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "subpatches": {
                    "p_165": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    }
                  },
                  "isPolyphonic": false
                },
                "p_171": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_172": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_166.getNumParameters())\n            return this.p_166.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_166.getNumParameters())\n            return this.p_166.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_166.getNumParameters();\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_166.getNumParameters())\n            return this.p_166.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "subpatches": {
                    "p_166": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    }
                  },
                  "isPolyphonic": false
                },
                "p_173": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            }
          },
          "isPolyphonic": false
        },
        "p_180": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "subpatches": {},
          "isPolyphonic": false
        }
      },
      "isPolyphonic": false
    },
    "presetid": "rnbo",
    "meta": {
      "architecture": "x64",
      "filename": "----RSS_SEQ_003_RNBO_007.maxpat",
      "maxversion": "8.6.0",
      "rnboversion": "1.1.1"
    }
  },
  "presets": [
    {
      "name": "untitled",
      "preset": {
        "__sps": {
          "CHANNEL_002": {
            "__sps": {
              "list???": {
                "__sps": {
                  "attenuate": {},
                  "attenuate[1]": {},
                  "attenuate[2]": {},
                  "mod": {
                    "__sps": {
                      "p_obj-1": {}
                    }
                  },
                  "pitch": {
                    "__sps": {
                      "p_obj-1": {}
                    }
                  },
                  "probs": {
                    "__sps": {
                      "p_obj-1": {}
                    }
                  },
                  "velocity": {
                    "__sps": {
                      "p_obj-1": {}
                    }
                  }
                }
              },
              "p_obj-2": {
                "__sps": {
                  "filter_env_lp": {},
                  "hp": {},
                  "p_obj-1": {},
                  "p_obj-12": {
                    "__sps": {
                      "attenuate": {},
                      "scale": {}
                    }
                  },
                  "p_obj-19": {},
                  "reverb": {}
                }
              },
              "p_obj-6": {}
            }
          },
          "CHANNEL_003": {
            "__sps": {
              "list???": {
                "__sps": {
                  "attenuate": {},
                  "attenuate[1]": {},
                  "attenuate[2]": {},
                  "mod": {
                    "__sps": {
                      "p_obj-1": {}
                    }
                  },
                  "pitch": {
                    "__sps": {
                      "p_obj-1": {}
                    }
                  },
                  "probs": {
                    "__sps": {
                      "p_obj-1": {}
                    }
                  },
                  "velocity": {
                    "__sps": {
                      "p_obj-1": {}
                    }
                  }
                }
              },
              "p_obj-3": {
                "__sps": {
                  "amp_envelope": {},
                  "filter_waveshape": {},
                  "free_verb": {},
                  "sqaure_FM": {
                    "__sps": {
                      "fm": {},
                      "fm[1]": {},
                      "fm[2]": {},
                      "fm[3]": {},
                      "fm[4]": {},
                      "fm[5]": {}
                    }
                  }
                }
              },
              "p_obj-5": {},
              "p_obj-6": {}
            }
          },
          "CHANNEL_004": {
            "__sps": {
              "bass": {
                "__sps": {
                  "CURVE": {
                    "__sps": {
                      "p_obj-52": {}
                    }
                  },
                  "p_obj-14": {
                    "__sps": {
                      "p_obj-12": {},
                      "p_obj-16": {},
                      "p_obj-37": {},
                      "p_obj-48": {
                        "__sps": {
                          "phasor": {},
                          "phasor[10]": {},
                          "phasor[11]": {},
                          "phasor[12]": {},
                          "phasor[13]": {},
                          "phasor[14]": {},
                          "phasor[15]": {},
                          "phasor[16]": {},
                          "phasor[17]": {},
                          "phasor[18]": {},
                          "phasor[19]": {},
                          "phasor[1]": {},
                          "phasor[20]": {},
                          "phasor[21]": {},
                          "phasor[22]": {},
                          "phasor[23]": {},
                          "phasor[24]": {},
                          "phasor[25]": {},
                          "phasor[26]": {},
                          "phasor[27]": {},
                          "phasor[28]": {},
                          "phasor[29]": {},
                          "phasor[2]": {},
                          "phasor[30]": {},
                          "phasor[31]": {},
                          "phasor[32]": {},
                          "phasor[33]": {},
                          "phasor[34]": {},
                          "phasor[35]": {},
                          "phasor[36]": {},
                          "phasor[37]": {},
                          "phasor[38]": {},
                          "phasor[39]": {},
                          "phasor[3]": {},
                          "phasor[40]": {},
                          "phasor[41]": {},
                          "phasor[42]": {},
                          "phasor[43]": {},
                          "phasor[44]": {},
                          "phasor[45]": {},
                          "phasor[46]": {},
                          "phasor[47]": {},
                          "phasor[48]": {},
                          "phasor[49]": {},
                          "phasor[4]": {},
                          "phasor[50]": {},
                          "phasor[51]": {},
                          "phasor[52]": {},
                          "phasor[53]": {},
                          "phasor[54]": {},
                          "phasor[55]": {},
                          "phasor[56]": {},
                          "phasor[57]": {},
                          "phasor[58]": {},
                          "phasor[59]": {},
                          "phasor[5]": {},
                          "phasor[60]": {},
                          "phasor[61]": {},
                          "phasor[62]": {},
                          "phasor[63]": {},
                          "phasor[6]": {},
                          "phasor[7]": {},
                          "phasor[8]": {},
                          "phasor[9]": {}
                        }
                      },
                      "p_obj-61": {}
                    }
                  },
                  "p_obj-23": {
                    "__sps": {
                      "reverb": {
                        "__sps": {
                          "Blur~": {},
                          "CombL~": {},
                          "CombR~": {},
                          "Damp~": {},
                          "RoomA~": {},
                          "RoomB~": {},
                          "Shuffle~": {}
                        },
                        "diff": {
                          "value": 50
                        },
                        "jitter": {
                          "value": 50
                        },
                        "mix": {
                          "value": 1
                        },
                        "size": {
                          "value": 50
                        }
                      }
                    }
                  }
                }
              },
              "list???": {
                "__sps": {
                  "attenuate": {},
                  "attenuate[1]": {},
                  "attenuate[2]": {},
                  "mod": {
                    "__sps": {
                      "p_obj-1": {}
                    }
                  },
                  "pitch": {
                    "__sps": {
                      "p_obj-1": {}
                    }
                  },
                  "probs": {
                    "__sps": {
                      "p_obj-1": {}
                    }
                  },
                  "velocity": {
                    "__sps": {
                      "p_obj-1": {}
                    }
                  }
                }
              },
              "p_obj-6": {}
            }
          },
          "p_obj-13": {
            "__sps": {
              "list???": {
                "__sps": {
                  "attenuate": {},
                  "attenuate[1]": {},
                  "attenuate[2]": {},
                  "mod": {
                    "__sps": {
                      "p_obj-1": {}
                    }
                  },
                  "pitch": {
                    "__sps": {
                      "p_obj-1": {}
                    }
                  },
                  "probs": {
                    "__sps": {
                      "p_obj-1": {}
                    }
                  },
                  "velocity": {
                    "__sps": {
                      "p_obj-1": {}
                    }
                  }
                }
              },
              "p_obj-69": {
                "__sps": {
                  "p_obj-1": {
                    "__sps": {
                      "p_obj-16": {},
                      "p_obj-36": {},
                      "p_obj-78": {}
                    }
                  },
                  "p_obj-104": {},
                  "p_obj-2": {},
                  "p_obj-3": {},
                  "p_obj-4": {},
                  "p_obj-5": {
                    "__sps": {
                      "p_obj-20": {}
                    }
                  },
                  "p_obj-82": {},
                  "p_obj-85": {},
                  "p_obj-88": {},
                  "p_obj-93": {},
                  "p_obj-99": {}
                }
              }
            }
          },
          "p_obj-26": {}
        }
      }
    }
  ],
  "src": [
    {
      "code": "",
      "compression": "zlib",
      "encoding": "base64",
      "type": "wasm"
    }
  ]
}