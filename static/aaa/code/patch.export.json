{
  "desc": {
    "parameters": [],
    "numParameters": 0,
    "numSignalInParameters": 0,
    "numSignalOutParameters": 0,
    "numInputChannels": 0,
    "numOutputChannels": 1,
    "numMidiInputPorts": 0,
    "numMidiOutputPorts": 0,
    "externalDataRefs": [
      {
        "id": "b.0",
        "type": "Float32Buffer"
      },
      {
        "id": "b.1",
        "type": "Float32Buffer"
      },
      {
        "id": "b.2",
        "type": "Float32Buffer"
      },
      {
        "id": "b.3",
        "type": "Float32Buffer"
      },
      {
        "id": "b.4",
        "type": "Float32Buffer"
      },
      {
        "id": "b.5",
        "type": "Float32Buffer"
      },
      {
        "id": "b.6",
        "type": "Float32Buffer"
      },
      {
        "id": "b.7",
        "type": "Float32Buffer"
      },
      {
        "id": "b.8",
        "type": "Float32Buffer"
      },
      {
        "id": "b.9",
        "type": "Float32Buffer"
      },
      {
        "id": "b.10",
        "type": "Float32Buffer"
      },
      {
        "id": "b.11",
        "type": "Float32Buffer"
      },
      {
        "id": "b.12",
        "type": "Float32Buffer"
      },
      {
        "id": "b.13",
        "type": "Float32Buffer"
      },
      {
        "id": "b.14",
        "type": "Float32Buffer"
      },
      {
        "id": "b.15",
        "type": "Float32Buffer"
      },
      {
        "id": "b.16",
        "type": "Float32Buffer"
      },
      {
        "id": "b.17",
        "type": "Float32Buffer"
      },
      {
        "id": "b.18",
        "type": "Float32Buffer"
      },
      {
        "id": "b.19",
        "type": "Float32Buffer"
      },
      {
        "id": "b.20",
        "type": "Float32Buffer"
      },
      {
        "id": "b.21",
        "type": "Float32Buffer"
      },
      {
        "id": "b.22",
        "type": "Float32Buffer"
      },
      {
        "id": "b.23",
        "type": "Float32Buffer"
      },
      {
        "id": "b.24",
        "type": "Float32Buffer"
      },
      {
        "id": "b.25",
        "type": "Float32Buffer"
      },
      {
        "id": "b.26",
        "type": "Float32Buffer"
      },
      {
        "id": "b.27",
        "type": "Float32Buffer"
      },
      {
        "id": "b.28",
        "type": "Float32Buffer"
      },
      {
        "id": "b.29",
        "type": "Float32Buffer"
      },
      {
        "id": "b.30",
        "type": "Float32Buffer"
      },
      {
        "id": "b.31",
        "type": "Float32Buffer"
      },
      {
        "id": "b.32",
        "type": "Float32Buffer"
      },
      {
        "id": "b.33",
        "type": "Float32Buffer"
      },
      {
        "id": "b.34",
        "type": "Float32Buffer"
      },
      {
        "id": "b.35",
        "type": "Float32Buffer"
      },
      {
        "id": "b.36",
        "type": "Float32Buffer"
      },
      {
        "id": "b.37",
        "type": "Float32Buffer"
      },
      {
        "id": "b.38",
        "type": "Float32Buffer"
      },
      {
        "id": "b.39",
        "type": "Float32Buffer"
      },
      {
        "id": "b.40",
        "type": "Float32Buffer"
      },
      {
        "id": "b.41",
        "type": "Float32Buffer"
      },
      {
        "id": "b.42",
        "type": "Float32Buffer"
      },
      {
        "id": "b.43",
        "type": "Float32Buffer"
      },
      {
        "id": "b.44",
        "type": "Float32Buffer"
      },
      {
        "id": "b.45",
        "type": "Float32Buffer"
      },
      {
        "id": "b.46",
        "type": "Float32Buffer"
      },
      {
        "id": "b.47",
        "type": "Float32Buffer"
      },
      {
        "id": "b.48",
        "type": "Float32Buffer"
      },
      {
        "id": "b.49",
        "type": "Float32Buffer"
      },
      {
        "id": "samples",
        "type": "Float32MultiBuffer"
      }
    ],
    "patcherSerial": 0,
    "inports": [
      {
        "tag": "fm1_listener",
        "meta": ""
      },
      {
        "tag": "fm1_unision",
        "meta": ""
      },
      {
        "tag": "fm2_listener",
        "meta": ""
      },
      {
        "tag": "fm2_unision",
        "meta": ""
      },
      {
        "tag": "perc_listener",
        "meta": ""
      },
      {
        "tag": "speed",
        "meta": ""
      },
      {
        "tag": "b_mode",
        "meta": ""
      },
      {
        "tag": "state",
        "meta": ""
      },
      {
        "tag": "b_steps",
        "meta": ""
      },
      {
        "tag": "c_listener",
        "meta": ""
      },
      {
        "tag": "c_mode",
        "meta": ""
      },
      {
        "tag": "c_steps",
        "meta": ""
      },
      {
        "tag": "a_mode",
        "meta": ""
      },
      {
        "tag": "a_steps",
        "meta": ""
      },
      {
        "tag": "fm1_listener",
        "meta": ""
      },
      {
        "tag": "fm1_r_freq",
        "meta": ""
      },
      {
        "tag": "fm1_r_c1ratio",
        "meta": ""
      },
      {
        "tag": "fm1_r_c2ratio",
        "meta": ""
      },
      {
        "tag": "fm1_r_c3ratio",
        "meta": ""
      },
      {
        "tag": "fm1_r_3to1",
        "meta": ""
      },
      {
        "tag": "fm1_r_2to1",
        "meta": ""
      },
      {
        "tag": "fm1_r_3to2",
        "meta": ""
      },
      {
        "tag": "fm1_r_c1release",
        "meta": ""
      },
      {
        "tag": "fm1_r_c2release",
        "meta": ""
      },
      {
        "tag": "fm1_r_c3release",
        "meta": ""
      },
      {
        "tag": "fm1_r_op1gain",
        "meta": ""
      },
      {
        "tag": "fm1_r_op2gain",
        "meta": ""
      },
      {
        "tag": "fm1_r_op3gain",
        "meta": ""
      },
      {
        "tag": "fm1_r_gain",
        "meta": ""
      },
      {
        "tag": "fm1_freq",
        "meta": ""
      },
      {
        "tag": "fm1_c1ratio",
        "meta": ""
      },
      {
        "tag": "fm1_c2ratio",
        "meta": ""
      },
      {
        "tag": "fm1_c3ratio",
        "meta": ""
      },
      {
        "tag": "fm1_3to1",
        "meta": ""
      },
      {
        "tag": "fm1_2to1",
        "meta": ""
      },
      {
        "tag": "fm1_3to2",
        "meta": ""
      },
      {
        "tag": "fm1_c1release",
        "meta": ""
      },
      {
        "tag": "fm1_c2release",
        "meta": ""
      },
      {
        "tag": "fm1_c3release",
        "meta": ""
      },
      {
        "tag": "fm1_op1gain",
        "meta": ""
      },
      {
        "tag": "fm1_op2gain",
        "meta": ""
      },
      {
        "tag": "fm1_op3gain",
        "meta": ""
      },
      {
        "tag": "fm1_gain",
        "meta": ""
      },
      {
        "tag": "fm2_listener",
        "meta": ""
      },
      {
        "tag": "fm2_freq",
        "meta": ""
      },
      {
        "tag": "fm2_c1ratio",
        "meta": ""
      },
      {
        "tag": "fm2_c2ratio",
        "meta": ""
      },
      {
        "tag": "fm2_c3ratio",
        "meta": ""
      },
      {
        "tag": "fm2_3to1",
        "meta": ""
      },
      {
        "tag": "fm2_2to1",
        "meta": ""
      },
      {
        "tag": "fm2_3to2",
        "meta": ""
      },
      {
        "tag": "fm2_c1release",
        "meta": ""
      },
      {
        "tag": "fm2_c2release",
        "meta": ""
      },
      {
        "tag": "fm2_c3release",
        "meta": ""
      },
      {
        "tag": "fm2_op1gain",
        "meta": ""
      },
      {
        "tag": "fm2_op2gain",
        "meta": ""
      },
      {
        "tag": "fm2_op3gain",
        "meta": ""
      },
      {
        "tag": "fm2_gain",
        "meta": ""
      },
      {
        "tag": "fm2_r_freq",
        "meta": ""
      },
      {
        "tag": "fm2_r_c1ratio",
        "meta": ""
      },
      {
        "tag": "fm2_r_c2ratio",
        "meta": ""
      },
      {
        "tag": "fm2_r_c3ratio",
        "meta": ""
      },
      {
        "tag": "fm2_r_3to1",
        "meta": ""
      },
      {
        "tag": "fm2_r_2to1",
        "meta": ""
      },
      {
        "tag": "fm2_r_3to2",
        "meta": ""
      },
      {
        "tag": "fm2_r_c1release",
        "meta": ""
      },
      {
        "tag": "fm2_r_c2release",
        "meta": ""
      },
      {
        "tag": "fm2_r_c3release",
        "meta": ""
      },
      {
        "tag": "fm2_r_op1gain",
        "meta": ""
      },
      {
        "tag": "fm2_r_op2gain",
        "meta": ""
      },
      {
        "tag": "fm2_r_op3gain",
        "meta": ""
      },
      {
        "tag": "fm2_r_gain",
        "meta": ""
      },
      {
        "tag": "perc_sound",
        "meta": ""
      },
      {
        "tag": "perc_transpose",
        "meta": ""
      },
      {
        "tag": "perc_velocity",
        "meta": ""
      },
      {
        "tag": "perc_duration",
        "meta": ""
      }
    ],
    "outports": [
      {
        "tag": "pattern",
        "meta": ""
      },
      {
        "tag": "c_event",
        "meta": ""
      },
      {
        "tag": "b_event",
        "meta": ""
      },
      {
        "tag": "a_event",
        "meta": ""
      },
      {
        "tag": "b_index",
        "meta": ""
      },
      {
        "tag": "c_index",
        "meta": ""
      },
      {
        "tag": "filter",
        "meta": ""
      }
    ],
    "inlets": [],
    "outlets": [
      {
        "type": "signal",
        "index": 1,
        "tag": "out1",
        "meta": ""
      }
    ],
    "paramConversion": {
      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_83.getNumParameters())\n            return this.p_83.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_83.getNumParameters();\n\n        if (index < this.p_84.getNumParameters())\n            return this.p_84.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_84.getNumParameters();\n\n        if (index < this.p_85.getNumParameters())\n            return this.p_85.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_85.getNumParameters();\n\n        if (index < this.p_86.getNumParameters())\n            return this.p_86.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_86.getNumParameters();\n\n        if (index < this.p_87.getNumParameters())\n            return this.p_87.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_87.getNumParameters();\n\n        if (index < this.p_88.getNumParameters())\n            return this.p_88.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_88.getNumParameters();\n\n        if (index < this.p_89.getNumParameters())\n            return this.p_89.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_89.getNumParameters();\n\n        if (index < this.p_90.getNumParameters())\n            return this.p_90.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_90.getNumParameters();\n\n        if (index < this.p_91.getNumParameters())\n            return this.p_91.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_91.getNumParameters();\n\n        if (index < this.p_92.getNumParameters())\n            return this.p_92.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_92.getNumParameters();\n\n        if (index < this.p_93.getNumParameters())\n            return this.p_93.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_93.getNumParameters();\n\n        if (index < this.p_94.getNumParameters())\n            return this.p_94.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_94.getNumParameters();\n\n        if (index < this.p_95.getNumParameters())\n            return this.p_95.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_95.getNumParameters();\n\n        if (index < this.p_96.getNumParameters())\n            return this.p_96.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_96.getNumParameters();\n\n        if (index < this.p_97.getNumParameters())\n            return this.p_97.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_97.getNumParameters();\n\n        if (index < this.p_98.getNumParameters())\n            return this.p_98.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_98.getNumParameters();\n\n        if (index < this.p_99.getNumParameters())\n            return this.p_99.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_99.getNumParameters();\n\n        if (index < this.p_100.getNumParameters())\n            return this.p_100.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_100.getNumParameters();\n\n        if (index < this.p_101.getNumParameters())\n            return this.p_101.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_83.getNumParameters())\n            return this.p_83.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_83.getNumParameters();\n\n        if (index < this.p_84.getNumParameters())\n            return this.p_84.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_84.getNumParameters();\n\n        if (index < this.p_85.getNumParameters())\n            return this.p_85.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_85.getNumParameters();\n\n        if (index < this.p_86.getNumParameters())\n            return this.p_86.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_86.getNumParameters();\n\n        if (index < this.p_87.getNumParameters())\n            return this.p_87.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_87.getNumParameters();\n\n        if (index < this.p_88.getNumParameters())\n            return this.p_88.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_88.getNumParameters();\n\n        if (index < this.p_89.getNumParameters())\n            return this.p_89.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_89.getNumParameters();\n\n        if (index < this.p_90.getNumParameters())\n            return this.p_90.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_90.getNumParameters();\n\n        if (index < this.p_91.getNumParameters())\n            return this.p_91.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_91.getNumParameters();\n\n        if (index < this.p_92.getNumParameters())\n            return this.p_92.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_92.getNumParameters();\n\n        if (index < this.p_93.getNumParameters())\n            return this.p_93.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_93.getNumParameters();\n\n        if (index < this.p_94.getNumParameters())\n            return this.p_94.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_94.getNumParameters();\n\n        if (index < this.p_95.getNumParameters())\n            return this.p_95.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_95.getNumParameters();\n\n        if (index < this.p_96.getNumParameters())\n            return this.p_96.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_96.getNumParameters();\n\n        if (index < this.p_97.getNumParameters())\n            return this.p_97.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_97.getNumParameters();\n\n        if (index < this.p_98.getNumParameters())\n            return this.p_98.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_98.getNumParameters();\n\n        if (index < this.p_99.getNumParameters())\n            return this.p_99.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_99.getNumParameters();\n\n        if (index < this.p_100.getNumParameters())\n            return this.p_100.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_100.getNumParameters();\n\n        if (index < this.p_101.getNumParameters())\n            return this.p_101.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
      "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_83.getNumParameters() + this.p_84.getNumParameters() + this.p_85.getNumParameters() + this.p_86.getNumParameters() + this.p_87.getNumParameters() + this.p_88.getNumParameters() + this.p_89.getNumParameters() + this.p_90.getNumParameters() + this.p_91.getNumParameters() + this.p_92.getNumParameters() + this.p_93.getNumParameters() + this.p_94.getNumParameters() + this.p_95.getNumParameters() + this.p_96.getNumParameters() + this.p_97.getNumParameters() + this.p_98.getNumParameters() + this.p_99.getNumParameters() + this.p_100.getNumParameters() + this.p_101.getNumParameters();\n}",
      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_83.getNumParameters())\n            return this.p_83.constrainParameterValue(index, value);\n\n        index -= this.p_83.getNumParameters();\n\n        if (index < this.p_84.getNumParameters())\n            return this.p_84.constrainParameterValue(index, value);\n\n        index -= this.p_84.getNumParameters();\n\n        if (index < this.p_85.getNumParameters())\n            return this.p_85.constrainParameterValue(index, value);\n\n        index -= this.p_85.getNumParameters();\n\n        if (index < this.p_86.getNumParameters())\n            return this.p_86.constrainParameterValue(index, value);\n\n        index -= this.p_86.getNumParameters();\n\n        if (index < this.p_87.getNumParameters())\n            return this.p_87.constrainParameterValue(index, value);\n\n        index -= this.p_87.getNumParameters();\n\n        if (index < this.p_88.getNumParameters())\n            return this.p_88.constrainParameterValue(index, value);\n\n        index -= this.p_88.getNumParameters();\n\n        if (index < this.p_89.getNumParameters())\n            return this.p_89.constrainParameterValue(index, value);\n\n        index -= this.p_89.getNumParameters();\n\n        if (index < this.p_90.getNumParameters())\n            return this.p_90.constrainParameterValue(index, value);\n\n        index -= this.p_90.getNumParameters();\n\n        if (index < this.p_91.getNumParameters())\n            return this.p_91.constrainParameterValue(index, value);\n\n        index -= this.p_91.getNumParameters();\n\n        if (index < this.p_92.getNumParameters())\n            return this.p_92.constrainParameterValue(index, value);\n\n        index -= this.p_92.getNumParameters();\n\n        if (index < this.p_93.getNumParameters())\n            return this.p_93.constrainParameterValue(index, value);\n\n        index -= this.p_93.getNumParameters();\n\n        if (index < this.p_94.getNumParameters())\n            return this.p_94.constrainParameterValue(index, value);\n\n        index -= this.p_94.getNumParameters();\n\n        if (index < this.p_95.getNumParameters())\n            return this.p_95.constrainParameterValue(index, value);\n\n        index -= this.p_95.getNumParameters();\n\n        if (index < this.p_96.getNumParameters())\n            return this.p_96.constrainParameterValue(index, value);\n\n        index -= this.p_96.getNumParameters();\n\n        if (index < this.p_97.getNumParameters())\n            return this.p_97.constrainParameterValue(index, value);\n\n        index -= this.p_97.getNumParameters();\n\n        if (index < this.p_98.getNumParameters())\n            return this.p_98.constrainParameterValue(index, value);\n\n        index -= this.p_98.getNumParameters();\n\n        if (index < this.p_99.getNumParameters())\n            return this.p_99.constrainParameterValue(index, value);\n\n        index -= this.p_99.getNumParameters();\n\n        if (index < this.p_100.getNumParameters())\n            return this.p_100.constrainParameterValue(index, value);\n\n        index -= this.p_100.getNumParameters();\n\n        if (index < this.p_101.getNumParameters())\n            return this.p_101.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
      "subpatches": {
        "p_83": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "subpatches": {},
          "isPolyphonic": false
        },
        "p_84": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "subpatches": {},
          "isPolyphonic": false
        },
        "p_85": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_05[0].getNumParameters()) {\n            {\n                return this.p_05[0].convertToNormalizedParameterValue(index, value);\n            }\n        }\n\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_05[0].getNumParameters()) {\n            {\n                return this.p_05[0].convertFromNormalizedParameterValue(index, value);\n            }\n        }\n\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_05[0].getNumParameters();\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_05[0].getNumParameters()) {\n            {\n                return this.p_05[0].constrainParameterValue(index, value);\n            }\n        }\n\n        return value;\n    }\n}",
          "subpatches": {
            "p_05": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_01.getNumParameters())\n            return this.p_01.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_01.getNumParameters();\n\n        if (index < this.p_02.getNumParameters())\n            return this.p_02.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_02.getNumParameters();\n\n        if (index < this.p_03.getNumParameters())\n            return this.p_03.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_03.getNumParameters();\n\n        if (index < this.p_04.getNumParameters())\n            return this.p_04.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_01.getNumParameters())\n            return this.p_01.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_01.getNumParameters();\n\n        if (index < this.p_02.getNumParameters())\n            return this.p_02.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_02.getNumParameters();\n\n        if (index < this.p_03.getNumParameters())\n            return this.p_03.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_03.getNumParameters();\n\n        if (index < this.p_04.getNumParameters())\n            return this.p_04.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_01.getNumParameters() + this.p_02.getNumParameters() + this.p_03.getNumParameters() + this.p_04.getNumParameters();\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_01.getNumParameters())\n            return this.p_01.constrainParameterValue(index, value);\n\n        index -= this.p_01.getNumParameters();\n\n        if (index < this.p_02.getNumParameters())\n            return this.p_02.constrainParameterValue(index, value);\n\n        index -= this.p_02.getNumParameters();\n\n        if (index < this.p_03.getNumParameters())\n            return this.p_03.constrainParameterValue(index, value);\n\n        index -= this.p_03.getNumParameters();\n\n        if (index < this.p_04.getNumParameters())\n            return this.p_04.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
              "subpatches": {
                "p_01": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_02": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_03": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_04": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": true
            }
          },
          "isPolyphonic": false
        },
        "p_86": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_09.getNumParameters())\n            return this.p_09.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_09.getNumParameters();\n\n        if (index < this.p_10.getNumParameters())\n            return this.p_10.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_10.getNumParameters();\n\n        if (index < this.p_11.getNumParameters())\n            return this.p_11.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_11.getNumParameters();\n\n        if (index < this.p_12.getNumParameters())\n            return this.p_12.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_12.getNumParameters();\n\n        if (index < this.p_13.getNumParameters())\n            return this.p_13.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_13.getNumParameters();\n\n        if (index < this.p_14.getNumParameters())\n            return this.p_14.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_14.getNumParameters();\n\n        if (index < this.p_15.getNumParameters())\n            return this.p_15.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_15.getNumParameters();\n\n        if (index < this.p_16.getNumParameters())\n            return this.p_16.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_16.getNumParameters();\n\n        if (index < this.p_17.getNumParameters())\n            return this.p_17.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_17.getNumParameters();\n\n        if (index < this.p_18.getNumParameters())\n            return this.p_18.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_18.getNumParameters();\n\n        if (index < this.p_19.getNumParameters())\n            return this.p_19.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_19.getNumParameters();\n\n        if (index < this.p_20.getNumParameters())\n            return this.p_20.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_20.getNumParameters();\n\n        if (index < this.p_21.getNumParameters())\n            return this.p_21.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_21.getNumParameters();\n\n        if (index < this.p_22.getNumParameters())\n            return this.p_22.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_22.getNumParameters();\n\n        if (index < this.p_23.getNumParameters())\n            return this.p_23.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_23.getNumParameters();\n\n        if (index < this.p_24.getNumParameters())\n            return this.p_24.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_24.getNumParameters();\n\n        if (index < this.p_25.getNumParameters())\n            return this.p_25.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_09.getNumParameters())\n            return this.p_09.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_09.getNumParameters();\n\n        if (index < this.p_10.getNumParameters())\n            return this.p_10.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_10.getNumParameters();\n\n        if (index < this.p_11.getNumParameters())\n            return this.p_11.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_11.getNumParameters();\n\n        if (index < this.p_12.getNumParameters())\n            return this.p_12.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_12.getNumParameters();\n\n        if (index < this.p_13.getNumParameters())\n            return this.p_13.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_13.getNumParameters();\n\n        if (index < this.p_14.getNumParameters())\n            return this.p_14.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_14.getNumParameters();\n\n        if (index < this.p_15.getNumParameters())\n            return this.p_15.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_15.getNumParameters();\n\n        if (index < this.p_16.getNumParameters())\n            return this.p_16.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_16.getNumParameters();\n\n        if (index < this.p_17.getNumParameters())\n            return this.p_17.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_17.getNumParameters();\n\n        if (index < this.p_18.getNumParameters())\n            return this.p_18.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_18.getNumParameters();\n\n        if (index < this.p_19.getNumParameters())\n            return this.p_19.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_19.getNumParameters();\n\n        if (index < this.p_20.getNumParameters())\n            return this.p_20.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_20.getNumParameters();\n\n        if (index < this.p_21.getNumParameters())\n            return this.p_21.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_21.getNumParameters();\n\n        if (index < this.p_22.getNumParameters())\n            return this.p_22.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_22.getNumParameters();\n\n        if (index < this.p_23.getNumParameters())\n            return this.p_23.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_23.getNumParameters();\n\n        if (index < this.p_24.getNumParameters())\n            return this.p_24.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_24.getNumParameters();\n\n        if (index < this.p_25.getNumParameters())\n            return this.p_25.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_09.getNumParameters() + this.p_10.getNumParameters() + this.p_11.getNumParameters() + this.p_12.getNumParameters() + this.p_13.getNumParameters() + this.p_14.getNumParameters() + this.p_15.getNumParameters() + this.p_16.getNumParameters() + this.p_17.getNumParameters() + this.p_18.getNumParameters() + this.p_19.getNumParameters() + this.p_20.getNumParameters() + this.p_21.getNumParameters() + this.p_22.getNumParameters() + this.p_23.getNumParameters() + this.p_24.getNumParameters() + this.p_25.getNumParameters();\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_09.getNumParameters())\n            return this.p_09.constrainParameterValue(index, value);\n\n        index -= this.p_09.getNumParameters();\n\n        if (index < this.p_10.getNumParameters())\n            return this.p_10.constrainParameterValue(index, value);\n\n        index -= this.p_10.getNumParameters();\n\n        if (index < this.p_11.getNumParameters())\n            return this.p_11.constrainParameterValue(index, value);\n\n        index -= this.p_11.getNumParameters();\n\n        if (index < this.p_12.getNumParameters())\n            return this.p_12.constrainParameterValue(index, value);\n\n        index -= this.p_12.getNumParameters();\n\n        if (index < this.p_13.getNumParameters())\n            return this.p_13.constrainParameterValue(index, value);\n\n        index -= this.p_13.getNumParameters();\n\n        if (index < this.p_14.getNumParameters())\n            return this.p_14.constrainParameterValue(index, value);\n\n        index -= this.p_14.getNumParameters();\n\n        if (index < this.p_15.getNumParameters())\n            return this.p_15.constrainParameterValue(index, value);\n\n        index -= this.p_15.getNumParameters();\n\n        if (index < this.p_16.getNumParameters())\n            return this.p_16.constrainParameterValue(index, value);\n\n        index -= this.p_16.getNumParameters();\n\n        if (index < this.p_17.getNumParameters())\n            return this.p_17.constrainParameterValue(index, value);\n\n        index -= this.p_17.getNumParameters();\n\n        if (index < this.p_18.getNumParameters())\n            return this.p_18.constrainParameterValue(index, value);\n\n        index -= this.p_18.getNumParameters();\n\n        if (index < this.p_19.getNumParameters())\n            return this.p_19.constrainParameterValue(index, value);\n\n        index -= this.p_19.getNumParameters();\n\n        if (index < this.p_20.getNumParameters())\n            return this.p_20.constrainParameterValue(index, value);\n\n        index -= this.p_20.getNumParameters();\n\n        if (index < this.p_21.getNumParameters())\n            return this.p_21.constrainParameterValue(index, value);\n\n        index -= this.p_21.getNumParameters();\n\n        if (index < this.p_22.getNumParameters())\n            return this.p_22.constrainParameterValue(index, value);\n\n        index -= this.p_22.getNumParameters();\n\n        if (index < this.p_23.getNumParameters())\n            return this.p_23.constrainParameterValue(index, value);\n\n        index -= this.p_23.getNumParameters();\n\n        if (index < this.p_24.getNumParameters())\n            return this.p_24.constrainParameterValue(index, value);\n\n        index -= this.p_24.getNumParameters();\n\n        if (index < this.p_25.getNumParameters())\n            return this.p_25.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
          "subpatches": {
            "p_09": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_10": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_11": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_12": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_13": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_14": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_15": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_16": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_06.getNumParameters())\n            return this.p_06.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_06.getNumParameters())\n            return this.p_06.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_06.getNumParameters();\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_06.getNumParameters())\n            return this.p_06.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
              "subpatches": {
                "p_06": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_17": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_18": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_07.getNumParameters())\n            return this.p_07.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_07.getNumParameters())\n            return this.p_07.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_07.getNumParameters();\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_07.getNumParameters())\n            return this.p_07.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
              "subpatches": {
                "p_07": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_19": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_20": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_08.getNumParameters())\n            return this.p_08.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_08.getNumParameters())\n            return this.p_08.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_08.getNumParameters();\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_08.getNumParameters())\n            return this.p_08.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
              "subpatches": {
                "p_08": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_21": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_22": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_23": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_24": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_25": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            }
          },
          "isPolyphonic": false
        },
        "p_87": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_26.getNumParameters())\n            return this.p_26.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_26.getNumParameters();\n\n        if (index < this.p_27.getNumParameters())\n            return this.p_27.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_27.getNumParameters();\n\n        if (index < this.p_28.getNumParameters())\n            return this.p_28.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_28.getNumParameters();\n\n        if (index < this.p_29.getNumParameters())\n            return this.p_29.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_29.getNumParameters();\n\n        if (index < this.p_30.getNumParameters())\n            return this.p_30.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_30.getNumParameters();\n\n        if (index < this.p_31.getNumParameters())\n            return this.p_31.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_31.getNumParameters();\n\n        if (index < this.p_32.getNumParameters())\n            return this.p_32.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_32.getNumParameters();\n\n        if (index < this.p_33.getNumParameters())\n            return this.p_33.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_33.getNumParameters();\n\n        if (index < this.p_34.getNumParameters())\n            return this.p_34.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_34.getNumParameters();\n\n        if (index < this.p_35.getNumParameters())\n            return this.p_35.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_35.getNumParameters();\n\n        if (index < this.p_36.getNumParameters())\n            return this.p_36.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_36.getNumParameters();\n\n        if (index < this.p_37.getNumParameters())\n            return this.p_37.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_37.getNumParameters();\n\n        if (index < this.p_38.getNumParameters())\n            return this.p_38.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_38.getNumParameters();\n\n        if (index < this.p_39.getNumParameters())\n            return this.p_39.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_26.getNumParameters())\n            return this.p_26.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_26.getNumParameters();\n\n        if (index < this.p_27.getNumParameters())\n            return this.p_27.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_27.getNumParameters();\n\n        if (index < this.p_28.getNumParameters())\n            return this.p_28.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_28.getNumParameters();\n\n        if (index < this.p_29.getNumParameters())\n            return this.p_29.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_29.getNumParameters();\n\n        if (index < this.p_30.getNumParameters())\n            return this.p_30.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_30.getNumParameters();\n\n        if (index < this.p_31.getNumParameters())\n            return this.p_31.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_31.getNumParameters();\n\n        if (index < this.p_32.getNumParameters())\n            return this.p_32.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_32.getNumParameters();\n\n        if (index < this.p_33.getNumParameters())\n            return this.p_33.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_33.getNumParameters();\n\n        if (index < this.p_34.getNumParameters())\n            return this.p_34.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_34.getNumParameters();\n\n        if (index < this.p_35.getNumParameters())\n            return this.p_35.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_35.getNumParameters();\n\n        if (index < this.p_36.getNumParameters())\n            return this.p_36.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_36.getNumParameters();\n\n        if (index < this.p_37.getNumParameters())\n            return this.p_37.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_37.getNumParameters();\n\n        if (index < this.p_38.getNumParameters())\n            return this.p_38.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_38.getNumParameters();\n\n        if (index < this.p_39.getNumParameters())\n            return this.p_39.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_26.getNumParameters() + this.p_27.getNumParameters() + this.p_28.getNumParameters() + this.p_29.getNumParameters() + this.p_30.getNumParameters() + this.p_31.getNumParameters() + this.p_32.getNumParameters() + this.p_33.getNumParameters() + this.p_34.getNumParameters() + this.p_35.getNumParameters() + this.p_36.getNumParameters() + this.p_37.getNumParameters() + this.p_38.getNumParameters() + this.p_39.getNumParameters();\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_26.getNumParameters())\n            return this.p_26.constrainParameterValue(index, value);\n\n        index -= this.p_26.getNumParameters();\n\n        if (index < this.p_27.getNumParameters())\n            return this.p_27.constrainParameterValue(index, value);\n\n        index -= this.p_27.getNumParameters();\n\n        if (index < this.p_28.getNumParameters())\n            return this.p_28.constrainParameterValue(index, value);\n\n        index -= this.p_28.getNumParameters();\n\n        if (index < this.p_29.getNumParameters())\n            return this.p_29.constrainParameterValue(index, value);\n\n        index -= this.p_29.getNumParameters();\n\n        if (index < this.p_30.getNumParameters())\n            return this.p_30.constrainParameterValue(index, value);\n\n        index -= this.p_30.getNumParameters();\n\n        if (index < this.p_31.getNumParameters())\n            return this.p_31.constrainParameterValue(index, value);\n\n        index -= this.p_31.getNumParameters();\n\n        if (index < this.p_32.getNumParameters())\n            return this.p_32.constrainParameterValue(index, value);\n\n        index -= this.p_32.getNumParameters();\n\n        if (index < this.p_33.getNumParameters())\n            return this.p_33.constrainParameterValue(index, value);\n\n        index -= this.p_33.getNumParameters();\n\n        if (index < this.p_34.getNumParameters())\n            return this.p_34.constrainParameterValue(index, value);\n\n        index -= this.p_34.getNumParameters();\n\n        if (index < this.p_35.getNumParameters())\n            return this.p_35.constrainParameterValue(index, value);\n\n        index -= this.p_35.getNumParameters();\n\n        if (index < this.p_36.getNumParameters())\n            return this.p_36.constrainParameterValue(index, value);\n\n        index -= this.p_36.getNumParameters();\n\n        if (index < this.p_37.getNumParameters())\n            return this.p_37.constrainParameterValue(index, value);\n\n        index -= this.p_37.getNumParameters();\n\n        if (index < this.p_38.getNumParameters())\n            return this.p_38.constrainParameterValue(index, value);\n\n        index -= this.p_38.getNumParameters();\n\n        if (index < this.p_39.getNumParameters())\n            return this.p_39.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
          "subpatches": {
            "p_26": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_27": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_28": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_29": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_30": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_31": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_32": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_33": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_34": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_35": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_36": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_37": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_38": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_39": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            }
          },
          "isPolyphonic": false
        },
        "p_88": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "subpatches": {},
          "isPolyphonic": false
        },
        "p_89": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "subpatches": {},
          "isPolyphonic": false
        },
        "p_90": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "subpatches": {},
          "isPolyphonic": false
        },
        "p_91": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_44[0].getNumParameters()) {\n            {\n                return this.p_44[0].convertToNormalizedParameterValue(index, value);\n            }\n        }\n\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_44[0].getNumParameters()) {\n            {\n                return this.p_44[0].convertFromNormalizedParameterValue(index, value);\n            }\n        }\n\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_44[0].getNumParameters();\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_44[0].getNumParameters()) {\n            {\n                return this.p_44[0].constrainParameterValue(index, value);\n            }\n        }\n\n        return value;\n    }\n}",
          "subpatches": {
            "p_44": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_40.getNumParameters())\n            return this.p_40.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_40.getNumParameters();\n\n        if (index < this.p_41.getNumParameters())\n            return this.p_41.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_41.getNumParameters();\n\n        if (index < this.p_42.getNumParameters())\n            return this.p_42.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_42.getNumParameters();\n\n        if (index < this.p_43.getNumParameters())\n            return this.p_43.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_40.getNumParameters())\n            return this.p_40.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_40.getNumParameters();\n\n        if (index < this.p_41.getNumParameters())\n            return this.p_41.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_41.getNumParameters();\n\n        if (index < this.p_42.getNumParameters())\n            return this.p_42.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_42.getNumParameters();\n\n        if (index < this.p_43.getNumParameters())\n            return this.p_43.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_40.getNumParameters() + this.p_41.getNumParameters() + this.p_42.getNumParameters() + this.p_43.getNumParameters();\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_40.getNumParameters())\n            return this.p_40.constrainParameterValue(index, value);\n\n        index -= this.p_40.getNumParameters();\n\n        if (index < this.p_41.getNumParameters())\n            return this.p_41.constrainParameterValue(index, value);\n\n        index -= this.p_41.getNumParameters();\n\n        if (index < this.p_42.getNumParameters())\n            return this.p_42.constrainParameterValue(index, value);\n\n        index -= this.p_42.getNumParameters();\n\n        if (index < this.p_43.getNumParameters())\n            return this.p_43.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
              "subpatches": {
                "p_40": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_41": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_42": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_43": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": true
            }
          },
          "isPolyphonic": false
        },
        "p_92": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_45.getNumParameters())\n            return this.p_45.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_45.getNumParameters();\n\n        if (index < this.p_46.getNumParameters())\n            return this.p_46.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_46.getNumParameters();\n\n        if (index < this.p_47.getNumParameters())\n            return this.p_47.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_47.getNumParameters();\n\n        if (index < this.p_48.getNumParameters())\n            return this.p_48.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_48.getNumParameters();\n\n        if (index < this.p_49.getNumParameters())\n            return this.p_49.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_49.getNumParameters();\n\n        if (index < this.p_50.getNumParameters())\n            return this.p_50.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_50.getNumParameters();\n\n        if (index < this.p_51.getNumParameters())\n            return this.p_51.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_51.getNumParameters();\n\n        if (index < this.p_52.getNumParameters())\n            return this.p_52.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_52.getNumParameters();\n\n        if (index < this.p_53.getNumParameters())\n            return this.p_53.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_53.getNumParameters();\n\n        if (index < this.p_54.getNumParameters())\n            return this.p_54.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_54.getNumParameters();\n\n        if (index < this.p_55.getNumParameters())\n            return this.p_55.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_55.getNumParameters();\n\n        if (index < this.p_56.getNumParameters())\n            return this.p_56.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_56.getNumParameters();\n\n        if (index < this.p_57.getNumParameters())\n            return this.p_57.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_57.getNumParameters();\n\n        if (index < this.p_58.getNumParameters())\n            return this.p_58.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_45.getNumParameters())\n            return this.p_45.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_45.getNumParameters();\n\n        if (index < this.p_46.getNumParameters())\n            return this.p_46.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_46.getNumParameters();\n\n        if (index < this.p_47.getNumParameters())\n            return this.p_47.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_47.getNumParameters();\n\n        if (index < this.p_48.getNumParameters())\n            return this.p_48.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_48.getNumParameters();\n\n        if (index < this.p_49.getNumParameters())\n            return this.p_49.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_49.getNumParameters();\n\n        if (index < this.p_50.getNumParameters())\n            return this.p_50.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_50.getNumParameters();\n\n        if (index < this.p_51.getNumParameters())\n            return this.p_51.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_51.getNumParameters();\n\n        if (index < this.p_52.getNumParameters())\n            return this.p_52.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_52.getNumParameters();\n\n        if (index < this.p_53.getNumParameters())\n            return this.p_53.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_53.getNumParameters();\n\n        if (index < this.p_54.getNumParameters())\n            return this.p_54.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_54.getNumParameters();\n\n        if (index < this.p_55.getNumParameters())\n            return this.p_55.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_55.getNumParameters();\n\n        if (index < this.p_56.getNumParameters())\n            return this.p_56.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_56.getNumParameters();\n\n        if (index < this.p_57.getNumParameters())\n            return this.p_57.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_57.getNumParameters();\n\n        if (index < this.p_58.getNumParameters())\n            return this.p_58.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_45.getNumParameters() + this.p_46.getNumParameters() + this.p_47.getNumParameters() + this.p_48.getNumParameters() + this.p_49.getNumParameters() + this.p_50.getNumParameters() + this.p_51.getNumParameters() + this.p_52.getNumParameters() + this.p_53.getNumParameters() + this.p_54.getNumParameters() + this.p_55.getNumParameters() + this.p_56.getNumParameters() + this.p_57.getNumParameters() + this.p_58.getNumParameters();\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_45.getNumParameters())\n            return this.p_45.constrainParameterValue(index, value);\n\n        index -= this.p_45.getNumParameters();\n\n        if (index < this.p_46.getNumParameters())\n            return this.p_46.constrainParameterValue(index, value);\n\n        index -= this.p_46.getNumParameters();\n\n        if (index < this.p_47.getNumParameters())\n            return this.p_47.constrainParameterValue(index, value);\n\n        index -= this.p_47.getNumParameters();\n\n        if (index < this.p_48.getNumParameters())\n            return this.p_48.constrainParameterValue(index, value);\n\n        index -= this.p_48.getNumParameters();\n\n        if (index < this.p_49.getNumParameters())\n            return this.p_49.constrainParameterValue(index, value);\n\n        index -= this.p_49.getNumParameters();\n\n        if (index < this.p_50.getNumParameters())\n            return this.p_50.constrainParameterValue(index, value);\n\n        index -= this.p_50.getNumParameters();\n\n        if (index < this.p_51.getNumParameters())\n            return this.p_51.constrainParameterValue(index, value);\n\n        index -= this.p_51.getNumParameters();\n\n        if (index < this.p_52.getNumParameters())\n            return this.p_52.constrainParameterValue(index, value);\n\n        index -= this.p_52.getNumParameters();\n\n        if (index < this.p_53.getNumParameters())\n            return this.p_53.constrainParameterValue(index, value);\n\n        index -= this.p_53.getNumParameters();\n\n        if (index < this.p_54.getNumParameters())\n            return this.p_54.constrainParameterValue(index, value);\n\n        index -= this.p_54.getNumParameters();\n\n        if (index < this.p_55.getNumParameters())\n            return this.p_55.constrainParameterValue(index, value);\n\n        index -= this.p_55.getNumParameters();\n\n        if (index < this.p_56.getNumParameters())\n            return this.p_56.constrainParameterValue(index, value);\n\n        index -= this.p_56.getNumParameters();\n\n        if (index < this.p_57.getNumParameters())\n            return this.p_57.constrainParameterValue(index, value);\n\n        index -= this.p_57.getNumParameters();\n\n        if (index < this.p_58.getNumParameters())\n            return this.p_58.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
          "subpatches": {
            "p_45": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_46": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_47": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_48": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_49": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_50": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_51": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_52": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_53": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_54": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_55": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_56": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_57": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_58": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            }
          },
          "isPolyphonic": false
        },
        "p_93": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_62.getNumParameters())\n            return this.p_62.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_62.getNumParameters();\n\n        if (index < this.p_63.getNumParameters())\n            return this.p_63.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_63.getNumParameters();\n\n        if (index < this.p_64.getNumParameters())\n            return this.p_64.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_64.getNumParameters();\n\n        if (index < this.p_65.getNumParameters())\n            return this.p_65.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_65.getNumParameters();\n\n        if (index < this.p_66.getNumParameters())\n            return this.p_66.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_66.getNumParameters();\n\n        if (index < this.p_67.getNumParameters())\n            return this.p_67.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_67.getNumParameters();\n\n        if (index < this.p_68.getNumParameters())\n            return this.p_68.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_68.getNumParameters();\n\n        if (index < this.p_69.getNumParameters())\n            return this.p_69.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_69.getNumParameters();\n\n        if (index < this.p_70.getNumParameters())\n            return this.p_70.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_70.getNumParameters();\n\n        if (index < this.p_71.getNumParameters())\n            return this.p_71.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_71.getNumParameters();\n\n        if (index < this.p_72.getNumParameters())\n            return this.p_72.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_72.getNumParameters();\n\n        if (index < this.p_73.getNumParameters())\n            return this.p_73.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_73.getNumParameters();\n\n        if (index < this.p_74.getNumParameters())\n            return this.p_74.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_74.getNumParameters();\n\n        if (index < this.p_75.getNumParameters())\n            return this.p_75.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_75.getNumParameters();\n\n        if (index < this.p_76.getNumParameters())\n            return this.p_76.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_76.getNumParameters();\n\n        if (index < this.p_77.getNumParameters())\n            return this.p_77.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_77.getNumParameters();\n\n        if (index < this.p_78.getNumParameters())\n            return this.p_78.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_62.getNumParameters())\n            return this.p_62.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_62.getNumParameters();\n\n        if (index < this.p_63.getNumParameters())\n            return this.p_63.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_63.getNumParameters();\n\n        if (index < this.p_64.getNumParameters())\n            return this.p_64.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_64.getNumParameters();\n\n        if (index < this.p_65.getNumParameters())\n            return this.p_65.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_65.getNumParameters();\n\n        if (index < this.p_66.getNumParameters())\n            return this.p_66.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_66.getNumParameters();\n\n        if (index < this.p_67.getNumParameters())\n            return this.p_67.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_67.getNumParameters();\n\n        if (index < this.p_68.getNumParameters())\n            return this.p_68.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_68.getNumParameters();\n\n        if (index < this.p_69.getNumParameters())\n            return this.p_69.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_69.getNumParameters();\n\n        if (index < this.p_70.getNumParameters())\n            return this.p_70.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_70.getNumParameters();\n\n        if (index < this.p_71.getNumParameters())\n            return this.p_71.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_71.getNumParameters();\n\n        if (index < this.p_72.getNumParameters())\n            return this.p_72.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_72.getNumParameters();\n\n        if (index < this.p_73.getNumParameters())\n            return this.p_73.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_73.getNumParameters();\n\n        if (index < this.p_74.getNumParameters())\n            return this.p_74.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_74.getNumParameters();\n\n        if (index < this.p_75.getNumParameters())\n            return this.p_75.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_75.getNumParameters();\n\n        if (index < this.p_76.getNumParameters())\n            return this.p_76.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_76.getNumParameters();\n\n        if (index < this.p_77.getNumParameters())\n            return this.p_77.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_77.getNumParameters();\n\n        if (index < this.p_78.getNumParameters())\n            return this.p_78.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_62.getNumParameters() + this.p_63.getNumParameters() + this.p_64.getNumParameters() + this.p_65.getNumParameters() + this.p_66.getNumParameters() + this.p_67.getNumParameters() + this.p_68.getNumParameters() + this.p_69.getNumParameters() + this.p_70.getNumParameters() + this.p_71.getNumParameters() + this.p_72.getNumParameters() + this.p_73.getNumParameters() + this.p_74.getNumParameters() + this.p_75.getNumParameters() + this.p_76.getNumParameters() + this.p_77.getNumParameters() + this.p_78.getNumParameters();\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_62.getNumParameters())\n            return this.p_62.constrainParameterValue(index, value);\n\n        index -= this.p_62.getNumParameters();\n\n        if (index < this.p_63.getNumParameters())\n            return this.p_63.constrainParameterValue(index, value);\n\n        index -= this.p_63.getNumParameters();\n\n        if (index < this.p_64.getNumParameters())\n            return this.p_64.constrainParameterValue(index, value);\n\n        index -= this.p_64.getNumParameters();\n\n        if (index < this.p_65.getNumParameters())\n            return this.p_65.constrainParameterValue(index, value);\n\n        index -= this.p_65.getNumParameters();\n\n        if (index < this.p_66.getNumParameters())\n            return this.p_66.constrainParameterValue(index, value);\n\n        index -= this.p_66.getNumParameters();\n\n        if (index < this.p_67.getNumParameters())\n            return this.p_67.constrainParameterValue(index, value);\n\n        index -= this.p_67.getNumParameters();\n\n        if (index < this.p_68.getNumParameters())\n            return this.p_68.constrainParameterValue(index, value);\n\n        index -= this.p_68.getNumParameters();\n\n        if (index < this.p_69.getNumParameters())\n            return this.p_69.constrainParameterValue(index, value);\n\n        index -= this.p_69.getNumParameters();\n\n        if (index < this.p_70.getNumParameters())\n            return this.p_70.constrainParameterValue(index, value);\n\n        index -= this.p_70.getNumParameters();\n\n        if (index < this.p_71.getNumParameters())\n            return this.p_71.constrainParameterValue(index, value);\n\n        index -= this.p_71.getNumParameters();\n\n        if (index < this.p_72.getNumParameters())\n            return this.p_72.constrainParameterValue(index, value);\n\n        index -= this.p_72.getNumParameters();\n\n        if (index < this.p_73.getNumParameters())\n            return this.p_73.constrainParameterValue(index, value);\n\n        index -= this.p_73.getNumParameters();\n\n        if (index < this.p_74.getNumParameters())\n            return this.p_74.constrainParameterValue(index, value);\n\n        index -= this.p_74.getNumParameters();\n\n        if (index < this.p_75.getNumParameters())\n            return this.p_75.constrainParameterValue(index, value);\n\n        index -= this.p_75.getNumParameters();\n\n        if (index < this.p_76.getNumParameters())\n            return this.p_76.constrainParameterValue(index, value);\n\n        index -= this.p_76.getNumParameters();\n\n        if (index < this.p_77.getNumParameters())\n            return this.p_77.constrainParameterValue(index, value);\n\n        index -= this.p_77.getNumParameters();\n\n        if (index < this.p_78.getNumParameters())\n            return this.p_78.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
          "subpatches": {
            "p_62": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_63": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_64": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_65": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_66": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_67": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_68": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_69": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_59.getNumParameters())\n            return this.p_59.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_59.getNumParameters())\n            return this.p_59.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_59.getNumParameters();\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_59.getNumParameters())\n            return this.p_59.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
              "subpatches": {
                "p_59": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_70": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_71": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_60.getNumParameters())\n            return this.p_60.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_60.getNumParameters())\n            return this.p_60.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_60.getNumParameters();\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_60.getNumParameters())\n            return this.p_60.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
              "subpatches": {
                "p_60": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_72": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_73": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_74": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_61.getNumParameters())\n            return this.p_61.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_61.getNumParameters())\n            return this.p_61.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_61.getNumParameters();\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_61.getNumParameters())\n            return this.p_61.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
              "subpatches": {
                "p_61": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_75": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_76": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_77": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_78": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            }
          },
          "isPolyphonic": false
        },
        "p_94": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "subpatches": {},
          "isPolyphonic": false
        },
        "p_95": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "subpatches": {},
          "isPolyphonic": false
        },
        "p_96": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_79[0].getNumParameters()) {\n            {\n                return this.p_79[0].convertToNormalizedParameterValue(index, value);\n            }\n        }\n\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_79[0].getNumParameters()) {\n            {\n                return this.p_79[0].convertFromNormalizedParameterValue(index, value);\n            }\n        }\n\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_79[0].getNumParameters();\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_79[0].getNumParameters()) {\n            {\n                return this.p_79[0].constrainParameterValue(index, value);\n            }\n        }\n\n        return value;\n    }\n}",
          "subpatches": {
            "p_79": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": true
            }
          },
          "isPolyphonic": false
        },
        "p_97": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_80.getNumParameters())\n            return this.p_80.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_80.getNumParameters();\n\n        if (index < this.p_81.getNumParameters())\n            return this.p_81.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_81.getNumParameters();\n\n        if (index < this.p_82.getNumParameters())\n            return this.p_82.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_80.getNumParameters())\n            return this.p_80.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_80.getNumParameters();\n\n        if (index < this.p_81.getNumParameters())\n            return this.p_81.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_81.getNumParameters();\n\n        if (index < this.p_82.getNumParameters())\n            return this.p_82.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_80.getNumParameters() + this.p_81.getNumParameters() + this.p_82.getNumParameters();\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_80.getNumParameters())\n            return this.p_80.constrainParameterValue(index, value);\n\n        index -= this.p_80.getNumParameters();\n\n        if (index < this.p_81.getNumParameters())\n            return this.p_81.constrainParameterValue(index, value);\n\n        index -= this.p_81.getNumParameters();\n\n        if (index < this.p_82.getNumParameters())\n            return this.p_82.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
          "subpatches": {
            "p_80": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_81": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_82": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            }
          },
          "isPolyphonic": false
        },
        "p_98": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "subpatches": {},
          "isPolyphonic": false
        },
        "p_99": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "subpatches": {},
          "isPolyphonic": false
        },
        "p_100": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "subpatches": {},
          "isPolyphonic": false
        },
        "p_101": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
          "subpatches": {},
          "isPolyphonic": false
        }
      },
      "isPolyphonic": false
    },
    "rnboVersion": "0.18.0-dev.9",
    "meta": {
      "architecture": "x64",
      "maxversion": "8.5.0",
      "filename": "intersymmetric.maxpat"
    },
    "options": {
      "classname": "rnbomatic",
      "minifyOutput": true
    }
  },
  "src": "class RNBOSubpatcher_618{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.onebang_01_allow=0,this.counter_01_phase=!0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"fm1_listener\"):this.inport_01_value_number_set(s)}}processListMessage(e,t,r,s){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"fm1_listener\"):this.inport_01_value_list_set(s)}}processBangMessage(e,t,r){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"fm1_listener\"):this.inport_01_value_bang_bang()}}resolveTag(e){switch(e){case TAG(\"filter\"):return\"filter\";case TAG(\"\"):return\"\";case TAG(\"fm1_listener\"):return\"fm1_listener\"}return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_619{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_536{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(4),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.phasor_01_sigbuf=0,this.phasor_01_setupDone=!1,this.ip_01_sigbuf=0,this.ip_01_setupDone=!1,this.ip_02_sigbuf=0,this.ip_02_setupDone=!1,this.onepole_tilde_01_needsUpdate=!1,this.onepole_tilde_01_setupDone=!1,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 2}getNumOutputChannels(){return 2}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}setVoiceIndex(e){this._voiceIndex=e}setNoteNumber(e){this._noteNumber=e}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){switch(RNBO_UNUSED(s),RNBO_UNUSED(r),this.updateTime(e),t){case 760652352:this.line_01_target_bang();break;case 861222235:this.curve_01_target_bang()}}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_537{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}setVoiceIndex(e){this._voiceIndex=e}setNoteNumber(e){this._noteNumber=e}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){switch(RNBO_UNUSED(s),RNBO_UNUSED(r),this.updateTime(e),t){case 760652352:this.line_02_target_bang()}}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_538{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(4),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.phasor_02_sigbuf=0,this.phasor_02_setupDone=!1,this.ip_03_sigbuf=0,this.ip_03_setupDone=!1,this.ip_04_sigbuf=0,this.ip_04_setupDone=!1,this.onepole_tilde_02_needsUpdate=!1,this.onepole_tilde_02_setupDone=!1,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 2}getNumOutputChannels(){return 2}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}setVoiceIndex(e){this._voiceIndex=e}setNoteNumber(e){this._noteNumber=e}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){switch(RNBO_UNUSED(s),RNBO_UNUSED(r),this.updateTime(e),t){case 760652352:this.line_03_target_bang();break;case 861222235:this.curve_02_target_bang()}}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_539{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(4),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.phasor_03_sigbuf=0,this.phasor_03_setupDone=!1,this.ip_05_sigbuf=0,this.ip_05_setupDone=!1,this.ip_06_sigbuf=0,this.ip_06_setupDone=!1,this.onepole_tilde_03_needsUpdate=!1,this.onepole_tilde_03_setupDone=!1,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 2}getNumOutputChannels(){return 2}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}setVoiceIndex(e){this._voiceIndex=e}setNoteNumber(e){this._noteNumber=e}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){switch(RNBO_UNUSED(s),RNBO_UNUSED(r),this.updateTime(e),t){case 760652352:this.line_04_target_bang();break;case 861222235:this.curve_03_target_bang()}}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_540{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(7),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.ip_07_sigbuf=0,this.ip_07_setupDone=!1,this.ip_08_sigbuf=0,this.ip_08_setupDone=!1,this.ip_09_sigbuf=0,this.ip_09_setupDone=!1,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0,this.p_01=new Array,this.p_02=new Array,this.p_03=new Array,this.p_04=new Array}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 1}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}setVoiceIndex(e){this._voiceIndex=e,this.p_01.setVoiceIndex(e),this.p_02.setVoiceIndex(e),this.p_03.setVoiceIndex(e),this.p_04.setVoiceIndex(e)}setNoteNumber(e){this._noteNumber=e,this.p_01.setNoteNumber(e),this.p_02.setNoteNumber(e),this.p_03.setNoteNumber(e),this.p_04.setNoteNumber(e)}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){this.p_01=new RNBOSubpatcher_536,this.p_01.setEngineAndPatcher(this.getEngine(),this),this.p_01.initialize(),this.p_01.setParameterOffset(this.getParameterOffset(this.p_01)),this.p_02=new RNBOSubpatcher_537,this.p_02.setEngineAndPatcher(this.getEngine(),this),this.p_02.initialize(),this.p_02.setParameterOffset(this.getParameterOffset(this.p_02)),this.p_03=new RNBOSubpatcher_538,this.p_03.setEngineAndPatcher(this.getEngine(),this),this.p_03.initialize(),this.p_03.setParameterOffset(this.getParameterOffset(this.p_03)),this.p_04=new RNBOSubpatcher_539,this.p_04.setEngineAndPatcher(this.getEngine(),this),this.p_04.initialize(),this.p_04.setParameterOffset(this.getParameterOffset(this.p_04))}processTempoEvent(e,t){this.updateTime(e),this.p_01.processTempoEvent(e,t),this.p_02.processTempoEvent(e,t),this.p_03.processTempoEvent(e,t),this.p_04.processTempoEvent(e,t)}processTransportEvent(e,t){this.updateTime(e),this.p_01.processTransportEvent(e,t),this.p_02.processTransportEvent(e,t),this.p_03.processTransportEvent(e,t),this.p_04.processTransportEvent(e,t)}processBeatTimeEvent(e,t){this.updateTime(e),this.p_01.processBeatTimeEvent(e,t),this.p_02.processBeatTimeEvent(e,t),this.p_03.processBeatTimeEvent(e,t),this.p_04.processBeatTimeEvent(e,t)}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){this.updateTime(e),this.p_01.processTimeSignatureEvent(e,t,r),this.p_02.processTimeSignatureEvent(e,t,r),this.p_03.processTimeSignatureEvent(e,t,r),this.p_04.processTimeSignatureEvent(e,t,r)}setParameterValue(e,t,r){RNBO_UNUSED(t),this.updateTime(r),(e-=0)<this.p_01.getNumParameters()&&this.p_01.setParameterValue(e,t,r),(e-=this.p_01.getNumParameters())<this.p_02.getNumParameters()&&this.p_02.setParameterValue(e,t,r),(e-=this.p_02.getNumParameters())<this.p_03.getNumParameters()&&this.p_03.setParameterValue(e,t,r),(e-=this.p_03.getNumParameters())<this.p_04.getNumParameters()&&this.p_04.setParameterValue(e,t,r)}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return(e-=0)<this.p_01.getNumParameters()?this.p_01.getParameterValue(e):(e-=this.p_01.getNumParameters())<this.p_02.getNumParameters()?this.p_02.getParameterValue(e):(e-=this.p_02.getNumParameters())<this.p_03.getNumParameters()?this.p_03.getParameterValue(e):(e-=this.p_03.getNumParameters())<this.p_04.getNumParameters()?this.p_04.getParameterValue(e):0}getPolyParameterValue(e,t){return e[0].getParameterValue(t)}setPolyParameterValue(e,t,r,s){for(var a=0;a<64;a++)e[a].setParameterValue(t,r,s)}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0+this.p_01.getNumParameters()+this.p_02.getNumParameters()+this.p_03.getNumParameters()+this.p_04.getNumParameters()}getParameterName(e){return(e-=0)<this.p_01.getNumParameters()?this.p_01.getParameterName(e):(e-=this.p_01.getNumParameters())<this.p_02.getNumParameters()?this.p_02.getParameterName(e):(e-=this.p_02.getNumParameters())<this.p_03.getNumParameters()?this.p_03.getParameterName(e):(e-=this.p_03.getNumParameters())<this.p_04.getNumParameters()?this.p_04.getParameterName(e):\"bogus\"}getParameterId(e){return(e-=0)<this.p_01.getNumParameters()?this.p_01.getParameterId(e):(e-=this.p_01.getNumParameters())<this.p_02.getNumParameters()?this.p_02.getParameterId(e):(e-=this.p_02.getNumParameters())<this.p_03.getNumParameters()?this.p_03.getParameterId(e):(e-=this.p_03.getNumParameters())<this.p_04.getNumParameters()?this.p_04.getParameterId(e):\"bogus\"}getParameterInfo(e,t){(e-=0)<this.p_01.getNumParameters()&&this.p_01.getParameterInfo(e,t),(e-=this.p_01.getNumParameters())<this.p_02.getNumParameters()&&this.p_02.getParameterInfo(e,t),(e-=this.p_02.getNumParameters())<this.p_03.getNumParameters()&&this.p_03.getParameterInfo(e,t),(e-=this.p_03.getNumParameters())<this.p_04.getNumParameters()&&this.p_04.getParameterInfo(e,t)}sendParameter(e){1==this._voiceIndex&&this.getPatcher().sendParameter(e+this.parameterOffset)}sendPolyParameter(e,t){this.getPatcher().sendParameter(e+this.parameterOffset+t-1)}getParameterOffset(e){return e==this.p_01?0:e==this.p_02?0+this.p_01.getNumParameters():e==this.p_03?0+this.p_01.getNumParameters()+this.p_02.getNumParameters():e==this.p_04?0+this.p_01.getNumParameters()+this.p_02.getNumParameters()+this.p_03.getNumParameters():0}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return(e-=0)<this.p_01.getNumParameters()?this.p_01.convertToNormalizedParameterValue(e,t):(e-=this.p_01.getNumParameters())<this.p_02.getNumParameters()?this.p_02.convertToNormalizedParameterValue(e,t):(e-=this.p_02.getNumParameters())<this.p_03.getNumParameters()?this.p_03.convertToNormalizedParameterValue(e,t):(e-=this.p_03.getNumParameters())<this.p_04.getNumParameters()?this.p_04.convertToNormalizedParameterValue(e,t):t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t,(e-=0)<this.p_01.getNumParameters()?this.p_01.convertFromNormalizedParameterValue(e,t):(e-=this.p_01.getNumParameters())<this.p_02.getNumParameters()?this.p_02.convertFromNormalizedParameterValue(e,t):(e-=this.p_02.getNumParameters())<this.p_03.getNumParameters()?this.p_03.convertFromNormalizedParameterValue(e,t):(e-=this.p_03.getNumParameters())<this.p_04.getNumParameters()?this.p_04.convertFromNormalizedParameterValue(e,t):t}constrainParameterValue(e,t){return(e-=0)<this.p_01.getNumParameters()?this.p_01.constrainParameterValue(e,t):(e-=this.p_01.getNumParameters())<this.p_02.getNumParameters()?this.p_02.constrainParameterValue(e,t):(e-=this.p_02.getNumParameters())<this.p_03.getNumParameters()?this.p_03.constrainParameterValue(e,t):(e-=this.p_03.getNumParameters())<this.p_04.getNumParameters()?this.p_04.constrainParameterValue(e,t):t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){switch(RNBO_UNUSED(s),RNBO_UNUSED(r),this.updateTime(e),t){case 892732297:this.loadmess_01_startupbang_bang();break;case 760652352:this.line_05_target_bang()}}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){RNBO_UNUSED(t),this.updateTime(r),this.p_01.processNumMessage(e,t,r,s),this.p_02.processNumMessage(e,t,r,s),this.p_03.processNumMessage(e,t,r,s),this.p_04.processNumMessage(e,t,r,s)}processListMessage(e,t,r,s){RNBO_UNUSED(t),this.updateTime(r),this.p_01.processListMessage(e,t,r,s),this.p_02.processListMessage(e,t,r,s),this.p_03.processListMessage(e,t,r,s),this.p_04.processListMessage(e,t,r,s)}processBangMessage(e,t,r){switch(this.updateTime(r),e){case TAG(\"startupbang\"):TAG(\"p_obj-148/p_obj-1/loadmess_obj-2\")==t&&this.loadmess_01_startupbang_bang()}this.p_01.processBangMessage(e,t,r),this.p_02.processBangMessage(e,t,r),this.p_03.processBangMessage(e,t,r),this.p_04.processBangMessage(e,t,r)}resolveTag(e){switch(e){case TAG(\"startupbang\"):return\"startupbang\";case TAG(\"p_obj-148/p_obj-1/loadmess_obj-2\"):return\"p_obj-148/p_obj-1/loadmess_obj-2\"}var t=this.p_01.resolveTag(e);if(t)return t;var r=this.p_02.resolveTag(e);if(r)return r;var s=this.p_03.resolveTag(e);if(s)return s;var a=this.p_04.resolveTag(e);return a||null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){this.p_01.processDataViewUpdate(e,t),this.p_02.processDataViewUpdate(e,t),this.p_03.processDataViewUpdate(e,t),this.p_04.processDataViewUpdate(e,t)}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_620{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.counter_02_phase=!0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0,this.p_05=new Array}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 1}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){for(var e=0;e<64;e++)this.p_05[e]=new RNBOSubpatcher_540,this.p_05[e].setEngineAndPatcher(this.getEngine(),this),this.p_05[e].initialize(),this.p_05[e].setParameterOffset(this.getParameterOffset(this.p_05[0])),this.p_05[e].setVoiceIndex(e+1)}processTempoEvent(e,t){this.updateTime(e);for(var r=0;r<64;r++)this.p_05[r].processTempoEvent(e,t)}processTransportEvent(e,t){this.updateTime(e);for(var r=0;r<64;r++)this.p_05[r].processTransportEvent(e,t)}processBeatTimeEvent(e,t){this.updateTime(e);for(var r=0;r<64;r++)this.p_05[r].processBeatTimeEvent(e,t)}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){this.updateTime(e);for(var s=0;s<64;s++)this.p_05[s].processTimeSignatureEvent(e,t,r)}setParameterValue(e,t,r){RNBO_UNUSED(t),this.updateTime(r),(e-=0)<this.p_05[0].getNumParameters()&&this.p_05[0].setPolyParameterValue(this.p_05,e,t,r)}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return(e-=0)<this.p_05[0].getNumParameters()?this.p_05[0].getPolyParameterValue(this.p_05,e):0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0+this.p_05[0].getNumParameters()}getParameterName(e){return(e-=0)<this.p_05[0].getNumParameters()?this.p_05[0].getParameterName(e):\"bogus\"}getParameterId(e){return(e-=0)<this.p_05[0].getNumParameters()?this.p_05[0].getParameterId(e):\"bogus\"}getParameterInfo(e,t){if((e-=0)<this.p_05[0].getNumParameters())for(var r=0;r<64;r++)this.p_05[r].getParameterInfo(e,t)}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}getParameterOffset(e){return this.p_05[0],0}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return(e-=0)<this.p_05[0].getNumParameters()?this.p_05[0].convertToNormalizedParameterValue(e,t):t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t,(e-=0)<this.p_05[0].getNumParameters()?this.p_05[0].convertFromNormalizedParameterValue(e,t):t}constrainParameterValue(e,t){return(e-=0)<this.p_05[0].getNumParameters()?this.p_05[0].constrainParameterValue(e,t):t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){switch(RNBO_UNUSED(s),RNBO_UNUSED(r),this.updateTime(e),t){case 892732297:this.loadmess_02_startupbang_bang()}}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){RNBO_UNUSED(t),this.updateTime(r);for(var a=0;a<64;a++)this.p_05[a].processNumMessage(e,t,r,s)}processListMessage(e,t,r,s){RNBO_UNUSED(t),this.updateTime(r);for(var a=0;a<64;a++)this.p_05[a].processListMessage(e,t,r,s)}processBangMessage(e,t,r){switch(this.updateTime(r),e){case TAG(\"startupbang\"):TAG(\"p_obj-148/loadmess_obj-6\")==t&&this.loadmess_02_startupbang_bang()}for(var s=0;s<64;s++)this.p_05[s].processBangMessage(e,t,r)}resolveTag(e){switch(e){case TAG(\"startupbang\"):return\"startupbang\";case TAG(\"p_obj-148/loadmess_obj-6\"):return\"p_obj-148/loadmess_obj-6\"}var t=this.p_05[0].resolveTag(e);return t||null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){for(var r=0;r<64;r++)this.p_05[r].processDataViewUpdate(e,t)}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_544{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.random_01_nz_last=0,this.random_02_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_545{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.random_03_nz_last=0,this.random_04_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_546{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.random_05_nz_last=0,this.random_06_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_547{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.random_07_nz_last=0,this.random_08_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_548{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.random_09_nz_last=0,this.random_10_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_549{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.random_11_nz_last=0,this.random_12_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_550{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.random_13_nz_last=0,this.random_14_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_541{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_551{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0,this.p_06=new Array}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){this.p_06=new RNBOSubpatcher_541,this.p_06.setEngineAndPatcher(this.getEngine(),this),this.p_06.initialize(),this.p_06.setParameterOffset(this.getParameterOffset(this.p_06))}processTempoEvent(e,t){this.updateTime(e),this.p_06.processTempoEvent(e,t)}processTransportEvent(e,t){this.updateTime(e),this.p_06.processTransportEvent(e,t)}processBeatTimeEvent(e,t){this.updateTime(e),this.p_06.processBeatTimeEvent(e,t)}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){this.updateTime(e),this.p_06.processTimeSignatureEvent(e,t,r)}setParameterValue(e,t,r){RNBO_UNUSED(t),this.updateTime(r),(e-=0)<this.p_06.getNumParameters()&&this.p_06.setParameterValue(e,t,r)}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return(e-=0)<this.p_06.getNumParameters()?this.p_06.getParameterValue(e):0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0+this.p_06.getNumParameters()}getParameterName(e){return(e-=0)<this.p_06.getNumParameters()?this.p_06.getParameterName(e):\"bogus\"}getParameterId(e){return(e-=0)<this.p_06.getNumParameters()?this.p_06.getParameterId(e):\"bogus\"}getParameterInfo(e,t){(e-=0)<this.p_06.getNumParameters()&&this.p_06.getParameterInfo(e,t)}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}getParameterOffset(e){return this.p_06,0}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return(e-=0)<this.p_06.getNumParameters()?this.p_06.convertToNormalizedParameterValue(e,t):t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t,(e-=0)<this.p_06.getNumParameters()?this.p_06.convertFromNormalizedParameterValue(e,t):t}constrainParameterValue(e,t){return(e-=0)<this.p_06.getNumParameters()?this.p_06.constrainParameterValue(e,t):t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){RNBO_UNUSED(t),this.updateTime(r),this.p_06.processNumMessage(e,t,r,s)}processListMessage(e,t,r,s){RNBO_UNUSED(t),this.updateTime(r),this.p_06.processListMessage(e,t,r,s)}processBangMessage(e,t,r){RNBO_UNUSED(t),this.updateTime(r),this.p_06.processBangMessage(e,t,r)}resolveTag(e){var t=this.p_06.resolveTag(e);return t||null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){this.p_06.processDataViewUpdate(e,t)}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_552{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.random_15_nz_last=0,this.random_16_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_542{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_553{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0,this.p_07=new Array}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){this.p_07=new RNBOSubpatcher_542,this.p_07.setEngineAndPatcher(this.getEngine(),this),this.p_07.initialize(),this.p_07.setParameterOffset(this.getParameterOffset(this.p_07))}processTempoEvent(e,t){this.updateTime(e),this.p_07.processTempoEvent(e,t)}processTransportEvent(e,t){this.updateTime(e),this.p_07.processTransportEvent(e,t)}processBeatTimeEvent(e,t){this.updateTime(e),this.p_07.processBeatTimeEvent(e,t)}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){this.updateTime(e),this.p_07.processTimeSignatureEvent(e,t,r)}setParameterValue(e,t,r){RNBO_UNUSED(t),this.updateTime(r),(e-=0)<this.p_07.getNumParameters()&&this.p_07.setParameterValue(e,t,r)}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return(e-=0)<this.p_07.getNumParameters()?this.p_07.getParameterValue(e):0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0+this.p_07.getNumParameters()}getParameterName(e){return(e-=0)<this.p_07.getNumParameters()?this.p_07.getParameterName(e):\"bogus\"}getParameterId(e){return(e-=0)<this.p_07.getNumParameters()?this.p_07.getParameterId(e):\"bogus\"}getParameterInfo(e,t){(e-=0)<this.p_07.getNumParameters()&&this.p_07.getParameterInfo(e,t)}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}getParameterOffset(e){return this.p_07,0}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return(e-=0)<this.p_07.getNumParameters()?this.p_07.convertToNormalizedParameterValue(e,t):t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t,(e-=0)<this.p_07.getNumParameters()?this.p_07.convertFromNormalizedParameterValue(e,t):t}constrainParameterValue(e,t){return(e-=0)<this.p_07.getNumParameters()?this.p_07.constrainParameterValue(e,t):t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){RNBO_UNUSED(t),this.updateTime(r),this.p_07.processNumMessage(e,t,r,s)}processListMessage(e,t,r,s){RNBO_UNUSED(t),this.updateTime(r),this.p_07.processListMessage(e,t,r,s)}processBangMessage(e,t,r){RNBO_UNUSED(t),this.updateTime(r),this.p_07.processBangMessage(e,t,r)}resolveTag(e){var t=this.p_07.resolveTag(e);return t||null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){this.p_07.processDataViewUpdate(e,t)}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_554{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.random_17_nz_last=0,this.random_18_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_543{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_555{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0,this.p_08=new Array}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){this.p_08=new RNBOSubpatcher_543,this.p_08.setEngineAndPatcher(this.getEngine(),this),this.p_08.initialize(),this.p_08.setParameterOffset(this.getParameterOffset(this.p_08))}processTempoEvent(e,t){this.updateTime(e),this.p_08.processTempoEvent(e,t)}processTransportEvent(e,t){this.updateTime(e),this.p_08.processTransportEvent(e,t)}processBeatTimeEvent(e,t){this.updateTime(e),this.p_08.processBeatTimeEvent(e,t)}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){this.updateTime(e),this.p_08.processTimeSignatureEvent(e,t,r)}setParameterValue(e,t,r){RNBO_UNUSED(t),this.updateTime(r),(e-=0)<this.p_08.getNumParameters()&&this.p_08.setParameterValue(e,t,r)}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return(e-=0)<this.p_08.getNumParameters()?this.p_08.getParameterValue(e):0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0+this.p_08.getNumParameters()}getParameterName(e){return(e-=0)<this.p_08.getNumParameters()?this.p_08.getParameterName(e):\"bogus\"}getParameterId(e){return(e-=0)<this.p_08.getNumParameters()?this.p_08.getParameterId(e):\"bogus\"}getParameterInfo(e,t){(e-=0)<this.p_08.getNumParameters()&&this.p_08.getParameterInfo(e,t)}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}getParameterOffset(e){return this.p_08,0}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return(e-=0)<this.p_08.getNumParameters()?this.p_08.convertToNormalizedParameterValue(e,t):t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t,(e-=0)<this.p_08.getNumParameters()?this.p_08.convertFromNormalizedParameterValue(e,t):t}constrainParameterValue(e,t){return(e-=0)<this.p_08.getNumParameters()?this.p_08.constrainParameterValue(e,t):t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){RNBO_UNUSED(t),this.updateTime(r),this.p_08.processNumMessage(e,t,r,s)}processListMessage(e,t,r,s){RNBO_UNUSED(t),this.updateTime(r),this.p_08.processListMessage(e,t,r,s)}processBangMessage(e,t,r){RNBO_UNUSED(t),this.updateTime(r),this.p_08.processBangMessage(e,t,r)}resolveTag(e){var t=this.p_08.resolveTag(e);return t||null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){this.p_08.processDataViewUpdate(e,t)}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_556{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.random_19_nz_last=0,this.random_20_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_557{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.random_21_nz_last=0,this.random_22_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_558{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.random_23_nz_last=0,this.random_24_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_559{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.random_25_nz_last=0,this.random_26_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_560{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.random_27_nz_last=0,this.random_28_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_621{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.mtof_01_innerMtoF_buffer=0,this.mtof_01_innerScala_internal=!0,this.mtof_01_innerScala_KBM_MAP_OFFSET=7,this.mtof_01_innerScala_lastValid=!1,this.mtof_01_innerScala_kbmMapSize=0,this.mtof_02_innerMtoF_buffer=0,this.mtof_02_innerScala_internal=!0,this.mtof_02_innerScala_KBM_MAP_OFFSET=7,this.mtof_02_innerScala_lastValid=!1,this.mtof_02_innerScala_kbmMapSize=0,this.mtof_03_innerMtoF_buffer=0,this.mtof_03_innerScala_internal=!0,this.mtof_03_innerScala_KBM_MAP_OFFSET=7,this.mtof_03_innerScala_lastValid=!1,this.mtof_03_innerScala_kbmMapSize=0,this.mtof_04_innerMtoF_buffer=0,this.mtof_04_innerScala_internal=!0,this.mtof_04_innerScala_KBM_MAP_OFFSET=7,this.mtof_04_innerScala_lastValid=!1,this.mtof_04_innerScala_kbmMapSize=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0,this.p_09=new Array,this.p_10=new Array,this.p_11=new Array,this.p_12=new Array,this.p_13=new Array,this.p_14=new Array,this.p_15=new Array,this.p_16=new Array,this.p_17=new Array,this.p_18=new Array,this.p_19=new Array,this.p_20=new Array,this.p_21=new Array,this.p_22=new Array,this.p_23=new Array,this.p_24=new Array,this.p_25=new Array}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){this.p_09=new RNBOSubpatcher_544,this.p_09.setEngineAndPatcher(this.getEngine(),this),this.p_09.initialize(),this.p_09.setParameterOffset(this.getParameterOffset(this.p_09)),this.p_10=new RNBOSubpatcher_545,this.p_10.setEngineAndPatcher(this.getEngine(),this),this.p_10.initialize(),this.p_10.setParameterOffset(this.getParameterOffset(this.p_10)),this.p_11=new RNBOSubpatcher_546,this.p_11.setEngineAndPatcher(this.getEngine(),this),this.p_11.initialize(),this.p_11.setParameterOffset(this.getParameterOffset(this.p_11)),this.p_12=new RNBOSubpatcher_547,this.p_12.setEngineAndPatcher(this.getEngine(),this),this.p_12.initialize(),this.p_12.setParameterOffset(this.getParameterOffset(this.p_12)),this.p_13=new RNBOSubpatcher_548,this.p_13.setEngineAndPatcher(this.getEngine(),this),this.p_13.initialize(),this.p_13.setParameterOffset(this.getParameterOffset(this.p_13)),this.p_14=new RNBOSubpatcher_549,this.p_14.setEngineAndPatcher(this.getEngine(),this),this.p_14.initialize(),this.p_14.setParameterOffset(this.getParameterOffset(this.p_14)),this.p_15=new RNBOSubpatcher_550,this.p_15.setEngineAndPatcher(this.getEngine(),this),this.p_15.initialize(),this.p_15.setParameterOffset(this.getParameterOffset(this.p_15)),this.p_16=new RNBOSubpatcher_551,this.p_16.setEngineAndPatcher(this.getEngine(),this),this.p_16.initialize(),this.p_16.setParameterOffset(this.getParameterOffset(this.p_16)),this.p_17=new RNBOSubpatcher_552,this.p_17.setEngineAndPatcher(this.getEngine(),this),this.p_17.initialize(),this.p_17.setParameterOffset(this.getParameterOffset(this.p_17)),this.p_18=new RNBOSubpatcher_553,this.p_18.setEngineAndPatcher(this.getEngine(),this),this.p_18.initialize(),this.p_18.setParameterOffset(this.getParameterOffset(this.p_18)),this.p_19=new RNBOSubpatcher_554,this.p_19.setEngineAndPatcher(this.getEngine(),this),this.p_19.initialize(),this.p_19.setParameterOffset(this.getParameterOffset(this.p_19)),this.p_20=new RNBOSubpatcher_555,this.p_20.setEngineAndPatcher(this.getEngine(),this),this.p_20.initialize(),this.p_20.setParameterOffset(this.getParameterOffset(this.p_20)),this.p_21=new RNBOSubpatcher_556,this.p_21.setEngineAndPatcher(this.getEngine(),this),this.p_21.initialize(),this.p_21.setParameterOffset(this.getParameterOffset(this.p_21)),this.p_22=new RNBOSubpatcher_557,this.p_22.setEngineAndPatcher(this.getEngine(),this),this.p_22.initialize(),this.p_22.setParameterOffset(this.getParameterOffset(this.p_22)),this.p_23=new RNBOSubpatcher_558,this.p_23.setEngineAndPatcher(this.getEngine(),this),this.p_23.initialize(),this.p_23.setParameterOffset(this.getParameterOffset(this.p_23)),this.p_24=new RNBOSubpatcher_559,this.p_24.setEngineAndPatcher(this.getEngine(),this),this.p_24.initialize(),this.p_24.setParameterOffset(this.getParameterOffset(this.p_24)),this.p_25=new RNBOSubpatcher_560,this.p_25.setEngineAndPatcher(this.getEngine(),this),this.p_25.initialize(),this.p_25.setParameterOffset(this.getParameterOffset(this.p_25))}processTempoEvent(e,t){this.updateTime(e),this.p_09.processTempoEvent(e,t),this.p_10.processTempoEvent(e,t),this.p_11.processTempoEvent(e,t),this.p_12.processTempoEvent(e,t),this.p_13.processTempoEvent(e,t),this.p_14.processTempoEvent(e,t),this.p_15.processTempoEvent(e,t),this.p_16.processTempoEvent(e,t),this.p_17.processTempoEvent(e,t),this.p_18.processTempoEvent(e,t),this.p_19.processTempoEvent(e,t),this.p_20.processTempoEvent(e,t),this.p_21.processTempoEvent(e,t),this.p_22.processTempoEvent(e,t),this.p_23.processTempoEvent(e,t),this.p_24.processTempoEvent(e,t),this.p_25.processTempoEvent(e,t)}processTransportEvent(e,t){this.updateTime(e),this.p_09.processTransportEvent(e,t),this.p_10.processTransportEvent(e,t),this.p_11.processTransportEvent(e,t),this.p_12.processTransportEvent(e,t),this.p_13.processTransportEvent(e,t),this.p_14.processTransportEvent(e,t),this.p_15.processTransportEvent(e,t),this.p_16.processTransportEvent(e,t),this.p_17.processTransportEvent(e,t),this.p_18.processTransportEvent(e,t),this.p_19.processTransportEvent(e,t),this.p_20.processTransportEvent(e,t),this.p_21.processTransportEvent(e,t),this.p_22.processTransportEvent(e,t),this.p_23.processTransportEvent(e,t),this.p_24.processTransportEvent(e,t),this.p_25.processTransportEvent(e,t)}processBeatTimeEvent(e,t){this.updateTime(e),this.p_09.processBeatTimeEvent(e,t),this.p_10.processBeatTimeEvent(e,t),this.p_11.processBeatTimeEvent(e,t),this.p_12.processBeatTimeEvent(e,t),this.p_13.processBeatTimeEvent(e,t),this.p_14.processBeatTimeEvent(e,t),this.p_15.processBeatTimeEvent(e,t),this.p_16.processBeatTimeEvent(e,t),this.p_17.processBeatTimeEvent(e,t),this.p_18.processBeatTimeEvent(e,t),this.p_19.processBeatTimeEvent(e,t),this.p_20.processBeatTimeEvent(e,t),this.p_21.processBeatTimeEvent(e,t),this.p_22.processBeatTimeEvent(e,t),this.p_23.processBeatTimeEvent(e,t),this.p_24.processBeatTimeEvent(e,t),this.p_25.processBeatTimeEvent(e,t)}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){this.updateTime(e),this.p_09.processTimeSignatureEvent(e,t,r),this.p_10.processTimeSignatureEvent(e,t,r),this.p_11.processTimeSignatureEvent(e,t,r),this.p_12.processTimeSignatureEvent(e,t,r),this.p_13.processTimeSignatureEvent(e,t,r),this.p_14.processTimeSignatureEvent(e,t,r),this.p_15.processTimeSignatureEvent(e,t,r),this.p_16.processTimeSignatureEvent(e,t,r),this.p_17.processTimeSignatureEvent(e,t,r),this.p_18.processTimeSignatureEvent(e,t,r),this.p_19.processTimeSignatureEvent(e,t,r),this.p_20.processTimeSignatureEvent(e,t,r),this.p_21.processTimeSignatureEvent(e,t,r),this.p_22.processTimeSignatureEvent(e,t,r),this.p_23.processTimeSignatureEvent(e,t,r),this.p_24.processTimeSignatureEvent(e,t,r),this.p_25.processTimeSignatureEvent(e,t,r)}setParameterValue(e,t,r){RNBO_UNUSED(t),this.updateTime(r),(e-=0)<this.p_09.getNumParameters()&&this.p_09.setParameterValue(e,t,r),(e-=this.p_09.getNumParameters())<this.p_10.getNumParameters()&&this.p_10.setParameterValue(e,t,r),(e-=this.p_10.getNumParameters())<this.p_11.getNumParameters()&&this.p_11.setParameterValue(e,t,r),(e-=this.p_11.getNumParameters())<this.p_12.getNumParameters()&&this.p_12.setParameterValue(e,t,r),(e-=this.p_12.getNumParameters())<this.p_13.getNumParameters()&&this.p_13.setParameterValue(e,t,r),(e-=this.p_13.getNumParameters())<this.p_14.getNumParameters()&&this.p_14.setParameterValue(e,t,r),(e-=this.p_14.getNumParameters())<this.p_15.getNumParameters()&&this.p_15.setParameterValue(e,t,r),(e-=this.p_15.getNumParameters())<this.p_16.getNumParameters()&&this.p_16.setParameterValue(e,t,r),(e-=this.p_16.getNumParameters())<this.p_17.getNumParameters()&&this.p_17.setParameterValue(e,t,r),(e-=this.p_17.getNumParameters())<this.p_18.getNumParameters()&&this.p_18.setParameterValue(e,t,r),(e-=this.p_18.getNumParameters())<this.p_19.getNumParameters()&&this.p_19.setParameterValue(e,t,r),(e-=this.p_19.getNumParameters())<this.p_20.getNumParameters()&&this.p_20.setParameterValue(e,t,r),(e-=this.p_20.getNumParameters())<this.p_21.getNumParameters()&&this.p_21.setParameterValue(e,t,r),(e-=this.p_21.getNumParameters())<this.p_22.getNumParameters()&&this.p_22.setParameterValue(e,t,r),(e-=this.p_22.getNumParameters())<this.p_23.getNumParameters()&&this.p_23.setParameterValue(e,t,r),(e-=this.p_23.getNumParameters())<this.p_24.getNumParameters()&&this.p_24.setParameterValue(e,t,r),(e-=this.p_24.getNumParameters())<this.p_25.getNumParameters()&&this.p_25.setParameterValue(e,t,r)}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return(e-=0)<this.p_09.getNumParameters()?this.p_09.getParameterValue(e):(e-=this.p_09.getNumParameters())<this.p_10.getNumParameters()?this.p_10.getParameterValue(e):(e-=this.p_10.getNumParameters())<this.p_11.getNumParameters()?this.p_11.getParameterValue(e):(e-=this.p_11.getNumParameters())<this.p_12.getNumParameters()?this.p_12.getParameterValue(e):(e-=this.p_12.getNumParameters())<this.p_13.getNumParameters()?this.p_13.getParameterValue(e):(e-=this.p_13.getNumParameters())<this.p_14.getNumParameters()?this.p_14.getParameterValue(e):(e-=this.p_14.getNumParameters())<this.p_15.getNumParameters()?this.p_15.getParameterValue(e):(e-=this.p_15.getNumParameters())<this.p_16.getNumParameters()?this.p_16.getParameterValue(e):(e-=this.p_16.getNumParameters())<this.p_17.getNumParameters()?this.p_17.getParameterValue(e):(e-=this.p_17.getNumParameters())<this.p_18.getNumParameters()?this.p_18.getParameterValue(e):(e-=this.p_18.getNumParameters())<this.p_19.getNumParameters()?this.p_19.getParameterValue(e):(e-=this.p_19.getNumParameters())<this.p_20.getNumParameters()?this.p_20.getParameterValue(e):(e-=this.p_20.getNumParameters())<this.p_21.getNumParameters()?this.p_21.getParameterValue(e):(e-=this.p_21.getNumParameters())<this.p_22.getNumParameters()?this.p_22.getParameterValue(e):(e-=this.p_22.getNumParameters())<this.p_23.getNumParameters()?this.p_23.getParameterValue(e):(e-=this.p_23.getNumParameters())<this.p_24.getNumParameters()?this.p_24.getParameterValue(e):(e-=this.p_24.getNumParameters())<this.p_25.getNumParameters()?this.p_25.getParameterValue(e):0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0+this.p_09.getNumParameters()+this.p_10.getNumParameters()+this.p_11.getNumParameters()+this.p_12.getNumParameters()+this.p_13.getNumParameters()+this.p_14.getNumParameters()+this.p_15.getNumParameters()+this.p_16.getNumParameters()+this.p_17.getNumParameters()+this.p_18.getNumParameters()+this.p_19.getNumParameters()+this.p_20.getNumParameters()+this.p_21.getNumParameters()+this.p_22.getNumParameters()+this.p_23.getNumParameters()+this.p_24.getNumParameters()+this.p_25.getNumParameters()}getParameterName(e){return(e-=0)<this.p_09.getNumParameters()?this.p_09.getParameterName(e):(e-=this.p_09.getNumParameters())<this.p_10.getNumParameters()?this.p_10.getParameterName(e):(e-=this.p_10.getNumParameters())<this.p_11.getNumParameters()?this.p_11.getParameterName(e):(e-=this.p_11.getNumParameters())<this.p_12.getNumParameters()?this.p_12.getParameterName(e):(e-=this.p_12.getNumParameters())<this.p_13.getNumParameters()?this.p_13.getParameterName(e):(e-=this.p_13.getNumParameters())<this.p_14.getNumParameters()?this.p_14.getParameterName(e):(e-=this.p_14.getNumParameters())<this.p_15.getNumParameters()?this.p_15.getParameterName(e):(e-=this.p_15.getNumParameters())<this.p_16.getNumParameters()?this.p_16.getParameterName(e):(e-=this.p_16.getNumParameters())<this.p_17.getNumParameters()?this.p_17.getParameterName(e):(e-=this.p_17.getNumParameters())<this.p_18.getNumParameters()?this.p_18.getParameterName(e):(e-=this.p_18.getNumParameters())<this.p_19.getNumParameters()?this.p_19.getParameterName(e):(e-=this.p_19.getNumParameters())<this.p_20.getNumParameters()?this.p_20.getParameterName(e):(e-=this.p_20.getNumParameters())<this.p_21.getNumParameters()?this.p_21.getParameterName(e):(e-=this.p_21.getNumParameters())<this.p_22.getNumParameters()?this.p_22.getParameterName(e):(e-=this.p_22.getNumParameters())<this.p_23.getNumParameters()?this.p_23.getParameterName(e):(e-=this.p_23.getNumParameters())<this.p_24.getNumParameters()?this.p_24.getParameterName(e):(e-=this.p_24.getNumParameters())<this.p_25.getNumParameters()?this.p_25.getParameterName(e):\"bogus\"}getParameterId(e){return(e-=0)<this.p_09.getNumParameters()?this.p_09.getParameterId(e):(e-=this.p_09.getNumParameters())<this.p_10.getNumParameters()?this.p_10.getParameterId(e):(e-=this.p_10.getNumParameters())<this.p_11.getNumParameters()?this.p_11.getParameterId(e):(e-=this.p_11.getNumParameters())<this.p_12.getNumParameters()?this.p_12.getParameterId(e):(e-=this.p_12.getNumParameters())<this.p_13.getNumParameters()?this.p_13.getParameterId(e):(e-=this.p_13.getNumParameters())<this.p_14.getNumParameters()?this.p_14.getParameterId(e):(e-=this.p_14.getNumParameters())<this.p_15.getNumParameters()?this.p_15.getParameterId(e):(e-=this.p_15.getNumParameters())<this.p_16.getNumParameters()?this.p_16.getParameterId(e):(e-=this.p_16.getNumParameters())<this.p_17.getNumParameters()?this.p_17.getParameterId(e):(e-=this.p_17.getNumParameters())<this.p_18.getNumParameters()?this.p_18.getParameterId(e):(e-=this.p_18.getNumParameters())<this.p_19.getNumParameters()?this.p_19.getParameterId(e):(e-=this.p_19.getNumParameters())<this.p_20.getNumParameters()?this.p_20.getParameterId(e):(e-=this.p_20.getNumParameters())<this.p_21.getNumParameters()?this.p_21.getParameterId(e):(e-=this.p_21.getNumParameters())<this.p_22.getNumParameters()?this.p_22.getParameterId(e):(e-=this.p_22.getNumParameters())<this.p_23.getNumParameters()?this.p_23.getParameterId(e):(e-=this.p_23.getNumParameters())<this.p_24.getNumParameters()?this.p_24.getParameterId(e):(e-=this.p_24.getNumParameters())<this.p_25.getNumParameters()?this.p_25.getParameterId(e):\"bogus\"}getParameterInfo(e,t){(e-=0)<this.p_09.getNumParameters()&&this.p_09.getParameterInfo(e,t),(e-=this.p_09.getNumParameters())<this.p_10.getNumParameters()&&this.p_10.getParameterInfo(e,t),(e-=this.p_10.getNumParameters())<this.p_11.getNumParameters()&&this.p_11.getParameterInfo(e,t),(e-=this.p_11.getNumParameters())<this.p_12.getNumParameters()&&this.p_12.getParameterInfo(e,t),(e-=this.p_12.getNumParameters())<this.p_13.getNumParameters()&&this.p_13.getParameterInfo(e,t),(e-=this.p_13.getNumParameters())<this.p_14.getNumParameters()&&this.p_14.getParameterInfo(e,t),(e-=this.p_14.getNumParameters())<this.p_15.getNumParameters()&&this.p_15.getParameterInfo(e,t),(e-=this.p_15.getNumParameters())<this.p_16.getNumParameters()&&this.p_16.getParameterInfo(e,t),(e-=this.p_16.getNumParameters())<this.p_17.getNumParameters()&&this.p_17.getParameterInfo(e,t),(e-=this.p_17.getNumParameters())<this.p_18.getNumParameters()&&this.p_18.getParameterInfo(e,t),(e-=this.p_18.getNumParameters())<this.p_19.getNumParameters()&&this.p_19.getParameterInfo(e,t),(e-=this.p_19.getNumParameters())<this.p_20.getNumParameters()&&this.p_20.getParameterInfo(e,t),(e-=this.p_20.getNumParameters())<this.p_21.getNumParameters()&&this.p_21.getParameterInfo(e,t),(e-=this.p_21.getNumParameters())<this.p_22.getNumParameters()&&this.p_22.getParameterInfo(e,t),(e-=this.p_22.getNumParameters())<this.p_23.getNumParameters()&&this.p_23.getParameterInfo(e,t),(e-=this.p_23.getNumParameters())<this.p_24.getNumParameters()&&this.p_24.getParameterInfo(e,t),(e-=this.p_24.getNumParameters())<this.p_25.getNumParameters()&&this.p_25.getParameterInfo(e,t)}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}getParameterOffset(e){return e==this.p_09?0:e==this.p_10?0+this.p_09.getNumParameters():e==this.p_11?0+this.p_09.getNumParameters()+this.p_10.getNumParameters():e==this.p_12?0+this.p_09.getNumParameters()+this.p_10.getNumParameters()+this.p_11.getNumParameters():e==this.p_13?0+this.p_09.getNumParameters()+this.p_10.getNumParameters()+this.p_11.getNumParameters()+this.p_12.getNumParameters():e==this.p_14?0+this.p_09.getNumParameters()+this.p_10.getNumParameters()+this.p_11.getNumParameters()+this.p_12.getNumParameters()+this.p_13.getNumParameters():e==this.p_15?0+this.p_09.getNumParameters()+this.p_10.getNumParameters()+this.p_11.getNumParameters()+this.p_12.getNumParameters()+this.p_13.getNumParameters()+this.p_14.getNumParameters():e==this.p_16?0+this.p_09.getNumParameters()+this.p_10.getNumParameters()+this.p_11.getNumParameters()+this.p_12.getNumParameters()+this.p_13.getNumParameters()+this.p_14.getNumParameters()+this.p_15.getNumParameters():e==this.p_17?0+this.p_09.getNumParameters()+this.p_10.getNumParameters()+this.p_11.getNumParameters()+this.p_12.getNumParameters()+this.p_13.getNumParameters()+this.p_14.getNumParameters()+this.p_15.getNumParameters()+this.p_16.getNumParameters():e==this.p_18?0+this.p_09.getNumParameters()+this.p_10.getNumParameters()+this.p_11.getNumParameters()+this.p_12.getNumParameters()+this.p_13.getNumParameters()+this.p_14.getNumParameters()+this.p_15.getNumParameters()+this.p_16.getNumParameters()+this.p_17.getNumParameters():e==this.p_19?0+this.p_09.getNumParameters()+this.p_10.getNumParameters()+this.p_11.getNumParameters()+this.p_12.getNumParameters()+this.p_13.getNumParameters()+this.p_14.getNumParameters()+this.p_15.getNumParameters()+this.p_16.getNumParameters()+this.p_17.getNumParameters()+this.p_18.getNumParameters():e==this.p_20?0+this.p_09.getNumParameters()+this.p_10.getNumParameters()+this.p_11.getNumParameters()+this.p_12.getNumParameters()+this.p_13.getNumParameters()+this.p_14.getNumParameters()+this.p_15.getNumParameters()+this.p_16.getNumParameters()+this.p_17.getNumParameters()+this.p_18.getNumParameters()+this.p_19.getNumParameters():e==this.p_21?0+this.p_09.getNumParameters()+this.p_10.getNumParameters()+this.p_11.getNumParameters()+this.p_12.getNumParameters()+this.p_13.getNumParameters()+this.p_14.getNumParameters()+this.p_15.getNumParameters()+this.p_16.getNumParameters()+this.p_17.getNumParameters()+this.p_18.getNumParameters()+this.p_19.getNumParameters()+this.p_20.getNumParameters():e==this.p_22?0+this.p_09.getNumParameters()+this.p_10.getNumParameters()+this.p_11.getNumParameters()+this.p_12.getNumParameters()+this.p_13.getNumParameters()+this.p_14.getNumParameters()+this.p_15.getNumParameters()+this.p_16.getNumParameters()+this.p_17.getNumParameters()+this.p_18.getNumParameters()+this.p_19.getNumParameters()+this.p_20.getNumParameters()+this.p_21.getNumParameters():e==this.p_23?0+this.p_09.getNumParameters()+this.p_10.getNumParameters()+this.p_11.getNumParameters()+this.p_12.getNumParameters()+this.p_13.getNumParameters()+this.p_14.getNumParameters()+this.p_15.getNumParameters()+this.p_16.getNumParameters()+this.p_17.getNumParameters()+this.p_18.getNumParameters()+this.p_19.getNumParameters()+this.p_20.getNumParameters()+this.p_21.getNumParameters()+this.p_22.getNumParameters():e==this.p_24?0+this.p_09.getNumParameters()+this.p_10.getNumParameters()+this.p_11.getNumParameters()+this.p_12.getNumParameters()+this.p_13.getNumParameters()+this.p_14.getNumParameters()+this.p_15.getNumParameters()+this.p_16.getNumParameters()+this.p_17.getNumParameters()+this.p_18.getNumParameters()+this.p_19.getNumParameters()+this.p_20.getNumParameters()+this.p_21.getNumParameters()+this.p_22.getNumParameters()+this.p_23.getNumParameters():e==this.p_25?0+this.p_09.getNumParameters()+this.p_10.getNumParameters()+this.p_11.getNumParameters()+this.p_12.getNumParameters()+this.p_13.getNumParameters()+this.p_14.getNumParameters()+this.p_15.getNumParameters()+this.p_16.getNumParameters()+this.p_17.getNumParameters()+this.p_18.getNumParameters()+this.p_19.getNumParameters()+this.p_20.getNumParameters()+this.p_21.getNumParameters()+this.p_22.getNumParameters()+this.p_23.getNumParameters()+this.p_24.getNumParameters():0}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return(e-=0)<this.p_09.getNumParameters()?this.p_09.convertToNormalizedParameterValue(e,t):(e-=this.p_09.getNumParameters())<this.p_10.getNumParameters()?this.p_10.convertToNormalizedParameterValue(e,t):(e-=this.p_10.getNumParameters())<this.p_11.getNumParameters()?this.p_11.convertToNormalizedParameterValue(e,t):(e-=this.p_11.getNumParameters())<this.p_12.getNumParameters()?this.p_12.convertToNormalizedParameterValue(e,t):(e-=this.p_12.getNumParameters())<this.p_13.getNumParameters()?this.p_13.convertToNormalizedParameterValue(e,t):(e-=this.p_13.getNumParameters())<this.p_14.getNumParameters()?this.p_14.convertToNormalizedParameterValue(e,t):(e-=this.p_14.getNumParameters())<this.p_15.getNumParameters()?this.p_15.convertToNormalizedParameterValue(e,t):(e-=this.p_15.getNumParameters())<this.p_16.getNumParameters()?this.p_16.convertToNormalizedParameterValue(e,t):(e-=this.p_16.getNumParameters())<this.p_17.getNumParameters()?this.p_17.convertToNormalizedParameterValue(e,t):(e-=this.p_17.getNumParameters())<this.p_18.getNumParameters()?this.p_18.convertToNormalizedParameterValue(e,t):(e-=this.p_18.getNumParameters())<this.p_19.getNumParameters()?this.p_19.convertToNormalizedParameterValue(e,t):(e-=this.p_19.getNumParameters())<this.p_20.getNumParameters()?this.p_20.convertToNormalizedParameterValue(e,t):(e-=this.p_20.getNumParameters())<this.p_21.getNumParameters()?this.p_21.convertToNormalizedParameterValue(e,t):(e-=this.p_21.getNumParameters())<this.p_22.getNumParameters()?this.p_22.convertToNormalizedParameterValue(e,t):(e-=this.p_22.getNumParameters())<this.p_23.getNumParameters()?this.p_23.convertToNormalizedParameterValue(e,t):(e-=this.p_23.getNumParameters())<this.p_24.getNumParameters()?this.p_24.convertToNormalizedParameterValue(e,t):(e-=this.p_24.getNumParameters())<this.p_25.getNumParameters()?this.p_25.convertToNormalizedParameterValue(e,t):t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t,(e-=0)<this.p_09.getNumParameters()?this.p_09.convertFromNormalizedParameterValue(e,t):(e-=this.p_09.getNumParameters())<this.p_10.getNumParameters()?this.p_10.convertFromNormalizedParameterValue(e,t):(e-=this.p_10.getNumParameters())<this.p_11.getNumParameters()?this.p_11.convertFromNormalizedParameterValue(e,t):(e-=this.p_11.getNumParameters())<this.p_12.getNumParameters()?this.p_12.convertFromNormalizedParameterValue(e,t):(e-=this.p_12.getNumParameters())<this.p_13.getNumParameters()?this.p_13.convertFromNormalizedParameterValue(e,t):(e-=this.p_13.getNumParameters())<this.p_14.getNumParameters()?this.p_14.convertFromNormalizedParameterValue(e,t):(e-=this.p_14.getNumParameters())<this.p_15.getNumParameters()?this.p_15.convertFromNormalizedParameterValue(e,t):(e-=this.p_15.getNumParameters())<this.p_16.getNumParameters()?this.p_16.convertFromNormalizedParameterValue(e,t):(e-=this.p_16.getNumParameters())<this.p_17.getNumParameters()?this.p_17.convertFromNormalizedParameterValue(e,t):(e-=this.p_17.getNumParameters())<this.p_18.getNumParameters()?this.p_18.convertFromNormalizedParameterValue(e,t):(e-=this.p_18.getNumParameters())<this.p_19.getNumParameters()?this.p_19.convertFromNormalizedParameterValue(e,t):(e-=this.p_19.getNumParameters())<this.p_20.getNumParameters()?this.p_20.convertFromNormalizedParameterValue(e,t):(e-=this.p_20.getNumParameters())<this.p_21.getNumParameters()?this.p_21.convertFromNormalizedParameterValue(e,t):(e-=this.p_21.getNumParameters())<this.p_22.getNumParameters()?this.p_22.convertFromNormalizedParameterValue(e,t):(e-=this.p_22.getNumParameters())<this.p_23.getNumParameters()?this.p_23.convertFromNormalizedParameterValue(e,t):(e-=this.p_23.getNumParameters())<this.p_24.getNumParameters()?this.p_24.convertFromNormalizedParameterValue(e,t):(e-=this.p_24.getNumParameters())<this.p_25.getNumParameters()?this.p_25.convertFromNormalizedParameterValue(e,t):t}constrainParameterValue(e,t){return(e-=0)<this.p_09.getNumParameters()?this.p_09.constrainParameterValue(e,t):(e-=this.p_09.getNumParameters())<this.p_10.getNumParameters()?this.p_10.constrainParameterValue(e,t):(e-=this.p_10.getNumParameters())<this.p_11.getNumParameters()?this.p_11.constrainParameterValue(e,t):(e-=this.p_11.getNumParameters())<this.p_12.getNumParameters()?this.p_12.constrainParameterValue(e,t):(e-=this.p_12.getNumParameters())<this.p_13.getNumParameters()?this.p_13.constrainParameterValue(e,t):(e-=this.p_13.getNumParameters())<this.p_14.getNumParameters()?this.p_14.constrainParameterValue(e,t):(e-=this.p_14.getNumParameters())<this.p_15.getNumParameters()?this.p_15.constrainParameterValue(e,t):(e-=this.p_15.getNumParameters())<this.p_16.getNumParameters()?this.p_16.constrainParameterValue(e,t):(e-=this.p_16.getNumParameters())<this.p_17.getNumParameters()?this.p_17.constrainParameterValue(e,t):(e-=this.p_17.getNumParameters())<this.p_18.getNumParameters()?this.p_18.constrainParameterValue(e,t):(e-=this.p_18.getNumParameters())<this.p_19.getNumParameters()?this.p_19.constrainParameterValue(e,t):(e-=this.p_19.getNumParameters())<this.p_20.getNumParameters()?this.p_20.constrainParameterValue(e,t):(e-=this.p_20.getNumParameters())<this.p_21.getNumParameters()?this.p_21.constrainParameterValue(e,t):(e-=this.p_21.getNumParameters())<this.p_22.getNumParameters()?this.p_22.constrainParameterValue(e,t):(e-=this.p_22.getNumParameters())<this.p_23.getNumParameters()?this.p_23.constrainParameterValue(e,t):(e-=this.p_23.getNumParameters())<this.p_24.getNumParameters()?this.p_24.constrainParameterValue(e,t):(e-=this.p_24.getNumParameters())<this.p_25.getNumParameters()?this.p_25.constrainParameterValue(e,t):t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"fm1_r_freq\"):this.inport_02_value_number_set(s);break;case TAG(\"fm1_r_c1ratio\"):this.inport_03_value_number_set(s);break;case TAG(\"fm1_r_c2ratio\"):this.inport_04_value_number_set(s);break;case TAG(\"fm1_r_c3ratio\"):this.inport_05_value_number_set(s);break;case TAG(\"fm1_r_3to1\"):this.inport_06_value_number_set(s);break;case TAG(\"fm1_r_2to1\"):this.inport_07_value_number_set(s);break;case TAG(\"fm1_r_3to2\"):this.inport_08_value_number_set(s);break;case TAG(\"fm1_listener\"):this.inport_09_value_number_set(s);break;case TAG(\"fm1_r_c1release\"):this.inport_10_value_number_set(s);break;case TAG(\"fm1_r_c2release\"):this.inport_11_value_number_set(s);break;case TAG(\"fm1_r_c3release\"):this.inport_12_value_number_set(s);break;case TAG(\"fm1_r_op1gain\"):this.inport_13_value_number_set(s);break;case TAG(\"fm1_r_op2gain\"):this.inport_14_value_number_set(s);break;case TAG(\"fm1_r_op3gain\"):this.inport_15_value_number_set(s);break;case TAG(\"fm1_r_gain\"):this.inport_16_value_number_set(s)}this.p_09.processNumMessage(e,t,r,s),this.p_10.processNumMessage(e,t,r,s),this.p_11.processNumMessage(e,t,r,s),this.p_12.processNumMessage(e,t,r,s),this.p_13.processNumMessage(e,t,r,s),this.p_14.processNumMessage(e,t,r,s),this.p_15.processNumMessage(e,t,r,s),this.p_16.processNumMessage(e,t,r,s),this.p_17.processNumMessage(e,t,r,s),this.p_18.processNumMessage(e,t,r,s),this.p_19.processNumMessage(e,t,r,s),this.p_20.processNumMessage(e,t,r,s),this.p_21.processNumMessage(e,t,r,s),this.p_22.processNumMessage(e,t,r,s),this.p_23.processNumMessage(e,t,r,s),this.p_24.processNumMessage(e,t,r,s),this.p_25.processNumMessage(e,t,r,s)}processListMessage(e,t,r,s){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"fm1_r_freq\"):this.inport_02_value_list_set(s);break;case TAG(\"fm1_r_c1ratio\"):this.inport_03_value_list_set(s);break;case TAG(\"fm1_r_c2ratio\"):this.inport_04_value_list_set(s);break;case TAG(\"fm1_r_c3ratio\"):this.inport_05_value_list_set(s);break;case TAG(\"fm1_r_3to1\"):this.inport_06_value_list_set(s);break;case TAG(\"fm1_r_2to1\"):this.inport_07_value_list_set(s);break;case TAG(\"fm1_r_3to2\"):this.inport_08_value_list_set(s);break;case TAG(\"fm1_listener\"):this.inport_09_value_list_set(s);break;case TAG(\"fm1_r_c1release\"):this.inport_10_value_list_set(s);break;case TAG(\"fm1_r_c2release\"):this.inport_11_value_list_set(s);break;case TAG(\"fm1_r_c3release\"):this.inport_12_value_list_set(s);break;case TAG(\"fm1_r_op1gain\"):this.inport_13_value_list_set(s);break;case TAG(\"fm1_r_op2gain\"):this.inport_14_value_list_set(s);break;case TAG(\"fm1_r_op3gain\"):this.inport_15_value_list_set(s);break;case TAG(\"fm1_r_gain\"):this.inport_16_value_list_set(s)}this.p_09.processListMessage(e,t,r,s),this.p_10.processListMessage(e,t,r,s),this.p_11.processListMessage(e,t,r,s),this.p_12.processListMessage(e,t,r,s),this.p_13.processListMessage(e,t,r,s),this.p_14.processListMessage(e,t,r,s),this.p_15.processListMessage(e,t,r,s),this.p_16.processListMessage(e,t,r,s),this.p_17.processListMessage(e,t,r,s),this.p_18.processListMessage(e,t,r,s),this.p_19.processListMessage(e,t,r,s),this.p_20.processListMessage(e,t,r,s),this.p_21.processListMessage(e,t,r,s),this.p_22.processListMessage(e,t,r,s),this.p_23.processListMessage(e,t,r,s),this.p_24.processListMessage(e,t,r,s),this.p_25.processListMessage(e,t,r,s)}processBangMessage(e,t,r){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"fm1_r_freq\"):this.inport_02_value_bang_bang();break;case TAG(\"fm1_r_c1ratio\"):this.inport_03_value_bang_bang();break;case TAG(\"fm1_r_c2ratio\"):this.inport_04_value_bang_bang();break;case TAG(\"fm1_r_c3ratio\"):this.inport_05_value_bang_bang();break;case TAG(\"fm1_r_3to1\"):this.inport_06_value_bang_bang();break;case TAG(\"fm1_r_2to1\"):this.inport_07_value_bang_bang();break;case TAG(\"fm1_r_3to2\"):this.inport_08_value_bang_bang();break;case TAG(\"fm1_listener\"):this.inport_09_value_bang_bang();break;case TAG(\"fm1_r_c1release\"):this.inport_10_value_bang_bang();break;case TAG(\"fm1_r_c2release\"):this.inport_11_value_bang_bang();break;case TAG(\"fm1_r_c3release\"):this.inport_12_value_bang_bang();break;case TAG(\"fm1_r_op1gain\"):this.inport_13_value_bang_bang();break;case TAG(\"fm1_r_op2gain\"):this.inport_14_value_bang_bang();break;case TAG(\"fm1_r_op3gain\"):this.inport_15_value_bang_bang();break;case TAG(\"fm1_r_gain\"):this.inport_16_value_bang_bang()}this.p_09.processBangMessage(e,t,r),this.p_10.processBangMessage(e,t,r),this.p_11.processBangMessage(e,t,r),this.p_12.processBangMessage(e,t,r),this.p_13.processBangMessage(e,t,r),this.p_14.processBangMessage(e,t,r),this.p_15.processBangMessage(e,t,r),this.p_16.processBangMessage(e,t,r),this.p_17.processBangMessage(e,t,r),this.p_18.processBangMessage(e,t,r),this.p_19.processBangMessage(e,t,r),this.p_20.processBangMessage(e,t,r),this.p_21.processBangMessage(e,t,r),this.p_22.processBangMessage(e,t,r),this.p_23.processBangMessage(e,t,r),this.p_24.processBangMessage(e,t,r),this.p_25.processBangMessage(e,t,r)}resolveTag(e){switch(e){case TAG(\"fm1_r_freq\"):return\"fm1_r_freq\";case TAG(\"\"):return\"\";case TAG(\"fm1_r_c1ratio\"):return\"fm1_r_c1ratio\";case TAG(\"fm1_r_c2ratio\"):return\"fm1_r_c2ratio\";case TAG(\"fm1_r_c3ratio\"):return\"fm1_r_c3ratio\";case TAG(\"fm1_r_3to1\"):return\"fm1_r_3to1\";case TAG(\"fm1_r_2to1\"):return\"fm1_r_2to1\";case TAG(\"fm1_r_3to2\"):return\"fm1_r_3to2\";case TAG(\"fm1_listener\"):return\"fm1_listener\";case TAG(\"fm1_r_c1release\"):return\"fm1_r_c1release\";case TAG(\"fm1_r_c2release\"):return\"fm1_r_c2release\";case TAG(\"fm1_r_c3release\"):return\"fm1_r_c3release\";case TAG(\"fm1_r_op1gain\"):return\"fm1_r_op1gain\";case TAG(\"fm1_r_op2gain\"):return\"fm1_r_op2gain\";case TAG(\"fm1_r_op3gain\"):return\"fm1_r_op3gain\";case TAG(\"fm1_r_gain\"):return\"fm1_r_gain\"}var t=this.p_09.resolveTag(e);if(t)return t;var r=this.p_10.resolveTag(e);if(r)return r;var s=this.p_11.resolveTag(e);if(s)return s;var a=this.p_12.resolveTag(e);if(a)return a;var i=this.p_13.resolveTag(e);if(i)return i;var n=this.p_14.resolveTag(e);if(n)return n;var m=this.p_15.resolveTag(e);if(m)return m;var u=this.p_16.resolveTag(e);if(u)return u;var h=this.p_17.resolveTag(e);if(h)return h;var p=this.p_18.resolveTag(e);if(p)return p;var _=this.p_19.resolveTag(e);if(_)return _;var g=this.p_20.resolveTag(e);if(g)return g;var o=this.p_21.resolveTag(e);if(o)return o;var P=this.p_22.resolveTag(e);if(P)return P;var l=this.p_23.resolveTag(e);if(l)return l;var c=this.p_24.resolveTag(e);if(c)return c;var d=this.p_25.resolveTag(e);return d||null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){this.updateTime(t),0==e&&(this.mtof_01_innerMtoF_buffer=new Float64Buffer(this.getPatcher().RNBODefaultMtofLookupTable256),this.mtof_02_innerMtoF_buffer=new Float64Buffer(this.getPatcher().RNBODefaultMtofLookupTable256),this.mtof_03_innerMtoF_buffer=new Float64Buffer(this.getPatcher().RNBODefaultMtofLookupTable256),this.mtof_04_innerMtoF_buffer=new Float64Buffer(this.getPatcher().RNBODefaultMtofLookupTable256)),this.p_09.processDataViewUpdate(e,t),this.p_10.processDataViewUpdate(e,t),this.p_11.processDataViewUpdate(e,t),this.p_12.processDataViewUpdate(e,t),this.p_13.processDataViewUpdate(e,t),this.p_14.processDataViewUpdate(e,t),this.p_15.processDataViewUpdate(e,t),this.p_16.processDataViewUpdate(e,t),this.p_17.processDataViewUpdate(e,t),this.p_18.processDataViewUpdate(e,t),this.p_19.processDataViewUpdate(e,t),this.p_20.processDataViewUpdate(e,t),this.p_21.processDataViewUpdate(e,t),this.p_22.processDataViewUpdate(e,t),this.p_23.processDataViewUpdate(e,t),this.p_24.processDataViewUpdate(e,t),this.p_25.processDataViewUpdate(e,t)}initialize(){this.assign_defaults(),this.setState(),this.mtof_01_innerMtoF_buffer=new Float64Buffer(this.getPatcher().RNBODefaultMtofLookupTable256),this.mtof_02_innerMtoF_buffer=new Float64Buffer(this.getPatcher().RNBODefaultMtofLookupTable256),this.mtof_03_innerMtoF_buffer=new Float64Buffer(this.getPatcher().RNBODefaultMtofLookupTable256),this.mtof_04_innerMtoF_buffer=new Float64Buffer(this.getPatcher().RNBODefaultMtofLookupTable256)}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_561{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.counter_03_phase=!0,this.random_29_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_562{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.counter_04_phase=!0,this.random_30_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_563{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.counter_05_phase=!0,this.random_31_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_564{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.counter_06_phase=!0,this.random_32_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_565{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.counter_07_phase=!0,this.random_33_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_566{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.counter_08_phase=!0,this.random_34_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_567{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.counter_09_phase=!0,this.random_35_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_568{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.counter_10_phase=!0,this.random_36_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_569{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.counter_11_phase=!0,this.random_37_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_570{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.counter_12_phase=!0,this.random_38_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_571{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.counter_13_phase=!0,this.random_39_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_572{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.counter_14_phase=!0,this.random_40_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_573{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.counter_15_phase=!0,this.random_41_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_574{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.counter_16_phase=!0,this.random_42_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_622{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0,this.p_26=new Array,this.p_27=new Array,this.p_28=new Array,this.p_29=new Array,this.p_30=new Array,this.p_31=new Array,this.p_32=new Array,this.p_33=new Array,this.p_34=new Array,this.p_35=new Array,this.p_36=new Array,this.p_37=new Array,this.p_38=new Array,this.p_39=new Array}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){this.p_26=new RNBOSubpatcher_561,this.p_26.setEngineAndPatcher(this.getEngine(),this),this.p_26.initialize(),this.p_26.setParameterOffset(this.getParameterOffset(this.p_26)),this.p_27=new RNBOSubpatcher_562,this.p_27.setEngineAndPatcher(this.getEngine(),this),this.p_27.initialize(),this.p_27.setParameterOffset(this.getParameterOffset(this.p_27)),this.p_28=new RNBOSubpatcher_563,this.p_28.setEngineAndPatcher(this.getEngine(),this),this.p_28.initialize(),this.p_28.setParameterOffset(this.getParameterOffset(this.p_28)),this.p_29=new RNBOSubpatcher_564,this.p_29.setEngineAndPatcher(this.getEngine(),this),this.p_29.initialize(),this.p_29.setParameterOffset(this.getParameterOffset(this.p_29)),this.p_30=new RNBOSubpatcher_565,this.p_30.setEngineAndPatcher(this.getEngine(),this),this.p_30.initialize(),this.p_30.setParameterOffset(this.getParameterOffset(this.p_30)),this.p_31=new RNBOSubpatcher_566,this.p_31.setEngineAndPatcher(this.getEngine(),this),this.p_31.initialize(),this.p_31.setParameterOffset(this.getParameterOffset(this.p_31)),this.p_32=new RNBOSubpatcher_567,this.p_32.setEngineAndPatcher(this.getEngine(),this),this.p_32.initialize(),this.p_32.setParameterOffset(this.getParameterOffset(this.p_32)),this.p_33=new RNBOSubpatcher_568,this.p_33.setEngineAndPatcher(this.getEngine(),this),this.p_33.initialize(),this.p_33.setParameterOffset(this.getParameterOffset(this.p_33)),this.p_34=new RNBOSubpatcher_569,this.p_34.setEngineAndPatcher(this.getEngine(),this),this.p_34.initialize(),this.p_34.setParameterOffset(this.getParameterOffset(this.p_34)),this.p_35=new RNBOSubpatcher_570,this.p_35.setEngineAndPatcher(this.getEngine(),this),this.p_35.initialize(),this.p_35.setParameterOffset(this.getParameterOffset(this.p_35)),this.p_36=new RNBOSubpatcher_571,this.p_36.setEngineAndPatcher(this.getEngine(),this),this.p_36.initialize(),this.p_36.setParameterOffset(this.getParameterOffset(this.p_36)),this.p_37=new RNBOSubpatcher_572,this.p_37.setEngineAndPatcher(this.getEngine(),this),this.p_37.initialize(),this.p_37.setParameterOffset(this.getParameterOffset(this.p_37)),this.p_38=new RNBOSubpatcher_573,this.p_38.setEngineAndPatcher(this.getEngine(),this),this.p_38.initialize(),this.p_38.setParameterOffset(this.getParameterOffset(this.p_38)),this.p_39=new RNBOSubpatcher_574,this.p_39.setEngineAndPatcher(this.getEngine(),this),this.p_39.initialize(),this.p_39.setParameterOffset(this.getParameterOffset(this.p_39))}processTempoEvent(e,t){this.updateTime(e),this.p_26.processTempoEvent(e,t),this.p_27.processTempoEvent(e,t),this.p_28.processTempoEvent(e,t),this.p_29.processTempoEvent(e,t),this.p_30.processTempoEvent(e,t),this.p_31.processTempoEvent(e,t),this.p_32.processTempoEvent(e,t),this.p_33.processTempoEvent(e,t),this.p_34.processTempoEvent(e,t),this.p_35.processTempoEvent(e,t),this.p_36.processTempoEvent(e,t),this.p_37.processTempoEvent(e,t),this.p_38.processTempoEvent(e,t),this.p_39.processTempoEvent(e,t)}processTransportEvent(e,t){this.updateTime(e),this.p_26.processTransportEvent(e,t),this.p_27.processTransportEvent(e,t),this.p_28.processTransportEvent(e,t),this.p_29.processTransportEvent(e,t),this.p_30.processTransportEvent(e,t),this.p_31.processTransportEvent(e,t),this.p_32.processTransportEvent(e,t),this.p_33.processTransportEvent(e,t),this.p_34.processTransportEvent(e,t),this.p_35.processTransportEvent(e,t),this.p_36.processTransportEvent(e,t),this.p_37.processTransportEvent(e,t),this.p_38.processTransportEvent(e,t),this.p_39.processTransportEvent(e,t)}processBeatTimeEvent(e,t){this.updateTime(e),this.p_26.processBeatTimeEvent(e,t),this.p_27.processBeatTimeEvent(e,t),this.p_28.processBeatTimeEvent(e,t),this.p_29.processBeatTimeEvent(e,t),this.p_30.processBeatTimeEvent(e,t),this.p_31.processBeatTimeEvent(e,t),this.p_32.processBeatTimeEvent(e,t),this.p_33.processBeatTimeEvent(e,t),this.p_34.processBeatTimeEvent(e,t),this.p_35.processBeatTimeEvent(e,t),this.p_36.processBeatTimeEvent(e,t),this.p_37.processBeatTimeEvent(e,t),this.p_38.processBeatTimeEvent(e,t),this.p_39.processBeatTimeEvent(e,t)}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){this.updateTime(e),this.p_26.processTimeSignatureEvent(e,t,r),this.p_27.processTimeSignatureEvent(e,t,r),this.p_28.processTimeSignatureEvent(e,t,r),this.p_29.processTimeSignatureEvent(e,t,r),this.p_30.processTimeSignatureEvent(e,t,r),this.p_31.processTimeSignatureEvent(e,t,r),this.p_32.processTimeSignatureEvent(e,t,r),this.p_33.processTimeSignatureEvent(e,t,r),this.p_34.processTimeSignatureEvent(e,t,r),this.p_35.processTimeSignatureEvent(e,t,r),this.p_36.processTimeSignatureEvent(e,t,r),this.p_37.processTimeSignatureEvent(e,t,r),this.p_38.processTimeSignatureEvent(e,t,r),this.p_39.processTimeSignatureEvent(e,t,r)}setParameterValue(e,t,r){RNBO_UNUSED(t),this.updateTime(r),(e-=0)<this.p_26.getNumParameters()&&this.p_26.setParameterValue(e,t,r),(e-=this.p_26.getNumParameters())<this.p_27.getNumParameters()&&this.p_27.setParameterValue(e,t,r),(e-=this.p_27.getNumParameters())<this.p_28.getNumParameters()&&this.p_28.setParameterValue(e,t,r),(e-=this.p_28.getNumParameters())<this.p_29.getNumParameters()&&this.p_29.setParameterValue(e,t,r),(e-=this.p_29.getNumParameters())<this.p_30.getNumParameters()&&this.p_30.setParameterValue(e,t,r),(e-=this.p_30.getNumParameters())<this.p_31.getNumParameters()&&this.p_31.setParameterValue(e,t,r),(e-=this.p_31.getNumParameters())<this.p_32.getNumParameters()&&this.p_32.setParameterValue(e,t,r),(e-=this.p_32.getNumParameters())<this.p_33.getNumParameters()&&this.p_33.setParameterValue(e,t,r),(e-=this.p_33.getNumParameters())<this.p_34.getNumParameters()&&this.p_34.setParameterValue(e,t,r),(e-=this.p_34.getNumParameters())<this.p_35.getNumParameters()&&this.p_35.setParameterValue(e,t,r),(e-=this.p_35.getNumParameters())<this.p_36.getNumParameters()&&this.p_36.setParameterValue(e,t,r),(e-=this.p_36.getNumParameters())<this.p_37.getNumParameters()&&this.p_37.setParameterValue(e,t,r),(e-=this.p_37.getNumParameters())<this.p_38.getNumParameters()&&this.p_38.setParameterValue(e,t,r),(e-=this.p_38.getNumParameters())<this.p_39.getNumParameters()&&this.p_39.setParameterValue(e,t,r)}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return(e-=0)<this.p_26.getNumParameters()?this.p_26.getParameterValue(e):(e-=this.p_26.getNumParameters())<this.p_27.getNumParameters()?this.p_27.getParameterValue(e):(e-=this.p_27.getNumParameters())<this.p_28.getNumParameters()?this.p_28.getParameterValue(e):(e-=this.p_28.getNumParameters())<this.p_29.getNumParameters()?this.p_29.getParameterValue(e):(e-=this.p_29.getNumParameters())<this.p_30.getNumParameters()?this.p_30.getParameterValue(e):(e-=this.p_30.getNumParameters())<this.p_31.getNumParameters()?this.p_31.getParameterValue(e):(e-=this.p_31.getNumParameters())<this.p_32.getNumParameters()?this.p_32.getParameterValue(e):(e-=this.p_32.getNumParameters())<this.p_33.getNumParameters()?this.p_33.getParameterValue(e):(e-=this.p_33.getNumParameters())<this.p_34.getNumParameters()?this.p_34.getParameterValue(e):(e-=this.p_34.getNumParameters())<this.p_35.getNumParameters()?this.p_35.getParameterValue(e):(e-=this.p_35.getNumParameters())<this.p_36.getNumParameters()?this.p_36.getParameterValue(e):(e-=this.p_36.getNumParameters())<this.p_37.getNumParameters()?this.p_37.getParameterValue(e):(e-=this.p_37.getNumParameters())<this.p_38.getNumParameters()?this.p_38.getParameterValue(e):(e-=this.p_38.getNumParameters())<this.p_39.getNumParameters()?this.p_39.getParameterValue(e):0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0+this.p_26.getNumParameters()+this.p_27.getNumParameters()+this.p_28.getNumParameters()+this.p_29.getNumParameters()+this.p_30.getNumParameters()+this.p_31.getNumParameters()+this.p_32.getNumParameters()+this.p_33.getNumParameters()+this.p_34.getNumParameters()+this.p_35.getNumParameters()+this.p_36.getNumParameters()+this.p_37.getNumParameters()+this.p_38.getNumParameters()+this.p_39.getNumParameters()}getParameterName(e){return(e-=0)<this.p_26.getNumParameters()?this.p_26.getParameterName(e):(e-=this.p_26.getNumParameters())<this.p_27.getNumParameters()?this.p_27.getParameterName(e):(e-=this.p_27.getNumParameters())<this.p_28.getNumParameters()?this.p_28.getParameterName(e):(e-=this.p_28.getNumParameters())<this.p_29.getNumParameters()?this.p_29.getParameterName(e):(e-=this.p_29.getNumParameters())<this.p_30.getNumParameters()?this.p_30.getParameterName(e):(e-=this.p_30.getNumParameters())<this.p_31.getNumParameters()?this.p_31.getParameterName(e):(e-=this.p_31.getNumParameters())<this.p_32.getNumParameters()?this.p_32.getParameterName(e):(e-=this.p_32.getNumParameters())<this.p_33.getNumParameters()?this.p_33.getParameterName(e):(e-=this.p_33.getNumParameters())<this.p_34.getNumParameters()?this.p_34.getParameterName(e):(e-=this.p_34.getNumParameters())<this.p_35.getNumParameters()?this.p_35.getParameterName(e):(e-=this.p_35.getNumParameters())<this.p_36.getNumParameters()?this.p_36.getParameterName(e):(e-=this.p_36.getNumParameters())<this.p_37.getNumParameters()?this.p_37.getParameterName(e):(e-=this.p_37.getNumParameters())<this.p_38.getNumParameters()?this.p_38.getParameterName(e):(e-=this.p_38.getNumParameters())<this.p_39.getNumParameters()?this.p_39.getParameterName(e):\"bogus\"}getParameterId(e){return(e-=0)<this.p_26.getNumParameters()?this.p_26.getParameterId(e):(e-=this.p_26.getNumParameters())<this.p_27.getNumParameters()?this.p_27.getParameterId(e):(e-=this.p_27.getNumParameters())<this.p_28.getNumParameters()?this.p_28.getParameterId(e):(e-=this.p_28.getNumParameters())<this.p_29.getNumParameters()?this.p_29.getParameterId(e):(e-=this.p_29.getNumParameters())<this.p_30.getNumParameters()?this.p_30.getParameterId(e):(e-=this.p_30.getNumParameters())<this.p_31.getNumParameters()?this.p_31.getParameterId(e):(e-=this.p_31.getNumParameters())<this.p_32.getNumParameters()?this.p_32.getParameterId(e):(e-=this.p_32.getNumParameters())<this.p_33.getNumParameters()?this.p_33.getParameterId(e):(e-=this.p_33.getNumParameters())<this.p_34.getNumParameters()?this.p_34.getParameterId(e):(e-=this.p_34.getNumParameters())<this.p_35.getNumParameters()?this.p_35.getParameterId(e):(e-=this.p_35.getNumParameters())<this.p_36.getNumParameters()?this.p_36.getParameterId(e):(e-=this.p_36.getNumParameters())<this.p_37.getNumParameters()?this.p_37.getParameterId(e):(e-=this.p_37.getNumParameters())<this.p_38.getNumParameters()?this.p_38.getParameterId(e):(e-=this.p_38.getNumParameters())<this.p_39.getNumParameters()?this.p_39.getParameterId(e):\"bogus\"}getParameterInfo(e,t){(e-=0)<this.p_26.getNumParameters()&&this.p_26.getParameterInfo(e,t),(e-=this.p_26.getNumParameters())<this.p_27.getNumParameters()&&this.p_27.getParameterInfo(e,t),(e-=this.p_27.getNumParameters())<this.p_28.getNumParameters()&&this.p_28.getParameterInfo(e,t),(e-=this.p_28.getNumParameters())<this.p_29.getNumParameters()&&this.p_29.getParameterInfo(e,t),(e-=this.p_29.getNumParameters())<this.p_30.getNumParameters()&&this.p_30.getParameterInfo(e,t),(e-=this.p_30.getNumParameters())<this.p_31.getNumParameters()&&this.p_31.getParameterInfo(e,t),(e-=this.p_31.getNumParameters())<this.p_32.getNumParameters()&&this.p_32.getParameterInfo(e,t),(e-=this.p_32.getNumParameters())<this.p_33.getNumParameters()&&this.p_33.getParameterInfo(e,t),(e-=this.p_33.getNumParameters())<this.p_34.getNumParameters()&&this.p_34.getParameterInfo(e,t),(e-=this.p_34.getNumParameters())<this.p_35.getNumParameters()&&this.p_35.getParameterInfo(e,t),(e-=this.p_35.getNumParameters())<this.p_36.getNumParameters()&&this.p_36.getParameterInfo(e,t),(e-=this.p_36.getNumParameters())<this.p_37.getNumParameters()&&this.p_37.getParameterInfo(e,t),(e-=this.p_37.getNumParameters())<this.p_38.getNumParameters()&&this.p_38.getParameterInfo(e,t),(e-=this.p_38.getNumParameters())<this.p_39.getNumParameters()&&this.p_39.getParameterInfo(e,t)}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}getParameterOffset(e){return e==this.p_26?0:e==this.p_27?0+this.p_26.getNumParameters():e==this.p_28?0+this.p_26.getNumParameters()+this.p_27.getNumParameters():e==this.p_29?0+this.p_26.getNumParameters()+this.p_27.getNumParameters()+this.p_28.getNumParameters():e==this.p_30?0+this.p_26.getNumParameters()+this.p_27.getNumParameters()+this.p_28.getNumParameters()+this.p_29.getNumParameters():e==this.p_31?0+this.p_26.getNumParameters()+this.p_27.getNumParameters()+this.p_28.getNumParameters()+this.p_29.getNumParameters()+this.p_30.getNumParameters():e==this.p_32?0+this.p_26.getNumParameters()+this.p_27.getNumParameters()+this.p_28.getNumParameters()+this.p_29.getNumParameters()+this.p_30.getNumParameters()+this.p_31.getNumParameters():e==this.p_33?0+this.p_26.getNumParameters()+this.p_27.getNumParameters()+this.p_28.getNumParameters()+this.p_29.getNumParameters()+this.p_30.getNumParameters()+this.p_31.getNumParameters()+this.p_32.getNumParameters():e==this.p_34?0+this.p_26.getNumParameters()+this.p_27.getNumParameters()+this.p_28.getNumParameters()+this.p_29.getNumParameters()+this.p_30.getNumParameters()+this.p_31.getNumParameters()+this.p_32.getNumParameters()+this.p_33.getNumParameters():e==this.p_35?0+this.p_26.getNumParameters()+this.p_27.getNumParameters()+this.p_28.getNumParameters()+this.p_29.getNumParameters()+this.p_30.getNumParameters()+this.p_31.getNumParameters()+this.p_32.getNumParameters()+this.p_33.getNumParameters()+this.p_34.getNumParameters():e==this.p_36?0+this.p_26.getNumParameters()+this.p_27.getNumParameters()+this.p_28.getNumParameters()+this.p_29.getNumParameters()+this.p_30.getNumParameters()+this.p_31.getNumParameters()+this.p_32.getNumParameters()+this.p_33.getNumParameters()+this.p_34.getNumParameters()+this.p_35.getNumParameters():e==this.p_37?0+this.p_26.getNumParameters()+this.p_27.getNumParameters()+this.p_28.getNumParameters()+this.p_29.getNumParameters()+this.p_30.getNumParameters()+this.p_31.getNumParameters()+this.p_32.getNumParameters()+this.p_33.getNumParameters()+this.p_34.getNumParameters()+this.p_35.getNumParameters()+this.p_36.getNumParameters():e==this.p_38?0+this.p_26.getNumParameters()+this.p_27.getNumParameters()+this.p_28.getNumParameters()+this.p_29.getNumParameters()+this.p_30.getNumParameters()+this.p_31.getNumParameters()+this.p_32.getNumParameters()+this.p_33.getNumParameters()+this.p_34.getNumParameters()+this.p_35.getNumParameters()+this.p_36.getNumParameters()+this.p_37.getNumParameters():e==this.p_39?0+this.p_26.getNumParameters()+this.p_27.getNumParameters()+this.p_28.getNumParameters()+this.p_29.getNumParameters()+this.p_30.getNumParameters()+this.p_31.getNumParameters()+this.p_32.getNumParameters()+this.p_33.getNumParameters()+this.p_34.getNumParameters()+this.p_35.getNumParameters()+this.p_36.getNumParameters()+this.p_37.getNumParameters()+this.p_38.getNumParameters():0}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return(e-=0)<this.p_26.getNumParameters()?this.p_26.convertToNormalizedParameterValue(e,t):(e-=this.p_26.getNumParameters())<this.p_27.getNumParameters()?this.p_27.convertToNormalizedParameterValue(e,t):(e-=this.p_27.getNumParameters())<this.p_28.getNumParameters()?this.p_28.convertToNormalizedParameterValue(e,t):(e-=this.p_28.getNumParameters())<this.p_29.getNumParameters()?this.p_29.convertToNormalizedParameterValue(e,t):(e-=this.p_29.getNumParameters())<this.p_30.getNumParameters()?this.p_30.convertToNormalizedParameterValue(e,t):(e-=this.p_30.getNumParameters())<this.p_31.getNumParameters()?this.p_31.convertToNormalizedParameterValue(e,t):(e-=this.p_31.getNumParameters())<this.p_32.getNumParameters()?this.p_32.convertToNormalizedParameterValue(e,t):(e-=this.p_32.getNumParameters())<this.p_33.getNumParameters()?this.p_33.convertToNormalizedParameterValue(e,t):(e-=this.p_33.getNumParameters())<this.p_34.getNumParameters()?this.p_34.convertToNormalizedParameterValue(e,t):(e-=this.p_34.getNumParameters())<this.p_35.getNumParameters()?this.p_35.convertToNormalizedParameterValue(e,t):(e-=this.p_35.getNumParameters())<this.p_36.getNumParameters()?this.p_36.convertToNormalizedParameterValue(e,t):(e-=this.p_36.getNumParameters())<this.p_37.getNumParameters()?this.p_37.convertToNormalizedParameterValue(e,t):(e-=this.p_37.getNumParameters())<this.p_38.getNumParameters()?this.p_38.convertToNormalizedParameterValue(e,t):(e-=this.p_38.getNumParameters())<this.p_39.getNumParameters()?this.p_39.convertToNormalizedParameterValue(e,t):t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t,(e-=0)<this.p_26.getNumParameters()?this.p_26.convertFromNormalizedParameterValue(e,t):(e-=this.p_26.getNumParameters())<this.p_27.getNumParameters()?this.p_27.convertFromNormalizedParameterValue(e,t):(e-=this.p_27.getNumParameters())<this.p_28.getNumParameters()?this.p_28.convertFromNormalizedParameterValue(e,t):(e-=this.p_28.getNumParameters())<this.p_29.getNumParameters()?this.p_29.convertFromNormalizedParameterValue(e,t):(e-=this.p_29.getNumParameters())<this.p_30.getNumParameters()?this.p_30.convertFromNormalizedParameterValue(e,t):(e-=this.p_30.getNumParameters())<this.p_31.getNumParameters()?this.p_31.convertFromNormalizedParameterValue(e,t):(e-=this.p_31.getNumParameters())<this.p_32.getNumParameters()?this.p_32.convertFromNormalizedParameterValue(e,t):(e-=this.p_32.getNumParameters())<this.p_33.getNumParameters()?this.p_33.convertFromNormalizedParameterValue(e,t):(e-=this.p_33.getNumParameters())<this.p_34.getNumParameters()?this.p_34.convertFromNormalizedParameterValue(e,t):(e-=this.p_34.getNumParameters())<this.p_35.getNumParameters()?this.p_35.convertFromNormalizedParameterValue(e,t):(e-=this.p_35.getNumParameters())<this.p_36.getNumParameters()?this.p_36.convertFromNormalizedParameterValue(e,t):(e-=this.p_36.getNumParameters())<this.p_37.getNumParameters()?this.p_37.convertFromNormalizedParameterValue(e,t):(e-=this.p_37.getNumParameters())<this.p_38.getNumParameters()?this.p_38.convertFromNormalizedParameterValue(e,t):(e-=this.p_38.getNumParameters())<this.p_39.getNumParameters()?this.p_39.convertFromNormalizedParameterValue(e,t):t}constrainParameterValue(e,t){return(e-=0)<this.p_26.getNumParameters()?this.p_26.constrainParameterValue(e,t):(e-=this.p_26.getNumParameters())<this.p_27.getNumParameters()?this.p_27.constrainParameterValue(e,t):(e-=this.p_27.getNumParameters())<this.p_28.getNumParameters()?this.p_28.constrainParameterValue(e,t):(e-=this.p_28.getNumParameters())<this.p_29.getNumParameters()?this.p_29.constrainParameterValue(e,t):(e-=this.p_29.getNumParameters())<this.p_30.getNumParameters()?this.p_30.constrainParameterValue(e,t):(e-=this.p_30.getNumParameters())<this.p_31.getNumParameters()?this.p_31.constrainParameterValue(e,t):(e-=this.p_31.getNumParameters())<this.p_32.getNumParameters()?this.p_32.constrainParameterValue(e,t):(e-=this.p_32.getNumParameters())<this.p_33.getNumParameters()?this.p_33.constrainParameterValue(e,t):(e-=this.p_33.getNumParameters())<this.p_34.getNumParameters()?this.p_34.constrainParameterValue(e,t):(e-=this.p_34.getNumParameters())<this.p_35.getNumParameters()?this.p_35.constrainParameterValue(e,t):(e-=this.p_35.getNumParameters())<this.p_36.getNumParameters()?this.p_36.constrainParameterValue(e,t):(e-=this.p_36.getNumParameters())<this.p_37.getNumParameters()?this.p_37.constrainParameterValue(e,t):(e-=this.p_37.getNumParameters())<this.p_38.getNumParameters()?this.p_38.constrainParameterValue(e,t):(e-=this.p_38.getNumParameters())<this.p_39.getNumParameters()?this.p_39.constrainParameterValue(e,t):t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"fm1_freq\"):this.inport_17_value_number_set(s);break;case TAG(\"fm1_c1ratio\"):this.inport_18_value_number_set(s);break;case TAG(\"fm1_c2ratio\"):this.inport_19_value_number_set(s);break;case TAG(\"fm1_c3ratio\"):this.inport_20_value_number_set(s);break;case TAG(\"fm1_3to1\"):this.inport_21_value_number_set(s);break;case TAG(\"fm1_2to1\"):this.inport_22_value_number_set(s);break;case TAG(\"fm1_3to2\"):this.inport_23_value_number_set(s);break;case TAG(\"fm1_c1release\"):this.inport_24_value_number_set(s);break;case TAG(\"fm1_c2release\"):this.inport_25_value_number_set(s);break;case TAG(\"fm1_c3release\"):this.inport_26_value_number_set(s);break;case TAG(\"fm1_op1gain\"):this.inport_27_value_number_set(s);break;case TAG(\"fm1_op2gain\"):this.inport_28_value_number_set(s);break;case TAG(\"fm1_op3gain\"):this.inport_29_value_number_set(s);break;case TAG(\"fm1_gain\"):this.inport_30_value_number_set(s)}this.p_26.processNumMessage(e,t,r,s),this.p_27.processNumMessage(e,t,r,s),this.p_28.processNumMessage(e,t,r,s),this.p_29.processNumMessage(e,t,r,s),this.p_30.processNumMessage(e,t,r,s),this.p_31.processNumMessage(e,t,r,s),this.p_32.processNumMessage(e,t,r,s),this.p_33.processNumMessage(e,t,r,s),this.p_34.processNumMessage(e,t,r,s),this.p_35.processNumMessage(e,t,r,s),this.p_36.processNumMessage(e,t,r,s),this.p_37.processNumMessage(e,t,r,s),this.p_38.processNumMessage(e,t,r,s),this.p_39.processNumMessage(e,t,r,s)}processListMessage(e,t,r,s){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"fm1_freq\"):this.inport_17_value_list_set(s);break;case TAG(\"fm1_c1ratio\"):this.inport_18_value_list_set(s);break;case TAG(\"fm1_c2ratio\"):this.inport_19_value_list_set(s);break;case TAG(\"fm1_c3ratio\"):this.inport_20_value_list_set(s);break;case TAG(\"fm1_3to1\"):this.inport_21_value_list_set(s);break;case TAG(\"fm1_2to1\"):this.inport_22_value_list_set(s);break;case TAG(\"fm1_3to2\"):this.inport_23_value_list_set(s);break;case TAG(\"fm1_c1release\"):this.inport_24_value_list_set(s);break;case TAG(\"fm1_c2release\"):this.inport_25_value_list_set(s);break;case TAG(\"fm1_c3release\"):this.inport_26_value_list_set(s);break;case TAG(\"fm1_op1gain\"):this.inport_27_value_list_set(s);break;case TAG(\"fm1_op2gain\"):this.inport_28_value_list_set(s);break;case TAG(\"fm1_op3gain\"):this.inport_29_value_list_set(s);break;case TAG(\"fm1_gain\"):this.inport_30_value_list_set(s)}this.p_26.processListMessage(e,t,r,s),this.p_27.processListMessage(e,t,r,s),this.p_28.processListMessage(e,t,r,s),this.p_29.processListMessage(e,t,r,s),this.p_30.processListMessage(e,t,r,s),this.p_31.processListMessage(e,t,r,s),this.p_32.processListMessage(e,t,r,s),this.p_33.processListMessage(e,t,r,s),this.p_34.processListMessage(e,t,r,s),this.p_35.processListMessage(e,t,r,s),this.p_36.processListMessage(e,t,r,s),this.p_37.processListMessage(e,t,r,s),this.p_38.processListMessage(e,t,r,s),this.p_39.processListMessage(e,t,r,s)}processBangMessage(e,t,r){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"fm1_freq\"):this.inport_17_value_bang_bang();break;case TAG(\"fm1_c1ratio\"):this.inport_18_value_bang_bang();break;case TAG(\"fm1_c2ratio\"):this.inport_19_value_bang_bang();break;case TAG(\"fm1_c3ratio\"):this.inport_20_value_bang_bang();break;case TAG(\"fm1_3to1\"):this.inport_21_value_bang_bang();break;case TAG(\"fm1_2to1\"):this.inport_22_value_bang_bang();break;case TAG(\"fm1_3to2\"):this.inport_23_value_bang_bang();break;case TAG(\"fm1_c1release\"):this.inport_24_value_bang_bang();break;case TAG(\"fm1_c2release\"):this.inport_25_value_bang_bang();break;case TAG(\"fm1_c3release\"):this.inport_26_value_bang_bang();break;case TAG(\"fm1_op1gain\"):this.inport_27_value_bang_bang();break;case TAG(\"fm1_op2gain\"):this.inport_28_value_bang_bang();break;case TAG(\"fm1_op3gain\"):this.inport_29_value_bang_bang();break;case TAG(\"fm1_gain\"):this.inport_30_value_bang_bang()}this.p_26.processBangMessage(e,t,r),this.p_27.processBangMessage(e,t,r),this.p_28.processBangMessage(e,t,r),this.p_29.processBangMessage(e,t,r),this.p_30.processBangMessage(e,t,r),this.p_31.processBangMessage(e,t,r),this.p_32.processBangMessage(e,t,r),this.p_33.processBangMessage(e,t,r),this.p_34.processBangMessage(e,t,r),this.p_35.processBangMessage(e,t,r),this.p_36.processBangMessage(e,t,r),this.p_37.processBangMessage(e,t,r),this.p_38.processBangMessage(e,t,r),this.p_39.processBangMessage(e,t,r)}resolveTag(e){switch(e){case TAG(\"fm1_freq\"):return\"fm1_freq\";case TAG(\"\"):return\"\";case TAG(\"fm1_c1ratio\"):return\"fm1_c1ratio\";case TAG(\"fm1_c2ratio\"):return\"fm1_c2ratio\";case TAG(\"fm1_c3ratio\"):return\"fm1_c3ratio\";case TAG(\"fm1_3to1\"):return\"fm1_3to1\";case TAG(\"fm1_2to1\"):return\"fm1_2to1\";case TAG(\"fm1_3to2\"):return\"fm1_3to2\";case TAG(\"fm1_c1release\"):return\"fm1_c1release\";case TAG(\"fm1_c2release\"):return\"fm1_c2release\";case TAG(\"fm1_c3release\"):return\"fm1_c3release\";case TAG(\"fm1_op1gain\"):return\"fm1_op1gain\";case TAG(\"fm1_op2gain\"):return\"fm1_op2gain\";case TAG(\"fm1_op3gain\"):return\"fm1_op3gain\";case TAG(\"fm1_gain\"):return\"fm1_gain\"}var t=this.p_26.resolveTag(e);if(t)return t;var r=this.p_27.resolveTag(e);if(r)return r;var s=this.p_28.resolveTag(e);if(s)return s;var a=this.p_29.resolveTag(e);if(a)return a;var i=this.p_30.resolveTag(e);if(i)return i;var n=this.p_31.resolveTag(e);if(n)return n;var m=this.p_32.resolveTag(e);if(m)return m;var u=this.p_33.resolveTag(e);if(u)return u;var h=this.p_34.resolveTag(e);if(h)return h;var p=this.p_35.resolveTag(e);if(p)return p;var _=this.p_36.resolveTag(e);if(_)return _;var g=this.p_37.resolveTag(e);if(g)return g;var o=this.p_38.resolveTag(e);if(o)return o;var P=this.p_39.resolveTag(e);return P||null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){this.p_26.processDataViewUpdate(e,t),this.p_27.processDataViewUpdate(e,t),this.p_28.processDataViewUpdate(e,t),this.p_29.processDataViewUpdate(e,t),this.p_30.processDataViewUpdate(e,t),this.p_31.processDataViewUpdate(e,t),this.p_32.processDataViewUpdate(e,t),this.p_33.processDataViewUpdate(e,t),this.p_34.processDataViewUpdate(e,t),this.p_35.processDataViewUpdate(e,t),this.p_36.processDataViewUpdate(e,t),this.p_37.processDataViewUpdate(e,t),this.p_38.processDataViewUpdate(e,t),this.p_39.processDataViewUpdate(e,t)}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_623{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_624{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.onebang_02_allow=0,this.counter_17_phase=!0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"fm2_listener\"):this.inport_31_value_number_set(s)}}processListMessage(e,t,r,s){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"fm2_listener\"):this.inport_31_value_list_set(s)}}processBangMessage(e,t,r){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"fm2_listener\"):this.inport_31_value_bang_bang()}}resolveTag(e){switch(e){case TAG(\"fm2_listener\"):return\"fm2_listener\";case TAG(\"\"):return\"\"}return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_625{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_575{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(4),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.phasor_04_sigbuf=0,this.phasor_04_setupDone=!1,this.ip_10_sigbuf=0,this.ip_10_setupDone=!1,this.ip_11_sigbuf=0,this.ip_11_setupDone=!1,this.onepole_tilde_04_needsUpdate=!1,this.onepole_tilde_04_setupDone=!1,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 2}getNumOutputChannels(){return 2}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}setVoiceIndex(e){this._voiceIndex=e}setNoteNumber(e){this._noteNumber=e}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){switch(RNBO_UNUSED(s),RNBO_UNUSED(r),this.updateTime(e),t){case 760652352:this.line_06_target_bang();break;case 861222235:this.curve_04_target_bang()}}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_576{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}setVoiceIndex(e){this._voiceIndex=e}setNoteNumber(e){this._noteNumber=e}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){switch(RNBO_UNUSED(s),RNBO_UNUSED(r),this.updateTime(e),t){case 760652352:this.line_07_target_bang()}}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_577{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(4),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.phasor_05_sigbuf=0,this.phasor_05_setupDone=!1,this.ip_12_sigbuf=0,this.ip_12_setupDone=!1,this.ip_13_sigbuf=0,this.ip_13_setupDone=!1,this.onepole_tilde_05_needsUpdate=!1,this.onepole_tilde_05_setupDone=!1,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 2}getNumOutputChannels(){return 2}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}setVoiceIndex(e){this._voiceIndex=e}setNoteNumber(e){this._noteNumber=e}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){switch(RNBO_UNUSED(s),RNBO_UNUSED(r),this.updateTime(e),t){case 760652352:this.line_08_target_bang();break;case 861222235:this.curve_05_target_bang()}}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_578{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(4),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.phasor_06_sigbuf=0,this.phasor_06_setupDone=!1,this.ip_14_sigbuf=0,this.ip_14_setupDone=!1,this.ip_15_sigbuf=0,this.ip_15_setupDone=!1,this.onepole_tilde_06_needsUpdate=!1,this.onepole_tilde_06_setupDone=!1,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 2}getNumOutputChannels(){return 2}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}setVoiceIndex(e){this._voiceIndex=e}setNoteNumber(e){this._noteNumber=e}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){switch(RNBO_UNUSED(s),RNBO_UNUSED(r),this.updateTime(e),t){case 760652352:this.line_09_target_bang();break;case 861222235:this.curve_06_target_bang()}}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_579{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(7),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.ip_16_sigbuf=0,this.ip_16_setupDone=!1,this.ip_17_sigbuf=0,this.ip_17_setupDone=!1,this.ip_18_sigbuf=0,this.ip_18_setupDone=!1,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0,this.p_40=new Array,this.p_41=new Array,this.p_42=new Array,this.p_43=new Array}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 1}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}setVoiceIndex(e){this._voiceIndex=e,this.p_40.setVoiceIndex(e),this.p_41.setVoiceIndex(e),this.p_42.setVoiceIndex(e),this.p_43.setVoiceIndex(e)}setNoteNumber(e){this._noteNumber=e,this.p_40.setNoteNumber(e),this.p_41.setNoteNumber(e),this.p_42.setNoteNumber(e),this.p_43.setNoteNumber(e)}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){this.p_40=new RNBOSubpatcher_575,this.p_40.setEngineAndPatcher(this.getEngine(),this),this.p_40.initialize(),this.p_40.setParameterOffset(this.getParameterOffset(this.p_40)),this.p_41=new RNBOSubpatcher_576,this.p_41.setEngineAndPatcher(this.getEngine(),this),this.p_41.initialize(),this.p_41.setParameterOffset(this.getParameterOffset(this.p_41)),this.p_42=new RNBOSubpatcher_577,this.p_42.setEngineAndPatcher(this.getEngine(),this),this.p_42.initialize(),this.p_42.setParameterOffset(this.getParameterOffset(this.p_42)),this.p_43=new RNBOSubpatcher_578,this.p_43.setEngineAndPatcher(this.getEngine(),this),this.p_43.initialize(),this.p_43.setParameterOffset(this.getParameterOffset(this.p_43))}processTempoEvent(e,t){this.updateTime(e),this.p_40.processTempoEvent(e,t),this.p_41.processTempoEvent(e,t),this.p_42.processTempoEvent(e,t),this.p_43.processTempoEvent(e,t)}processTransportEvent(e,t){this.updateTime(e),this.p_40.processTransportEvent(e,t),this.p_41.processTransportEvent(e,t),this.p_42.processTransportEvent(e,t),this.p_43.processTransportEvent(e,t)}processBeatTimeEvent(e,t){this.updateTime(e),this.p_40.processBeatTimeEvent(e,t),this.p_41.processBeatTimeEvent(e,t),this.p_42.processBeatTimeEvent(e,t),this.p_43.processBeatTimeEvent(e,t)}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){this.updateTime(e),this.p_40.processTimeSignatureEvent(e,t,r),this.p_41.processTimeSignatureEvent(e,t,r),this.p_42.processTimeSignatureEvent(e,t,r),this.p_43.processTimeSignatureEvent(e,t,r)}setParameterValue(e,t,r){RNBO_UNUSED(t),this.updateTime(r),(e-=0)<this.p_40.getNumParameters()&&this.p_40.setParameterValue(e,t,r),(e-=this.p_40.getNumParameters())<this.p_41.getNumParameters()&&this.p_41.setParameterValue(e,t,r),(e-=this.p_41.getNumParameters())<this.p_42.getNumParameters()&&this.p_42.setParameterValue(e,t,r),(e-=this.p_42.getNumParameters())<this.p_43.getNumParameters()&&this.p_43.setParameterValue(e,t,r)}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return(e-=0)<this.p_40.getNumParameters()?this.p_40.getParameterValue(e):(e-=this.p_40.getNumParameters())<this.p_41.getNumParameters()?this.p_41.getParameterValue(e):(e-=this.p_41.getNumParameters())<this.p_42.getNumParameters()?this.p_42.getParameterValue(e):(e-=this.p_42.getNumParameters())<this.p_43.getNumParameters()?this.p_43.getParameterValue(e):0}getPolyParameterValue(e,t){return e[0].getParameterValue(t)}setPolyParameterValue(e,t,r,s){for(var a=0;a<64;a++)e[a].setParameterValue(t,r,s)}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0+this.p_40.getNumParameters()+this.p_41.getNumParameters()+this.p_42.getNumParameters()+this.p_43.getNumParameters()}getParameterName(e){return(e-=0)<this.p_40.getNumParameters()?this.p_40.getParameterName(e):(e-=this.p_40.getNumParameters())<this.p_41.getNumParameters()?this.p_41.getParameterName(e):(e-=this.p_41.getNumParameters())<this.p_42.getNumParameters()?this.p_42.getParameterName(e):(e-=this.p_42.getNumParameters())<this.p_43.getNumParameters()?this.p_43.getParameterName(e):\"bogus\"}getParameterId(e){return(e-=0)<this.p_40.getNumParameters()?this.p_40.getParameterId(e):(e-=this.p_40.getNumParameters())<this.p_41.getNumParameters()?this.p_41.getParameterId(e):(e-=this.p_41.getNumParameters())<this.p_42.getNumParameters()?this.p_42.getParameterId(e):(e-=this.p_42.getNumParameters())<this.p_43.getNumParameters()?this.p_43.getParameterId(e):\"bogus\"}getParameterInfo(e,t){(e-=0)<this.p_40.getNumParameters()&&this.p_40.getParameterInfo(e,t),(e-=this.p_40.getNumParameters())<this.p_41.getNumParameters()&&this.p_41.getParameterInfo(e,t),(e-=this.p_41.getNumParameters())<this.p_42.getNumParameters()&&this.p_42.getParameterInfo(e,t),(e-=this.p_42.getNumParameters())<this.p_43.getNumParameters()&&this.p_43.getParameterInfo(e,t)}sendParameter(e){1==this._voiceIndex&&this.getPatcher().sendParameter(e+this.parameterOffset)}sendPolyParameter(e,t){this.getPatcher().sendParameter(e+this.parameterOffset+t-1)}getParameterOffset(e){return e==this.p_40?0:e==this.p_41?0+this.p_40.getNumParameters():e==this.p_42?0+this.p_40.getNumParameters()+this.p_41.getNumParameters():e==this.p_43?0+this.p_40.getNumParameters()+this.p_41.getNumParameters()+this.p_42.getNumParameters():0}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return(e-=0)<this.p_40.getNumParameters()?this.p_40.convertToNormalizedParameterValue(e,t):(e-=this.p_40.getNumParameters())<this.p_41.getNumParameters()?this.p_41.convertToNormalizedParameterValue(e,t):(e-=this.p_41.getNumParameters())<this.p_42.getNumParameters()?this.p_42.convertToNormalizedParameterValue(e,t):(e-=this.p_42.getNumParameters())<this.p_43.getNumParameters()?this.p_43.convertToNormalizedParameterValue(e,t):t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t,(e-=0)<this.p_40.getNumParameters()?this.p_40.convertFromNormalizedParameterValue(e,t):(e-=this.p_40.getNumParameters())<this.p_41.getNumParameters()?this.p_41.convertFromNormalizedParameterValue(e,t):(e-=this.p_41.getNumParameters())<this.p_42.getNumParameters()?this.p_42.convertFromNormalizedParameterValue(e,t):(e-=this.p_42.getNumParameters())<this.p_43.getNumParameters()?this.p_43.convertFromNormalizedParameterValue(e,t):t}constrainParameterValue(e,t){return(e-=0)<this.p_40.getNumParameters()?this.p_40.constrainParameterValue(e,t):(e-=this.p_40.getNumParameters())<this.p_41.getNumParameters()?this.p_41.constrainParameterValue(e,t):(e-=this.p_41.getNumParameters())<this.p_42.getNumParameters()?this.p_42.constrainParameterValue(e,t):(e-=this.p_42.getNumParameters())<this.p_43.getNumParameters()?this.p_43.constrainParameterValue(e,t):t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){switch(RNBO_UNUSED(s),RNBO_UNUSED(r),this.updateTime(e),t){case 892732297:this.loadmess_03_startupbang_bang();break;case 760652352:this.line_10_target_bang()}}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){RNBO_UNUSED(t),this.updateTime(r),this.p_40.processNumMessage(e,t,r,s),this.p_41.processNumMessage(e,t,r,s),this.p_42.processNumMessage(e,t,r,s),this.p_43.processNumMessage(e,t,r,s)}processListMessage(e,t,r,s){RNBO_UNUSED(t),this.updateTime(r),this.p_40.processListMessage(e,t,r,s),this.p_41.processListMessage(e,t,r,s),this.p_42.processListMessage(e,t,r,s),this.p_43.processListMessage(e,t,r,s)}processBangMessage(e,t,r){switch(this.updateTime(r),e){case TAG(\"startupbang\"):TAG(\"p_obj-156/p_obj-1/loadmess_obj-2\")==t&&this.loadmess_03_startupbang_bang()}this.p_40.processBangMessage(e,t,r),this.p_41.processBangMessage(e,t,r),this.p_42.processBangMessage(e,t,r),this.p_43.processBangMessage(e,t,r)}resolveTag(e){switch(e){case TAG(\"startupbang\"):return\"startupbang\";case TAG(\"p_obj-156/p_obj-1/loadmess_obj-2\"):return\"p_obj-156/p_obj-1/loadmess_obj-2\"}var t=this.p_40.resolveTag(e);if(t)return t;var r=this.p_41.resolveTag(e);if(r)return r;var s=this.p_42.resolveTag(e);if(s)return s;var a=this.p_43.resolveTag(e);return a||null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){this.p_40.processDataViewUpdate(e,t),this.p_41.processDataViewUpdate(e,t),this.p_42.processDataViewUpdate(e,t),this.p_43.processDataViewUpdate(e,t)}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_626{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.counter_18_phase=!0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0,this.p_44=new Array}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 1}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){for(var e=0;e<64;e++)this.p_44[e]=new RNBOSubpatcher_579,this.p_44[e].setEngineAndPatcher(this.getEngine(),this),this.p_44[e].initialize(),this.p_44[e].setParameterOffset(this.getParameterOffset(this.p_44[0])),this.p_44[e].setVoiceIndex(e+1)}processTempoEvent(e,t){this.updateTime(e);for(var r=0;r<64;r++)this.p_44[r].processTempoEvent(e,t)}processTransportEvent(e,t){this.updateTime(e);for(var r=0;r<64;r++)this.p_44[r].processTransportEvent(e,t)}processBeatTimeEvent(e,t){this.updateTime(e);for(var r=0;r<64;r++)this.p_44[r].processBeatTimeEvent(e,t)}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){this.updateTime(e);for(var s=0;s<64;s++)this.p_44[s].processTimeSignatureEvent(e,t,r)}setParameterValue(e,t,r){RNBO_UNUSED(t),this.updateTime(r),(e-=0)<this.p_44[0].getNumParameters()&&this.p_44[0].setPolyParameterValue(this.p_44,e,t,r)}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return(e-=0)<this.p_44[0].getNumParameters()?this.p_44[0].getPolyParameterValue(this.p_44,e):0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0+this.p_44[0].getNumParameters()}getParameterName(e){return(e-=0)<this.p_44[0].getNumParameters()?this.p_44[0].getParameterName(e):\"bogus\"}getParameterId(e){return(e-=0)<this.p_44[0].getNumParameters()?this.p_44[0].getParameterId(e):\"bogus\"}getParameterInfo(e,t){if((e-=0)<this.p_44[0].getNumParameters())for(var r=0;r<64;r++)this.p_44[r].getParameterInfo(e,t)}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}getParameterOffset(e){return this.p_44[0],0}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return(e-=0)<this.p_44[0].getNumParameters()?this.p_44[0].convertToNormalizedParameterValue(e,t):t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t,(e-=0)<this.p_44[0].getNumParameters()?this.p_44[0].convertFromNormalizedParameterValue(e,t):t}constrainParameterValue(e,t){return(e-=0)<this.p_44[0].getNumParameters()?this.p_44[0].constrainParameterValue(e,t):t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){switch(RNBO_UNUSED(s),RNBO_UNUSED(r),this.updateTime(e),t){case 892732297:this.loadmess_04_startupbang_bang()}}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){RNBO_UNUSED(t),this.updateTime(r);for(var a=0;a<64;a++)this.p_44[a].processNumMessage(e,t,r,s)}processListMessage(e,t,r,s){RNBO_UNUSED(t),this.updateTime(r);for(var a=0;a<64;a++)this.p_44[a].processListMessage(e,t,r,s)}processBangMessage(e,t,r){switch(this.updateTime(r),e){case TAG(\"startupbang\"):TAG(\"p_obj-156/loadmess_obj-6\")==t&&this.loadmess_04_startupbang_bang()}for(var s=0;s<64;s++)this.p_44[s].processBangMessage(e,t,r)}resolveTag(e){switch(e){case TAG(\"startupbang\"):return\"startupbang\";case TAG(\"p_obj-156/loadmess_obj-6\"):return\"p_obj-156/loadmess_obj-6\"}var t=this.p_44[0].resolveTag(e);return t||null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){for(var r=0;r<64;r++)this.p_44[r].processDataViewUpdate(e,t)}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_580{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.counter_19_phase=!0,this.random_43_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_581{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.counter_20_phase=!0,this.random_44_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_582{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.counter_21_phase=!0,this.random_45_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_583{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.counter_22_phase=!0,this.random_46_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_584{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.counter_23_phase=!0,this.random_47_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_585{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.counter_24_phase=!0,this.random_48_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_586{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.counter_25_phase=!0,this.random_49_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_587{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.counter_26_phase=!0,this.random_50_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_588{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.counter_27_phase=!0,this.random_51_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_589{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.counter_28_phase=!0,this.random_52_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_590{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.counter_29_phase=!0,this.random_53_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_591{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.counter_30_phase=!0,this.random_54_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_592{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.counter_31_phase=!0,this.random_55_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_593{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.counter_32_phase=!0,this.random_56_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_627{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0,this.p_45=new Array,this.p_46=new Array,this.p_47=new Array,this.p_48=new Array,this.p_49=new Array,this.p_50=new Array,this.p_51=new Array,this.p_52=new Array,this.p_53=new Array,this.p_54=new Array,this.p_55=new Array,this.p_56=new Array,this.p_57=new Array,this.p_58=new Array}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){this.p_45=new RNBOSubpatcher_580,this.p_45.setEngineAndPatcher(this.getEngine(),this),this.p_45.initialize(),this.p_45.setParameterOffset(this.getParameterOffset(this.p_45)),this.p_46=new RNBOSubpatcher_581,this.p_46.setEngineAndPatcher(this.getEngine(),this),this.p_46.initialize(),this.p_46.setParameterOffset(this.getParameterOffset(this.p_46)),this.p_47=new RNBOSubpatcher_582,this.p_47.setEngineAndPatcher(this.getEngine(),this),this.p_47.initialize(),this.p_47.setParameterOffset(this.getParameterOffset(this.p_47)),this.p_48=new RNBOSubpatcher_583,this.p_48.setEngineAndPatcher(this.getEngine(),this),this.p_48.initialize(),this.p_48.setParameterOffset(this.getParameterOffset(this.p_48)),this.p_49=new RNBOSubpatcher_584,this.p_49.setEngineAndPatcher(this.getEngine(),this),this.p_49.initialize(),this.p_49.setParameterOffset(this.getParameterOffset(this.p_49)),this.p_50=new RNBOSubpatcher_585,this.p_50.setEngineAndPatcher(this.getEngine(),this),this.p_50.initialize(),this.p_50.setParameterOffset(this.getParameterOffset(this.p_50)),this.p_51=new RNBOSubpatcher_586,this.p_51.setEngineAndPatcher(this.getEngine(),this),this.p_51.initialize(),this.p_51.setParameterOffset(this.getParameterOffset(this.p_51)),this.p_52=new RNBOSubpatcher_587,this.p_52.setEngineAndPatcher(this.getEngine(),this),this.p_52.initialize(),this.p_52.setParameterOffset(this.getParameterOffset(this.p_52)),this.p_53=new RNBOSubpatcher_588,this.p_53.setEngineAndPatcher(this.getEngine(),this),this.p_53.initialize(),this.p_53.setParameterOffset(this.getParameterOffset(this.p_53)),this.p_54=new RNBOSubpatcher_589,this.p_54.setEngineAndPatcher(this.getEngine(),this),this.p_54.initialize(),this.p_54.setParameterOffset(this.getParameterOffset(this.p_54)),this.p_55=new RNBOSubpatcher_590,this.p_55.setEngineAndPatcher(this.getEngine(),this),this.p_55.initialize(),this.p_55.setParameterOffset(this.getParameterOffset(this.p_55)),this.p_56=new RNBOSubpatcher_591,this.p_56.setEngineAndPatcher(this.getEngine(),this),this.p_56.initialize(),this.p_56.setParameterOffset(this.getParameterOffset(this.p_56)),this.p_57=new RNBOSubpatcher_592,this.p_57.setEngineAndPatcher(this.getEngine(),this),this.p_57.initialize(),this.p_57.setParameterOffset(this.getParameterOffset(this.p_57)),this.p_58=new RNBOSubpatcher_593,this.p_58.setEngineAndPatcher(this.getEngine(),this),this.p_58.initialize(),this.p_58.setParameterOffset(this.getParameterOffset(this.p_58))}processTempoEvent(e,t){this.updateTime(e),this.p_45.processTempoEvent(e,t),this.p_46.processTempoEvent(e,t),this.p_47.processTempoEvent(e,t),this.p_48.processTempoEvent(e,t),this.p_49.processTempoEvent(e,t),this.p_50.processTempoEvent(e,t),this.p_51.processTempoEvent(e,t),this.p_52.processTempoEvent(e,t),this.p_53.processTempoEvent(e,t),this.p_54.processTempoEvent(e,t),this.p_55.processTempoEvent(e,t),this.p_56.processTempoEvent(e,t),this.p_57.processTempoEvent(e,t),this.p_58.processTempoEvent(e,t)}processTransportEvent(e,t){this.updateTime(e),this.p_45.processTransportEvent(e,t),this.p_46.processTransportEvent(e,t),this.p_47.processTransportEvent(e,t),this.p_48.processTransportEvent(e,t),this.p_49.processTransportEvent(e,t),this.p_50.processTransportEvent(e,t),this.p_51.processTransportEvent(e,t),this.p_52.processTransportEvent(e,t),this.p_53.processTransportEvent(e,t),this.p_54.processTransportEvent(e,t),this.p_55.processTransportEvent(e,t),this.p_56.processTransportEvent(e,t),this.p_57.processTransportEvent(e,t),this.p_58.processTransportEvent(e,t)}processBeatTimeEvent(e,t){this.updateTime(e),this.p_45.processBeatTimeEvent(e,t),this.p_46.processBeatTimeEvent(e,t),this.p_47.processBeatTimeEvent(e,t),this.p_48.processBeatTimeEvent(e,t),this.p_49.processBeatTimeEvent(e,t),this.p_50.processBeatTimeEvent(e,t),this.p_51.processBeatTimeEvent(e,t),this.p_52.processBeatTimeEvent(e,t),this.p_53.processBeatTimeEvent(e,t),this.p_54.processBeatTimeEvent(e,t),this.p_55.processBeatTimeEvent(e,t),this.p_56.processBeatTimeEvent(e,t),this.p_57.processBeatTimeEvent(e,t),this.p_58.processBeatTimeEvent(e,t)}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){this.updateTime(e),this.p_45.processTimeSignatureEvent(e,t,r),this.p_46.processTimeSignatureEvent(e,t,r),this.p_47.processTimeSignatureEvent(e,t,r),this.p_48.processTimeSignatureEvent(e,t,r),this.p_49.processTimeSignatureEvent(e,t,r),this.p_50.processTimeSignatureEvent(e,t,r),this.p_51.processTimeSignatureEvent(e,t,r),this.p_52.processTimeSignatureEvent(e,t,r),this.p_53.processTimeSignatureEvent(e,t,r),this.p_54.processTimeSignatureEvent(e,t,r),this.p_55.processTimeSignatureEvent(e,t,r),this.p_56.processTimeSignatureEvent(e,t,r),this.p_57.processTimeSignatureEvent(e,t,r),this.p_58.processTimeSignatureEvent(e,t,r)}setParameterValue(e,t,r){RNBO_UNUSED(t),this.updateTime(r),(e-=0)<this.p_45.getNumParameters()&&this.p_45.setParameterValue(e,t,r),(e-=this.p_45.getNumParameters())<this.p_46.getNumParameters()&&this.p_46.setParameterValue(e,t,r),(e-=this.p_46.getNumParameters())<this.p_47.getNumParameters()&&this.p_47.setParameterValue(e,t,r),(e-=this.p_47.getNumParameters())<this.p_48.getNumParameters()&&this.p_48.setParameterValue(e,t,r),(e-=this.p_48.getNumParameters())<this.p_49.getNumParameters()&&this.p_49.setParameterValue(e,t,r),(e-=this.p_49.getNumParameters())<this.p_50.getNumParameters()&&this.p_50.setParameterValue(e,t,r),(e-=this.p_50.getNumParameters())<this.p_51.getNumParameters()&&this.p_51.setParameterValue(e,t,r),(e-=this.p_51.getNumParameters())<this.p_52.getNumParameters()&&this.p_52.setParameterValue(e,t,r),(e-=this.p_52.getNumParameters())<this.p_53.getNumParameters()&&this.p_53.setParameterValue(e,t,r),(e-=this.p_53.getNumParameters())<this.p_54.getNumParameters()&&this.p_54.setParameterValue(e,t,r),(e-=this.p_54.getNumParameters())<this.p_55.getNumParameters()&&this.p_55.setParameterValue(e,t,r),(e-=this.p_55.getNumParameters())<this.p_56.getNumParameters()&&this.p_56.setParameterValue(e,t,r),(e-=this.p_56.getNumParameters())<this.p_57.getNumParameters()&&this.p_57.setParameterValue(e,t,r),(e-=this.p_57.getNumParameters())<this.p_58.getNumParameters()&&this.p_58.setParameterValue(e,t,r)}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return(e-=0)<this.p_45.getNumParameters()?this.p_45.getParameterValue(e):(e-=this.p_45.getNumParameters())<this.p_46.getNumParameters()?this.p_46.getParameterValue(e):(e-=this.p_46.getNumParameters())<this.p_47.getNumParameters()?this.p_47.getParameterValue(e):(e-=this.p_47.getNumParameters())<this.p_48.getNumParameters()?this.p_48.getParameterValue(e):(e-=this.p_48.getNumParameters())<this.p_49.getNumParameters()?this.p_49.getParameterValue(e):(e-=this.p_49.getNumParameters())<this.p_50.getNumParameters()?this.p_50.getParameterValue(e):(e-=this.p_50.getNumParameters())<this.p_51.getNumParameters()?this.p_51.getParameterValue(e):(e-=this.p_51.getNumParameters())<this.p_52.getNumParameters()?this.p_52.getParameterValue(e):(e-=this.p_52.getNumParameters())<this.p_53.getNumParameters()?this.p_53.getParameterValue(e):(e-=this.p_53.getNumParameters())<this.p_54.getNumParameters()?this.p_54.getParameterValue(e):(e-=this.p_54.getNumParameters())<this.p_55.getNumParameters()?this.p_55.getParameterValue(e):(e-=this.p_55.getNumParameters())<this.p_56.getNumParameters()?this.p_56.getParameterValue(e):(e-=this.p_56.getNumParameters())<this.p_57.getNumParameters()?this.p_57.getParameterValue(e):(e-=this.p_57.getNumParameters())<this.p_58.getNumParameters()?this.p_58.getParameterValue(e):0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0+this.p_45.getNumParameters()+this.p_46.getNumParameters()+this.p_47.getNumParameters()+this.p_48.getNumParameters()+this.p_49.getNumParameters()+this.p_50.getNumParameters()+this.p_51.getNumParameters()+this.p_52.getNumParameters()+this.p_53.getNumParameters()+this.p_54.getNumParameters()+this.p_55.getNumParameters()+this.p_56.getNumParameters()+this.p_57.getNumParameters()+this.p_58.getNumParameters()}getParameterName(e){return(e-=0)<this.p_45.getNumParameters()?this.p_45.getParameterName(e):(e-=this.p_45.getNumParameters())<this.p_46.getNumParameters()?this.p_46.getParameterName(e):(e-=this.p_46.getNumParameters())<this.p_47.getNumParameters()?this.p_47.getParameterName(e):(e-=this.p_47.getNumParameters())<this.p_48.getNumParameters()?this.p_48.getParameterName(e):(e-=this.p_48.getNumParameters())<this.p_49.getNumParameters()?this.p_49.getParameterName(e):(e-=this.p_49.getNumParameters())<this.p_50.getNumParameters()?this.p_50.getParameterName(e):(e-=this.p_50.getNumParameters())<this.p_51.getNumParameters()?this.p_51.getParameterName(e):(e-=this.p_51.getNumParameters())<this.p_52.getNumParameters()?this.p_52.getParameterName(e):(e-=this.p_52.getNumParameters())<this.p_53.getNumParameters()?this.p_53.getParameterName(e):(e-=this.p_53.getNumParameters())<this.p_54.getNumParameters()?this.p_54.getParameterName(e):(e-=this.p_54.getNumParameters())<this.p_55.getNumParameters()?this.p_55.getParameterName(e):(e-=this.p_55.getNumParameters())<this.p_56.getNumParameters()?this.p_56.getParameterName(e):(e-=this.p_56.getNumParameters())<this.p_57.getNumParameters()?this.p_57.getParameterName(e):(e-=this.p_57.getNumParameters())<this.p_58.getNumParameters()?this.p_58.getParameterName(e):\"bogus\"}getParameterId(e){return(e-=0)<this.p_45.getNumParameters()?this.p_45.getParameterId(e):(e-=this.p_45.getNumParameters())<this.p_46.getNumParameters()?this.p_46.getParameterId(e):(e-=this.p_46.getNumParameters())<this.p_47.getNumParameters()?this.p_47.getParameterId(e):(e-=this.p_47.getNumParameters())<this.p_48.getNumParameters()?this.p_48.getParameterId(e):(e-=this.p_48.getNumParameters())<this.p_49.getNumParameters()?this.p_49.getParameterId(e):(e-=this.p_49.getNumParameters())<this.p_50.getNumParameters()?this.p_50.getParameterId(e):(e-=this.p_50.getNumParameters())<this.p_51.getNumParameters()?this.p_51.getParameterId(e):(e-=this.p_51.getNumParameters())<this.p_52.getNumParameters()?this.p_52.getParameterId(e):(e-=this.p_52.getNumParameters())<this.p_53.getNumParameters()?this.p_53.getParameterId(e):(e-=this.p_53.getNumParameters())<this.p_54.getNumParameters()?this.p_54.getParameterId(e):(e-=this.p_54.getNumParameters())<this.p_55.getNumParameters()?this.p_55.getParameterId(e):(e-=this.p_55.getNumParameters())<this.p_56.getNumParameters()?this.p_56.getParameterId(e):(e-=this.p_56.getNumParameters())<this.p_57.getNumParameters()?this.p_57.getParameterId(e):(e-=this.p_57.getNumParameters())<this.p_58.getNumParameters()?this.p_58.getParameterId(e):\"bogus\"}getParameterInfo(e,t){(e-=0)<this.p_45.getNumParameters()&&this.p_45.getParameterInfo(e,t),(e-=this.p_45.getNumParameters())<this.p_46.getNumParameters()&&this.p_46.getParameterInfo(e,t),(e-=this.p_46.getNumParameters())<this.p_47.getNumParameters()&&this.p_47.getParameterInfo(e,t),(e-=this.p_47.getNumParameters())<this.p_48.getNumParameters()&&this.p_48.getParameterInfo(e,t),(e-=this.p_48.getNumParameters())<this.p_49.getNumParameters()&&this.p_49.getParameterInfo(e,t),(e-=this.p_49.getNumParameters())<this.p_50.getNumParameters()&&this.p_50.getParameterInfo(e,t),(e-=this.p_50.getNumParameters())<this.p_51.getNumParameters()&&this.p_51.getParameterInfo(e,t),(e-=this.p_51.getNumParameters())<this.p_52.getNumParameters()&&this.p_52.getParameterInfo(e,t),(e-=this.p_52.getNumParameters())<this.p_53.getNumParameters()&&this.p_53.getParameterInfo(e,t),(e-=this.p_53.getNumParameters())<this.p_54.getNumParameters()&&this.p_54.getParameterInfo(e,t),(e-=this.p_54.getNumParameters())<this.p_55.getNumParameters()&&this.p_55.getParameterInfo(e,t),(e-=this.p_55.getNumParameters())<this.p_56.getNumParameters()&&this.p_56.getParameterInfo(e,t),(e-=this.p_56.getNumParameters())<this.p_57.getNumParameters()&&this.p_57.getParameterInfo(e,t),(e-=this.p_57.getNumParameters())<this.p_58.getNumParameters()&&this.p_58.getParameterInfo(e,t)}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}getParameterOffset(e){return e==this.p_45?0:e==this.p_46?0+this.p_45.getNumParameters():e==this.p_47?0+this.p_45.getNumParameters()+this.p_46.getNumParameters():e==this.p_48?0+this.p_45.getNumParameters()+this.p_46.getNumParameters()+this.p_47.getNumParameters():e==this.p_49?0+this.p_45.getNumParameters()+this.p_46.getNumParameters()+this.p_47.getNumParameters()+this.p_48.getNumParameters():e==this.p_50?0+this.p_45.getNumParameters()+this.p_46.getNumParameters()+this.p_47.getNumParameters()+this.p_48.getNumParameters()+this.p_49.getNumParameters():e==this.p_51?0+this.p_45.getNumParameters()+this.p_46.getNumParameters()+this.p_47.getNumParameters()+this.p_48.getNumParameters()+this.p_49.getNumParameters()+this.p_50.getNumParameters():e==this.p_52?0+this.p_45.getNumParameters()+this.p_46.getNumParameters()+this.p_47.getNumParameters()+this.p_48.getNumParameters()+this.p_49.getNumParameters()+this.p_50.getNumParameters()+this.p_51.getNumParameters():e==this.p_53?0+this.p_45.getNumParameters()+this.p_46.getNumParameters()+this.p_47.getNumParameters()+this.p_48.getNumParameters()+this.p_49.getNumParameters()+this.p_50.getNumParameters()+this.p_51.getNumParameters()+this.p_52.getNumParameters():e==this.p_54?0+this.p_45.getNumParameters()+this.p_46.getNumParameters()+this.p_47.getNumParameters()+this.p_48.getNumParameters()+this.p_49.getNumParameters()+this.p_50.getNumParameters()+this.p_51.getNumParameters()+this.p_52.getNumParameters()+this.p_53.getNumParameters():e==this.p_55?0+this.p_45.getNumParameters()+this.p_46.getNumParameters()+this.p_47.getNumParameters()+this.p_48.getNumParameters()+this.p_49.getNumParameters()+this.p_50.getNumParameters()+this.p_51.getNumParameters()+this.p_52.getNumParameters()+this.p_53.getNumParameters()+this.p_54.getNumParameters():e==this.p_56?0+this.p_45.getNumParameters()+this.p_46.getNumParameters()+this.p_47.getNumParameters()+this.p_48.getNumParameters()+this.p_49.getNumParameters()+this.p_50.getNumParameters()+this.p_51.getNumParameters()+this.p_52.getNumParameters()+this.p_53.getNumParameters()+this.p_54.getNumParameters()+this.p_55.getNumParameters():e==this.p_57?0+this.p_45.getNumParameters()+this.p_46.getNumParameters()+this.p_47.getNumParameters()+this.p_48.getNumParameters()+this.p_49.getNumParameters()+this.p_50.getNumParameters()+this.p_51.getNumParameters()+this.p_52.getNumParameters()+this.p_53.getNumParameters()+this.p_54.getNumParameters()+this.p_55.getNumParameters()+this.p_56.getNumParameters():e==this.p_58?0+this.p_45.getNumParameters()+this.p_46.getNumParameters()+this.p_47.getNumParameters()+this.p_48.getNumParameters()+this.p_49.getNumParameters()+this.p_50.getNumParameters()+this.p_51.getNumParameters()+this.p_52.getNumParameters()+this.p_53.getNumParameters()+this.p_54.getNumParameters()+this.p_55.getNumParameters()+this.p_56.getNumParameters()+this.p_57.getNumParameters():0}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return(e-=0)<this.p_45.getNumParameters()?this.p_45.convertToNormalizedParameterValue(e,t):(e-=this.p_45.getNumParameters())<this.p_46.getNumParameters()?this.p_46.convertToNormalizedParameterValue(e,t):(e-=this.p_46.getNumParameters())<this.p_47.getNumParameters()?this.p_47.convertToNormalizedParameterValue(e,t):(e-=this.p_47.getNumParameters())<this.p_48.getNumParameters()?this.p_48.convertToNormalizedParameterValue(e,t):(e-=this.p_48.getNumParameters())<this.p_49.getNumParameters()?this.p_49.convertToNormalizedParameterValue(e,t):(e-=this.p_49.getNumParameters())<this.p_50.getNumParameters()?this.p_50.convertToNormalizedParameterValue(e,t):(e-=this.p_50.getNumParameters())<this.p_51.getNumParameters()?this.p_51.convertToNormalizedParameterValue(e,t):(e-=this.p_51.getNumParameters())<this.p_52.getNumParameters()?this.p_52.convertToNormalizedParameterValue(e,t):(e-=this.p_52.getNumParameters())<this.p_53.getNumParameters()?this.p_53.convertToNormalizedParameterValue(e,t):(e-=this.p_53.getNumParameters())<this.p_54.getNumParameters()?this.p_54.convertToNormalizedParameterValue(e,t):(e-=this.p_54.getNumParameters())<this.p_55.getNumParameters()?this.p_55.convertToNormalizedParameterValue(e,t):(e-=this.p_55.getNumParameters())<this.p_56.getNumParameters()?this.p_56.convertToNormalizedParameterValue(e,t):(e-=this.p_56.getNumParameters())<this.p_57.getNumParameters()?this.p_57.convertToNormalizedParameterValue(e,t):(e-=this.p_57.getNumParameters())<this.p_58.getNumParameters()?this.p_58.convertToNormalizedParameterValue(e,t):t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t,(e-=0)<this.p_45.getNumParameters()?this.p_45.convertFromNormalizedParameterValue(e,t):(e-=this.p_45.getNumParameters())<this.p_46.getNumParameters()?this.p_46.convertFromNormalizedParameterValue(e,t):(e-=this.p_46.getNumParameters())<this.p_47.getNumParameters()?this.p_47.convertFromNormalizedParameterValue(e,t):(e-=this.p_47.getNumParameters())<this.p_48.getNumParameters()?this.p_48.convertFromNormalizedParameterValue(e,t):(e-=this.p_48.getNumParameters())<this.p_49.getNumParameters()?this.p_49.convertFromNormalizedParameterValue(e,t):(e-=this.p_49.getNumParameters())<this.p_50.getNumParameters()?this.p_50.convertFromNormalizedParameterValue(e,t):(e-=this.p_50.getNumParameters())<this.p_51.getNumParameters()?this.p_51.convertFromNormalizedParameterValue(e,t):(e-=this.p_51.getNumParameters())<this.p_52.getNumParameters()?this.p_52.convertFromNormalizedParameterValue(e,t):(e-=this.p_52.getNumParameters())<this.p_53.getNumParameters()?this.p_53.convertFromNormalizedParameterValue(e,t):(e-=this.p_53.getNumParameters())<this.p_54.getNumParameters()?this.p_54.convertFromNormalizedParameterValue(e,t):(e-=this.p_54.getNumParameters())<this.p_55.getNumParameters()?this.p_55.convertFromNormalizedParameterValue(e,t):(e-=this.p_55.getNumParameters())<this.p_56.getNumParameters()?this.p_56.convertFromNormalizedParameterValue(e,t):(e-=this.p_56.getNumParameters())<this.p_57.getNumParameters()?this.p_57.convertFromNormalizedParameterValue(e,t):(e-=this.p_57.getNumParameters())<this.p_58.getNumParameters()?this.p_58.convertFromNormalizedParameterValue(e,t):t}constrainParameterValue(e,t){return(e-=0)<this.p_45.getNumParameters()?this.p_45.constrainParameterValue(e,t):(e-=this.p_45.getNumParameters())<this.p_46.getNumParameters()?this.p_46.constrainParameterValue(e,t):(e-=this.p_46.getNumParameters())<this.p_47.getNumParameters()?this.p_47.constrainParameterValue(e,t):(e-=this.p_47.getNumParameters())<this.p_48.getNumParameters()?this.p_48.constrainParameterValue(e,t):(e-=this.p_48.getNumParameters())<this.p_49.getNumParameters()?this.p_49.constrainParameterValue(e,t):(e-=this.p_49.getNumParameters())<this.p_50.getNumParameters()?this.p_50.constrainParameterValue(e,t):(e-=this.p_50.getNumParameters())<this.p_51.getNumParameters()?this.p_51.constrainParameterValue(e,t):(e-=this.p_51.getNumParameters())<this.p_52.getNumParameters()?this.p_52.constrainParameterValue(e,t):(e-=this.p_52.getNumParameters())<this.p_53.getNumParameters()?this.p_53.constrainParameterValue(e,t):(e-=this.p_53.getNumParameters())<this.p_54.getNumParameters()?this.p_54.constrainParameterValue(e,t):(e-=this.p_54.getNumParameters())<this.p_55.getNumParameters()?this.p_55.constrainParameterValue(e,t):(e-=this.p_55.getNumParameters())<this.p_56.getNumParameters()?this.p_56.constrainParameterValue(e,t):(e-=this.p_56.getNumParameters())<this.p_57.getNumParameters()?this.p_57.constrainParameterValue(e,t):(e-=this.p_57.getNumParameters())<this.p_58.getNumParameters()?this.p_58.constrainParameterValue(e,t):t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"fm2_freq\"):this.inport_32_value_number_set(s);break;case TAG(\"fm2_c1ratio\"):this.inport_33_value_number_set(s);break;case TAG(\"fm2_c2ratio\"):this.inport_34_value_number_set(s);break;case TAG(\"fm2_c3ratio\"):this.inport_35_value_number_set(s);break;case TAG(\"fm2_3to1\"):this.inport_36_value_number_set(s);break;case TAG(\"fm2_2to1\"):this.inport_37_value_number_set(s);break;case TAG(\"fm2_3to2\"):this.inport_38_value_number_set(s);break;case TAG(\"fm2_c1release\"):this.inport_39_value_number_set(s);break;case TAG(\"fm2_c2release\"):this.inport_40_value_number_set(s);break;case TAG(\"fm2_c3release\"):this.inport_41_value_number_set(s);break;case TAG(\"fm2_op1gain\"):this.inport_42_value_number_set(s);break;case TAG(\"fm2_op2gain\"):this.inport_43_value_number_set(s);break;case TAG(\"fm2_op3gain\"):this.inport_44_value_number_set(s);break;case TAG(\"fm2_gain\"):this.inport_45_value_number_set(s)}this.p_45.processNumMessage(e,t,r,s),this.p_46.processNumMessage(e,t,r,s),this.p_47.processNumMessage(e,t,r,s),this.p_48.processNumMessage(e,t,r,s),this.p_49.processNumMessage(e,t,r,s),this.p_50.processNumMessage(e,t,r,s),this.p_51.processNumMessage(e,t,r,s),this.p_52.processNumMessage(e,t,r,s),this.p_53.processNumMessage(e,t,r,s),this.p_54.processNumMessage(e,t,r,s),this.p_55.processNumMessage(e,t,r,s),this.p_56.processNumMessage(e,t,r,s),this.p_57.processNumMessage(e,t,r,s),this.p_58.processNumMessage(e,t,r,s)}processListMessage(e,t,r,s){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"fm2_freq\"):this.inport_32_value_list_set(s);break;case TAG(\"fm2_c1ratio\"):this.inport_33_value_list_set(s);break;case TAG(\"fm2_c2ratio\"):this.inport_34_value_list_set(s);break;case TAG(\"fm2_c3ratio\"):this.inport_35_value_list_set(s);break;case TAG(\"fm2_3to1\"):this.inport_36_value_list_set(s);break;case TAG(\"fm2_2to1\"):this.inport_37_value_list_set(s);break;case TAG(\"fm2_3to2\"):this.inport_38_value_list_set(s);break;case TAG(\"fm2_c1release\"):this.inport_39_value_list_set(s);break;case TAG(\"fm2_c2release\"):this.inport_40_value_list_set(s);break;case TAG(\"fm2_c3release\"):this.inport_41_value_list_set(s);break;case TAG(\"fm2_op1gain\"):this.inport_42_value_list_set(s);break;case TAG(\"fm2_op2gain\"):this.inport_43_value_list_set(s);break;case TAG(\"fm2_op3gain\"):this.inport_44_value_list_set(s);break;case TAG(\"fm2_gain\"):this.inport_45_value_list_set(s)}this.p_45.processListMessage(e,t,r,s),this.p_46.processListMessage(e,t,r,s),this.p_47.processListMessage(e,t,r,s),this.p_48.processListMessage(e,t,r,s),this.p_49.processListMessage(e,t,r,s),this.p_50.processListMessage(e,t,r,s),this.p_51.processListMessage(e,t,r,s),this.p_52.processListMessage(e,t,r,s),this.p_53.processListMessage(e,t,r,s),this.p_54.processListMessage(e,t,r,s),this.p_55.processListMessage(e,t,r,s),this.p_56.processListMessage(e,t,r,s),this.p_57.processListMessage(e,t,r,s),this.p_58.processListMessage(e,t,r,s)}processBangMessage(e,t,r){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"fm2_freq\"):this.inport_32_value_bang_bang();break;case TAG(\"fm2_c1ratio\"):this.inport_33_value_bang_bang();break;case TAG(\"fm2_c2ratio\"):this.inport_34_value_bang_bang();break;case TAG(\"fm2_c3ratio\"):this.inport_35_value_bang_bang();break;case TAG(\"fm2_3to1\"):this.inport_36_value_bang_bang();break;case TAG(\"fm2_2to1\"):this.inport_37_value_bang_bang();break;case TAG(\"fm2_3to2\"):this.inport_38_value_bang_bang();break;case TAG(\"fm2_c1release\"):this.inport_39_value_bang_bang();break;case TAG(\"fm2_c2release\"):this.inport_40_value_bang_bang();break;case TAG(\"fm2_c3release\"):this.inport_41_value_bang_bang();break;case TAG(\"fm2_op1gain\"):this.inport_42_value_bang_bang();break;case TAG(\"fm2_op2gain\"):this.inport_43_value_bang_bang();break;case TAG(\"fm2_op3gain\"):this.inport_44_value_bang_bang();break;case TAG(\"fm2_gain\"):this.inport_45_value_bang_bang()}this.p_45.processBangMessage(e,t,r),this.p_46.processBangMessage(e,t,r),this.p_47.processBangMessage(e,t,r),this.p_48.processBangMessage(e,t,r),this.p_49.processBangMessage(e,t,r),this.p_50.processBangMessage(e,t,r),this.p_51.processBangMessage(e,t,r),this.p_52.processBangMessage(e,t,r),this.p_53.processBangMessage(e,t,r),this.p_54.processBangMessage(e,t,r),this.p_55.processBangMessage(e,t,r),this.p_56.processBangMessage(e,t,r),this.p_57.processBangMessage(e,t,r),this.p_58.processBangMessage(e,t,r)}resolveTag(e){switch(e){case TAG(\"fm2_freq\"):return\"fm2_freq\";case TAG(\"\"):return\"\";case TAG(\"fm2_c1ratio\"):return\"fm2_c1ratio\";case TAG(\"fm2_c2ratio\"):return\"fm2_c2ratio\";case TAG(\"fm2_c3ratio\"):return\"fm2_c3ratio\";case TAG(\"fm2_3to1\"):return\"fm2_3to1\";case TAG(\"fm2_2to1\"):return\"fm2_2to1\";case TAG(\"fm2_3to2\"):return\"fm2_3to2\";case TAG(\"fm2_c1release\"):return\"fm2_c1release\";case TAG(\"fm2_c2release\"):return\"fm2_c2release\";case TAG(\"fm2_c3release\"):return\"fm2_c3release\";case TAG(\"fm2_op1gain\"):return\"fm2_op1gain\";case TAG(\"fm2_op2gain\"):return\"fm2_op2gain\";case TAG(\"fm2_op3gain\"):return\"fm2_op3gain\";case TAG(\"fm2_gain\"):return\"fm2_gain\"}var t=this.p_45.resolveTag(e);if(t)return t;var r=this.p_46.resolveTag(e);if(r)return r;var s=this.p_47.resolveTag(e);if(s)return s;var a=this.p_48.resolveTag(e);if(a)return a;var i=this.p_49.resolveTag(e);if(i)return i;var n=this.p_50.resolveTag(e);if(n)return n;var m=this.p_51.resolveTag(e);if(m)return m;var u=this.p_52.resolveTag(e);if(u)return u;var h=this.p_53.resolveTag(e);if(h)return h;var p=this.p_54.resolveTag(e);if(p)return p;var _=this.p_55.resolveTag(e);if(_)return _;var g=this.p_56.resolveTag(e);if(g)return g;var o=this.p_57.resolveTag(e);if(o)return o;var P=this.p_58.resolveTag(e);return P||null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){this.p_45.processDataViewUpdate(e,t),this.p_46.processDataViewUpdate(e,t),this.p_47.processDataViewUpdate(e,t),this.p_48.processDataViewUpdate(e,t),this.p_49.processDataViewUpdate(e,t),this.p_50.processDataViewUpdate(e,t),this.p_51.processDataViewUpdate(e,t),this.p_52.processDataViewUpdate(e,t),this.p_53.processDataViewUpdate(e,t),this.p_54.processDataViewUpdate(e,t),this.p_55.processDataViewUpdate(e,t),this.p_56.processDataViewUpdate(e,t),this.p_57.processDataViewUpdate(e,t),this.p_58.processDataViewUpdate(e,t)}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_597{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.random_57_nz_last=0,this.random_58_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_598{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.random_59_nz_last=0,this.random_60_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_599{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.random_61_nz_last=0,this.random_62_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_600{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.random_63_nz_last=0,this.random_64_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_601{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.random_65_nz_last=0,this.random_66_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_602{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.random_67_nz_last=0,this.random_68_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_603{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.random_69_nz_last=0,this.random_70_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_594{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_604{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0,this.p_59=new Array}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){this.p_59=new RNBOSubpatcher_594,this.p_59.setEngineAndPatcher(this.getEngine(),this),this.p_59.initialize(),this.p_59.setParameterOffset(this.getParameterOffset(this.p_59))}processTempoEvent(e,t){this.updateTime(e),this.p_59.processTempoEvent(e,t)}processTransportEvent(e,t){this.updateTime(e),this.p_59.processTransportEvent(e,t)}processBeatTimeEvent(e,t){this.updateTime(e),this.p_59.processBeatTimeEvent(e,t)}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){this.updateTime(e),this.p_59.processTimeSignatureEvent(e,t,r)}setParameterValue(e,t,r){RNBO_UNUSED(t),this.updateTime(r),(e-=0)<this.p_59.getNumParameters()&&this.p_59.setParameterValue(e,t,r)}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return(e-=0)<this.p_59.getNumParameters()?this.p_59.getParameterValue(e):0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0+this.p_59.getNumParameters()}getParameterName(e){return(e-=0)<this.p_59.getNumParameters()?this.p_59.getParameterName(e):\"bogus\"}getParameterId(e){return(e-=0)<this.p_59.getNumParameters()?this.p_59.getParameterId(e):\"bogus\"}getParameterInfo(e,t){(e-=0)<this.p_59.getNumParameters()&&this.p_59.getParameterInfo(e,t)}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}getParameterOffset(e){return this.p_59,0}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return(e-=0)<this.p_59.getNumParameters()?this.p_59.convertToNormalizedParameterValue(e,t):t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t,(e-=0)<this.p_59.getNumParameters()?this.p_59.convertFromNormalizedParameterValue(e,t):t}constrainParameterValue(e,t){return(e-=0)<this.p_59.getNumParameters()?this.p_59.constrainParameterValue(e,t):t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){RNBO_UNUSED(t),this.updateTime(r),this.p_59.processNumMessage(e,t,r,s)}processListMessage(e,t,r,s){RNBO_UNUSED(t),this.updateTime(r),this.p_59.processListMessage(e,t,r,s)}processBangMessage(e,t,r){RNBO_UNUSED(t),this.updateTime(r),this.p_59.processBangMessage(e,t,r)}resolveTag(e){var t=this.p_59.resolveTag(e);return t||null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){this.p_59.processDataViewUpdate(e,t)}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_605{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.random_71_nz_last=0,this.random_72_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_595{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_606{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0,this.p_60=new Array}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){this.p_60=new RNBOSubpatcher_595,this.p_60.setEngineAndPatcher(this.getEngine(),this),this.p_60.initialize(),this.p_60.setParameterOffset(this.getParameterOffset(this.p_60))}processTempoEvent(e,t){this.updateTime(e),this.p_60.processTempoEvent(e,t)}processTransportEvent(e,t){this.updateTime(e),this.p_60.processTransportEvent(e,t)}processBeatTimeEvent(e,t){this.updateTime(e),this.p_60.processBeatTimeEvent(e,t)}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){this.updateTime(e),this.p_60.processTimeSignatureEvent(e,t,r)}setParameterValue(e,t,r){RNBO_UNUSED(t),this.updateTime(r),(e-=0)<this.p_60.getNumParameters()&&this.p_60.setParameterValue(e,t,r)}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return(e-=0)<this.p_60.getNumParameters()?this.p_60.getParameterValue(e):0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0+this.p_60.getNumParameters()}getParameterName(e){return(e-=0)<this.p_60.getNumParameters()?this.p_60.getParameterName(e):\"bogus\"}getParameterId(e){return(e-=0)<this.p_60.getNumParameters()?this.p_60.getParameterId(e):\"bogus\"}getParameterInfo(e,t){(e-=0)<this.p_60.getNumParameters()&&this.p_60.getParameterInfo(e,t)}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}getParameterOffset(e){return this.p_60,0}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return(e-=0)<this.p_60.getNumParameters()?this.p_60.convertToNormalizedParameterValue(e,t):t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t,(e-=0)<this.p_60.getNumParameters()?this.p_60.convertFromNormalizedParameterValue(e,t):t}constrainParameterValue(e,t){return(e-=0)<this.p_60.getNumParameters()?this.p_60.constrainParameterValue(e,t):t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){RNBO_UNUSED(t),this.updateTime(r),this.p_60.processNumMessage(e,t,r,s)}processListMessage(e,t,r,s){RNBO_UNUSED(t),this.updateTime(r),this.p_60.processListMessage(e,t,r,s)}processBangMessage(e,t,r){RNBO_UNUSED(t),this.updateTime(r),this.p_60.processBangMessage(e,t,r)}resolveTag(e){var t=this.p_60.resolveTag(e);return t||null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){this.p_60.processDataViewUpdate(e,t)}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_607{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.random_73_nz_last=0,this.random_74_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_608{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.random_75_nz_last=0,this.random_76_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_596{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_609{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0,this.p_61=new Array}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){this.p_61=new RNBOSubpatcher_596,this.p_61.setEngineAndPatcher(this.getEngine(),this),this.p_61.initialize(),this.p_61.setParameterOffset(this.getParameterOffset(this.p_61))}processTempoEvent(e,t){this.updateTime(e),this.p_61.processTempoEvent(e,t)}processTransportEvent(e,t){this.updateTime(e),this.p_61.processTransportEvent(e,t)}processBeatTimeEvent(e,t){this.updateTime(e),this.p_61.processBeatTimeEvent(e,t)}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){this.updateTime(e),this.p_61.processTimeSignatureEvent(e,t,r)}setParameterValue(e,t,r){RNBO_UNUSED(t),this.updateTime(r),(e-=0)<this.p_61.getNumParameters()&&this.p_61.setParameterValue(e,t,r)}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return(e-=0)<this.p_61.getNumParameters()?this.p_61.getParameterValue(e):0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0+this.p_61.getNumParameters()}getParameterName(e){return(e-=0)<this.p_61.getNumParameters()?this.p_61.getParameterName(e):\"bogus\"}getParameterId(e){return(e-=0)<this.p_61.getNumParameters()?this.p_61.getParameterId(e):\"bogus\"}getParameterInfo(e,t){(e-=0)<this.p_61.getNumParameters()&&this.p_61.getParameterInfo(e,t)}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}getParameterOffset(e){return this.p_61,0}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return(e-=0)<this.p_61.getNumParameters()?this.p_61.convertToNormalizedParameterValue(e,t):t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t,(e-=0)<this.p_61.getNumParameters()?this.p_61.convertFromNormalizedParameterValue(e,t):t}constrainParameterValue(e,t){return(e-=0)<this.p_61.getNumParameters()?this.p_61.constrainParameterValue(e,t):t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){RNBO_UNUSED(t),this.updateTime(r),this.p_61.processNumMessage(e,t,r,s)}processListMessage(e,t,r,s){RNBO_UNUSED(t),this.updateTime(r),this.p_61.processListMessage(e,t,r,s)}processBangMessage(e,t,r){RNBO_UNUSED(t),this.updateTime(r),this.p_61.processBangMessage(e,t,r)}resolveTag(e){var t=this.p_61.resolveTag(e);return t||null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){this.p_61.processDataViewUpdate(e,t)}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_610{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.random_77_nz_last=0,this.random_78_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_611{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.random_79_nz_last=0,this.random_80_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_612{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.random_81_nz_last=0,this.random_82_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_613{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.random_83_nz_last=0,this.random_84_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_628{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.mtof_05_innerMtoF_buffer=0,this.mtof_05_innerScala_internal=!0,this.mtof_05_innerScala_KBM_MAP_OFFSET=7,this.mtof_05_innerScala_lastValid=!1,this.mtof_05_innerScala_kbmMapSize=0,this.mtof_06_innerMtoF_buffer=0,this.mtof_06_innerScala_internal=!0,this.mtof_06_innerScala_KBM_MAP_OFFSET=7,this.mtof_06_innerScala_lastValid=!1,this.mtof_06_innerScala_kbmMapSize=0,this.mtof_07_innerMtoF_buffer=0,this.mtof_07_innerScala_internal=!0,this.mtof_07_innerScala_KBM_MAP_OFFSET=7,this.mtof_07_innerScala_lastValid=!1,this.mtof_07_innerScala_kbmMapSize=0,this.mtof_08_innerMtoF_buffer=0,this.mtof_08_innerScala_internal=!0,this.mtof_08_innerScala_KBM_MAP_OFFSET=7,this.mtof_08_innerScala_lastValid=!1,this.mtof_08_innerScala_kbmMapSize=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0,this.p_62=new Array,this.p_63=new Array,this.p_64=new Array,this.p_65=new Array,this.p_66=new Array,this.p_67=new Array,this.p_68=new Array,this.p_69=new Array,this.p_70=new Array,this.p_71=new Array,this.p_72=new Array,this.p_73=new Array,this.p_74=new Array,this.p_75=new Array,this.p_76=new Array,this.p_77=new Array,this.p_78=new Array}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){this.p_62=new RNBOSubpatcher_597,this.p_62.setEngineAndPatcher(this.getEngine(),this),this.p_62.initialize(),this.p_62.setParameterOffset(this.getParameterOffset(this.p_62)),this.p_63=new RNBOSubpatcher_598,this.p_63.setEngineAndPatcher(this.getEngine(),this),this.p_63.initialize(),this.p_63.setParameterOffset(this.getParameterOffset(this.p_63)),this.p_64=new RNBOSubpatcher_599,this.p_64.setEngineAndPatcher(this.getEngine(),this),this.p_64.initialize(),this.p_64.setParameterOffset(this.getParameterOffset(this.p_64)),this.p_65=new RNBOSubpatcher_600,this.p_65.setEngineAndPatcher(this.getEngine(),this),this.p_65.initialize(),this.p_65.setParameterOffset(this.getParameterOffset(this.p_65)),this.p_66=new RNBOSubpatcher_601,this.p_66.setEngineAndPatcher(this.getEngine(),this),this.p_66.initialize(),this.p_66.setParameterOffset(this.getParameterOffset(this.p_66)),this.p_67=new RNBOSubpatcher_602,this.p_67.setEngineAndPatcher(this.getEngine(),this),this.p_67.initialize(),this.p_67.setParameterOffset(this.getParameterOffset(this.p_67)),this.p_68=new RNBOSubpatcher_603,this.p_68.setEngineAndPatcher(this.getEngine(),this),this.p_68.initialize(),this.p_68.setParameterOffset(this.getParameterOffset(this.p_68)),this.p_69=new RNBOSubpatcher_604,this.p_69.setEngineAndPatcher(this.getEngine(),this),this.p_69.initialize(),this.p_69.setParameterOffset(this.getParameterOffset(this.p_69)),this.p_70=new RNBOSubpatcher_605,this.p_70.setEngineAndPatcher(this.getEngine(),this),this.p_70.initialize(),this.p_70.setParameterOffset(this.getParameterOffset(this.p_70)),this.p_71=new RNBOSubpatcher_606,this.p_71.setEngineAndPatcher(this.getEngine(),this),this.p_71.initialize(),this.p_71.setParameterOffset(this.getParameterOffset(this.p_71)),this.p_72=new RNBOSubpatcher_607,this.p_72.setEngineAndPatcher(this.getEngine(),this),this.p_72.initialize(),this.p_72.setParameterOffset(this.getParameterOffset(this.p_72)),this.p_73=new RNBOSubpatcher_608,this.p_73.setEngineAndPatcher(this.getEngine(),this),this.p_73.initialize(),this.p_73.setParameterOffset(this.getParameterOffset(this.p_73)),this.p_74=new RNBOSubpatcher_609,this.p_74.setEngineAndPatcher(this.getEngine(),this),this.p_74.initialize(),this.p_74.setParameterOffset(this.getParameterOffset(this.p_74)),this.p_75=new RNBOSubpatcher_610,this.p_75.setEngineAndPatcher(this.getEngine(),this),this.p_75.initialize(),this.p_75.setParameterOffset(this.getParameterOffset(this.p_75)),this.p_76=new RNBOSubpatcher_611,this.p_76.setEngineAndPatcher(this.getEngine(),this),this.p_76.initialize(),this.p_76.setParameterOffset(this.getParameterOffset(this.p_76)),this.p_77=new RNBOSubpatcher_612,this.p_77.setEngineAndPatcher(this.getEngine(),this),this.p_77.initialize(),this.p_77.setParameterOffset(this.getParameterOffset(this.p_77)),this.p_78=new RNBOSubpatcher_613,this.p_78.setEngineAndPatcher(this.getEngine(),this),this.p_78.initialize(),this.p_78.setParameterOffset(this.getParameterOffset(this.p_78))}processTempoEvent(e,t){this.updateTime(e),this.p_62.processTempoEvent(e,t),this.p_63.processTempoEvent(e,t),this.p_64.processTempoEvent(e,t),this.p_65.processTempoEvent(e,t),this.p_66.processTempoEvent(e,t),this.p_67.processTempoEvent(e,t),this.p_68.processTempoEvent(e,t),this.p_69.processTempoEvent(e,t),this.p_70.processTempoEvent(e,t),this.p_71.processTempoEvent(e,t),this.p_72.processTempoEvent(e,t),this.p_73.processTempoEvent(e,t),this.p_74.processTempoEvent(e,t),this.p_75.processTempoEvent(e,t),this.p_76.processTempoEvent(e,t),this.p_77.processTempoEvent(e,t),this.p_78.processTempoEvent(e,t)}processTransportEvent(e,t){this.updateTime(e),this.p_62.processTransportEvent(e,t),this.p_63.processTransportEvent(e,t),this.p_64.processTransportEvent(e,t),this.p_65.processTransportEvent(e,t),this.p_66.processTransportEvent(e,t),this.p_67.processTransportEvent(e,t),this.p_68.processTransportEvent(e,t),this.p_69.processTransportEvent(e,t),this.p_70.processTransportEvent(e,t),this.p_71.processTransportEvent(e,t),this.p_72.processTransportEvent(e,t),this.p_73.processTransportEvent(e,t),this.p_74.processTransportEvent(e,t),this.p_75.processTransportEvent(e,t),this.p_76.processTransportEvent(e,t),this.p_77.processTransportEvent(e,t),this.p_78.processTransportEvent(e,t)}processBeatTimeEvent(e,t){this.updateTime(e),this.p_62.processBeatTimeEvent(e,t),this.p_63.processBeatTimeEvent(e,t),this.p_64.processBeatTimeEvent(e,t),this.p_65.processBeatTimeEvent(e,t),this.p_66.processBeatTimeEvent(e,t),this.p_67.processBeatTimeEvent(e,t),this.p_68.processBeatTimeEvent(e,t),this.p_69.processBeatTimeEvent(e,t),this.p_70.processBeatTimeEvent(e,t),this.p_71.processBeatTimeEvent(e,t),this.p_72.processBeatTimeEvent(e,t),this.p_73.processBeatTimeEvent(e,t),this.p_74.processBeatTimeEvent(e,t),this.p_75.processBeatTimeEvent(e,t),this.p_76.processBeatTimeEvent(e,t),this.p_77.processBeatTimeEvent(e,t),this.p_78.processBeatTimeEvent(e,t)}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){this.updateTime(e),this.p_62.processTimeSignatureEvent(e,t,r),this.p_63.processTimeSignatureEvent(e,t,r),this.p_64.processTimeSignatureEvent(e,t,r),this.p_65.processTimeSignatureEvent(e,t,r),this.p_66.processTimeSignatureEvent(e,t,r),this.p_67.processTimeSignatureEvent(e,t,r),this.p_68.processTimeSignatureEvent(e,t,r),this.p_69.processTimeSignatureEvent(e,t,r),this.p_70.processTimeSignatureEvent(e,t,r),this.p_71.processTimeSignatureEvent(e,t,r),this.p_72.processTimeSignatureEvent(e,t,r),this.p_73.processTimeSignatureEvent(e,t,r),this.p_74.processTimeSignatureEvent(e,t,r),this.p_75.processTimeSignatureEvent(e,t,r),this.p_76.processTimeSignatureEvent(e,t,r),this.p_77.processTimeSignatureEvent(e,t,r),this.p_78.processTimeSignatureEvent(e,t,r)}setParameterValue(e,t,r){RNBO_UNUSED(t),this.updateTime(r),(e-=0)<this.p_62.getNumParameters()&&this.p_62.setParameterValue(e,t,r),(e-=this.p_62.getNumParameters())<this.p_63.getNumParameters()&&this.p_63.setParameterValue(e,t,r),(e-=this.p_63.getNumParameters())<this.p_64.getNumParameters()&&this.p_64.setParameterValue(e,t,r),(e-=this.p_64.getNumParameters())<this.p_65.getNumParameters()&&this.p_65.setParameterValue(e,t,r),(e-=this.p_65.getNumParameters())<this.p_66.getNumParameters()&&this.p_66.setParameterValue(e,t,r),(e-=this.p_66.getNumParameters())<this.p_67.getNumParameters()&&this.p_67.setParameterValue(e,t,r),(e-=this.p_67.getNumParameters())<this.p_68.getNumParameters()&&this.p_68.setParameterValue(e,t,r),(e-=this.p_68.getNumParameters())<this.p_69.getNumParameters()&&this.p_69.setParameterValue(e,t,r),(e-=this.p_69.getNumParameters())<this.p_70.getNumParameters()&&this.p_70.setParameterValue(e,t,r),(e-=this.p_70.getNumParameters())<this.p_71.getNumParameters()&&this.p_71.setParameterValue(e,t,r),(e-=this.p_71.getNumParameters())<this.p_72.getNumParameters()&&this.p_72.setParameterValue(e,t,r),(e-=this.p_72.getNumParameters())<this.p_73.getNumParameters()&&this.p_73.setParameterValue(e,t,r),(e-=this.p_73.getNumParameters())<this.p_74.getNumParameters()&&this.p_74.setParameterValue(e,t,r),(e-=this.p_74.getNumParameters())<this.p_75.getNumParameters()&&this.p_75.setParameterValue(e,t,r),(e-=this.p_75.getNumParameters())<this.p_76.getNumParameters()&&this.p_76.setParameterValue(e,t,r),(e-=this.p_76.getNumParameters())<this.p_77.getNumParameters()&&this.p_77.setParameterValue(e,t,r),(e-=this.p_77.getNumParameters())<this.p_78.getNumParameters()&&this.p_78.setParameterValue(e,t,r)}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return(e-=0)<this.p_62.getNumParameters()?this.p_62.getParameterValue(e):(e-=this.p_62.getNumParameters())<this.p_63.getNumParameters()?this.p_63.getParameterValue(e):(e-=this.p_63.getNumParameters())<this.p_64.getNumParameters()?this.p_64.getParameterValue(e):(e-=this.p_64.getNumParameters())<this.p_65.getNumParameters()?this.p_65.getParameterValue(e):(e-=this.p_65.getNumParameters())<this.p_66.getNumParameters()?this.p_66.getParameterValue(e):(e-=this.p_66.getNumParameters())<this.p_67.getNumParameters()?this.p_67.getParameterValue(e):(e-=this.p_67.getNumParameters())<this.p_68.getNumParameters()?this.p_68.getParameterValue(e):(e-=this.p_68.getNumParameters())<this.p_69.getNumParameters()?this.p_69.getParameterValue(e):(e-=this.p_69.getNumParameters())<this.p_70.getNumParameters()?this.p_70.getParameterValue(e):(e-=this.p_70.getNumParameters())<this.p_71.getNumParameters()?this.p_71.getParameterValue(e):(e-=this.p_71.getNumParameters())<this.p_72.getNumParameters()?this.p_72.getParameterValue(e):(e-=this.p_72.getNumParameters())<this.p_73.getNumParameters()?this.p_73.getParameterValue(e):(e-=this.p_73.getNumParameters())<this.p_74.getNumParameters()?this.p_74.getParameterValue(e):(e-=this.p_74.getNumParameters())<this.p_75.getNumParameters()?this.p_75.getParameterValue(e):(e-=this.p_75.getNumParameters())<this.p_76.getNumParameters()?this.p_76.getParameterValue(e):(e-=this.p_76.getNumParameters())<this.p_77.getNumParameters()?this.p_77.getParameterValue(e):(e-=this.p_77.getNumParameters())<this.p_78.getNumParameters()?this.p_78.getParameterValue(e):0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0+this.p_62.getNumParameters()+this.p_63.getNumParameters()+this.p_64.getNumParameters()+this.p_65.getNumParameters()+this.p_66.getNumParameters()+this.p_67.getNumParameters()+this.p_68.getNumParameters()+this.p_69.getNumParameters()+this.p_70.getNumParameters()+this.p_71.getNumParameters()+this.p_72.getNumParameters()+this.p_73.getNumParameters()+this.p_74.getNumParameters()+this.p_75.getNumParameters()+this.p_76.getNumParameters()+this.p_77.getNumParameters()+this.p_78.getNumParameters()}getParameterName(e){return(e-=0)<this.p_62.getNumParameters()?this.p_62.getParameterName(e):(e-=this.p_62.getNumParameters())<this.p_63.getNumParameters()?this.p_63.getParameterName(e):(e-=this.p_63.getNumParameters())<this.p_64.getNumParameters()?this.p_64.getParameterName(e):(e-=this.p_64.getNumParameters())<this.p_65.getNumParameters()?this.p_65.getParameterName(e):(e-=this.p_65.getNumParameters())<this.p_66.getNumParameters()?this.p_66.getParameterName(e):(e-=this.p_66.getNumParameters())<this.p_67.getNumParameters()?this.p_67.getParameterName(e):(e-=this.p_67.getNumParameters())<this.p_68.getNumParameters()?this.p_68.getParameterName(e):(e-=this.p_68.getNumParameters())<this.p_69.getNumParameters()?this.p_69.getParameterName(e):(e-=this.p_69.getNumParameters())<this.p_70.getNumParameters()?this.p_70.getParameterName(e):(e-=this.p_70.getNumParameters())<this.p_71.getNumParameters()?this.p_71.getParameterName(e):(e-=this.p_71.getNumParameters())<this.p_72.getNumParameters()?this.p_72.getParameterName(e):(e-=this.p_72.getNumParameters())<this.p_73.getNumParameters()?this.p_73.getParameterName(e):(e-=this.p_73.getNumParameters())<this.p_74.getNumParameters()?this.p_74.getParameterName(e):(e-=this.p_74.getNumParameters())<this.p_75.getNumParameters()?this.p_75.getParameterName(e):(e-=this.p_75.getNumParameters())<this.p_76.getNumParameters()?this.p_76.getParameterName(e):(e-=this.p_76.getNumParameters())<this.p_77.getNumParameters()?this.p_77.getParameterName(e):(e-=this.p_77.getNumParameters())<this.p_78.getNumParameters()?this.p_78.getParameterName(e):\"bogus\"}getParameterId(e){return(e-=0)<this.p_62.getNumParameters()?this.p_62.getParameterId(e):(e-=this.p_62.getNumParameters())<this.p_63.getNumParameters()?this.p_63.getParameterId(e):(e-=this.p_63.getNumParameters())<this.p_64.getNumParameters()?this.p_64.getParameterId(e):(e-=this.p_64.getNumParameters())<this.p_65.getNumParameters()?this.p_65.getParameterId(e):(e-=this.p_65.getNumParameters())<this.p_66.getNumParameters()?this.p_66.getParameterId(e):(e-=this.p_66.getNumParameters())<this.p_67.getNumParameters()?this.p_67.getParameterId(e):(e-=this.p_67.getNumParameters())<this.p_68.getNumParameters()?this.p_68.getParameterId(e):(e-=this.p_68.getNumParameters())<this.p_69.getNumParameters()?this.p_69.getParameterId(e):(e-=this.p_69.getNumParameters())<this.p_70.getNumParameters()?this.p_70.getParameterId(e):(e-=this.p_70.getNumParameters())<this.p_71.getNumParameters()?this.p_71.getParameterId(e):(e-=this.p_71.getNumParameters())<this.p_72.getNumParameters()?this.p_72.getParameterId(e):(e-=this.p_72.getNumParameters())<this.p_73.getNumParameters()?this.p_73.getParameterId(e):(e-=this.p_73.getNumParameters())<this.p_74.getNumParameters()?this.p_74.getParameterId(e):(e-=this.p_74.getNumParameters())<this.p_75.getNumParameters()?this.p_75.getParameterId(e):(e-=this.p_75.getNumParameters())<this.p_76.getNumParameters()?this.p_76.getParameterId(e):(e-=this.p_76.getNumParameters())<this.p_77.getNumParameters()?this.p_77.getParameterId(e):(e-=this.p_77.getNumParameters())<this.p_78.getNumParameters()?this.p_78.getParameterId(e):\"bogus\"}getParameterInfo(e,t){(e-=0)<this.p_62.getNumParameters()&&this.p_62.getParameterInfo(e,t),(e-=this.p_62.getNumParameters())<this.p_63.getNumParameters()&&this.p_63.getParameterInfo(e,t),(e-=this.p_63.getNumParameters())<this.p_64.getNumParameters()&&this.p_64.getParameterInfo(e,t),(e-=this.p_64.getNumParameters())<this.p_65.getNumParameters()&&this.p_65.getParameterInfo(e,t),(e-=this.p_65.getNumParameters())<this.p_66.getNumParameters()&&this.p_66.getParameterInfo(e,t),(e-=this.p_66.getNumParameters())<this.p_67.getNumParameters()&&this.p_67.getParameterInfo(e,t),(e-=this.p_67.getNumParameters())<this.p_68.getNumParameters()&&this.p_68.getParameterInfo(e,t),(e-=this.p_68.getNumParameters())<this.p_69.getNumParameters()&&this.p_69.getParameterInfo(e,t),(e-=this.p_69.getNumParameters())<this.p_70.getNumParameters()&&this.p_70.getParameterInfo(e,t),(e-=this.p_70.getNumParameters())<this.p_71.getNumParameters()&&this.p_71.getParameterInfo(e,t),(e-=this.p_71.getNumParameters())<this.p_72.getNumParameters()&&this.p_72.getParameterInfo(e,t),(e-=this.p_72.getNumParameters())<this.p_73.getNumParameters()&&this.p_73.getParameterInfo(e,t),(e-=this.p_73.getNumParameters())<this.p_74.getNumParameters()&&this.p_74.getParameterInfo(e,t),(e-=this.p_74.getNumParameters())<this.p_75.getNumParameters()&&this.p_75.getParameterInfo(e,t),(e-=this.p_75.getNumParameters())<this.p_76.getNumParameters()&&this.p_76.getParameterInfo(e,t),(e-=this.p_76.getNumParameters())<this.p_77.getNumParameters()&&this.p_77.getParameterInfo(e,t),(e-=this.p_77.getNumParameters())<this.p_78.getNumParameters()&&this.p_78.getParameterInfo(e,t)}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}getParameterOffset(e){return e==this.p_62?0:e==this.p_63?0+this.p_62.getNumParameters():e==this.p_64?0+this.p_62.getNumParameters()+this.p_63.getNumParameters():e==this.p_65?0+this.p_62.getNumParameters()+this.p_63.getNumParameters()+this.p_64.getNumParameters():e==this.p_66?0+this.p_62.getNumParameters()+this.p_63.getNumParameters()+this.p_64.getNumParameters()+this.p_65.getNumParameters():e==this.p_67?0+this.p_62.getNumParameters()+this.p_63.getNumParameters()+this.p_64.getNumParameters()+this.p_65.getNumParameters()+this.p_66.getNumParameters():e==this.p_68?0+this.p_62.getNumParameters()+this.p_63.getNumParameters()+this.p_64.getNumParameters()+this.p_65.getNumParameters()+this.p_66.getNumParameters()+this.p_67.getNumParameters():e==this.p_69?0+this.p_62.getNumParameters()+this.p_63.getNumParameters()+this.p_64.getNumParameters()+this.p_65.getNumParameters()+this.p_66.getNumParameters()+this.p_67.getNumParameters()+this.p_68.getNumParameters():e==this.p_70?0+this.p_62.getNumParameters()+this.p_63.getNumParameters()+this.p_64.getNumParameters()+this.p_65.getNumParameters()+this.p_66.getNumParameters()+this.p_67.getNumParameters()+this.p_68.getNumParameters()+this.p_69.getNumParameters():e==this.p_71?0+this.p_62.getNumParameters()+this.p_63.getNumParameters()+this.p_64.getNumParameters()+this.p_65.getNumParameters()+this.p_66.getNumParameters()+this.p_67.getNumParameters()+this.p_68.getNumParameters()+this.p_69.getNumParameters()+this.p_70.getNumParameters():e==this.p_72?0+this.p_62.getNumParameters()+this.p_63.getNumParameters()+this.p_64.getNumParameters()+this.p_65.getNumParameters()+this.p_66.getNumParameters()+this.p_67.getNumParameters()+this.p_68.getNumParameters()+this.p_69.getNumParameters()+this.p_70.getNumParameters()+this.p_71.getNumParameters():e==this.p_73?0+this.p_62.getNumParameters()+this.p_63.getNumParameters()+this.p_64.getNumParameters()+this.p_65.getNumParameters()+this.p_66.getNumParameters()+this.p_67.getNumParameters()+this.p_68.getNumParameters()+this.p_69.getNumParameters()+this.p_70.getNumParameters()+this.p_71.getNumParameters()+this.p_72.getNumParameters():e==this.p_74?0+this.p_62.getNumParameters()+this.p_63.getNumParameters()+this.p_64.getNumParameters()+this.p_65.getNumParameters()+this.p_66.getNumParameters()+this.p_67.getNumParameters()+this.p_68.getNumParameters()+this.p_69.getNumParameters()+this.p_70.getNumParameters()+this.p_71.getNumParameters()+this.p_72.getNumParameters()+this.p_73.getNumParameters():e==this.p_75?0+this.p_62.getNumParameters()+this.p_63.getNumParameters()+this.p_64.getNumParameters()+this.p_65.getNumParameters()+this.p_66.getNumParameters()+this.p_67.getNumParameters()+this.p_68.getNumParameters()+this.p_69.getNumParameters()+this.p_70.getNumParameters()+this.p_71.getNumParameters()+this.p_72.getNumParameters()+this.p_73.getNumParameters()+this.p_74.getNumParameters():e==this.p_76?0+this.p_62.getNumParameters()+this.p_63.getNumParameters()+this.p_64.getNumParameters()+this.p_65.getNumParameters()+this.p_66.getNumParameters()+this.p_67.getNumParameters()+this.p_68.getNumParameters()+this.p_69.getNumParameters()+this.p_70.getNumParameters()+this.p_71.getNumParameters()+this.p_72.getNumParameters()+this.p_73.getNumParameters()+this.p_74.getNumParameters()+this.p_75.getNumParameters():e==this.p_77?0+this.p_62.getNumParameters()+this.p_63.getNumParameters()+this.p_64.getNumParameters()+this.p_65.getNumParameters()+this.p_66.getNumParameters()+this.p_67.getNumParameters()+this.p_68.getNumParameters()+this.p_69.getNumParameters()+this.p_70.getNumParameters()+this.p_71.getNumParameters()+this.p_72.getNumParameters()+this.p_73.getNumParameters()+this.p_74.getNumParameters()+this.p_75.getNumParameters()+this.p_76.getNumParameters():e==this.p_78?0+this.p_62.getNumParameters()+this.p_63.getNumParameters()+this.p_64.getNumParameters()+this.p_65.getNumParameters()+this.p_66.getNumParameters()+this.p_67.getNumParameters()+this.p_68.getNumParameters()+this.p_69.getNumParameters()+this.p_70.getNumParameters()+this.p_71.getNumParameters()+this.p_72.getNumParameters()+this.p_73.getNumParameters()+this.p_74.getNumParameters()+this.p_75.getNumParameters()+this.p_76.getNumParameters()+this.p_77.getNumParameters():0}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return(e-=0)<this.p_62.getNumParameters()?this.p_62.convertToNormalizedParameterValue(e,t):(e-=this.p_62.getNumParameters())<this.p_63.getNumParameters()?this.p_63.convertToNormalizedParameterValue(e,t):(e-=this.p_63.getNumParameters())<this.p_64.getNumParameters()?this.p_64.convertToNormalizedParameterValue(e,t):(e-=this.p_64.getNumParameters())<this.p_65.getNumParameters()?this.p_65.convertToNormalizedParameterValue(e,t):(e-=this.p_65.getNumParameters())<this.p_66.getNumParameters()?this.p_66.convertToNormalizedParameterValue(e,t):(e-=this.p_66.getNumParameters())<this.p_67.getNumParameters()?this.p_67.convertToNormalizedParameterValue(e,t):(e-=this.p_67.getNumParameters())<this.p_68.getNumParameters()?this.p_68.convertToNormalizedParameterValue(e,t):(e-=this.p_68.getNumParameters())<this.p_69.getNumParameters()?this.p_69.convertToNormalizedParameterValue(e,t):(e-=this.p_69.getNumParameters())<this.p_70.getNumParameters()?this.p_70.convertToNormalizedParameterValue(e,t):(e-=this.p_70.getNumParameters())<this.p_71.getNumParameters()?this.p_71.convertToNormalizedParameterValue(e,t):(e-=this.p_71.getNumParameters())<this.p_72.getNumParameters()?this.p_72.convertToNormalizedParameterValue(e,t):(e-=this.p_72.getNumParameters())<this.p_73.getNumParameters()?this.p_73.convertToNormalizedParameterValue(e,t):(e-=this.p_73.getNumParameters())<this.p_74.getNumParameters()?this.p_74.convertToNormalizedParameterValue(e,t):(e-=this.p_74.getNumParameters())<this.p_75.getNumParameters()?this.p_75.convertToNormalizedParameterValue(e,t):(e-=this.p_75.getNumParameters())<this.p_76.getNumParameters()?this.p_76.convertToNormalizedParameterValue(e,t):(e-=this.p_76.getNumParameters())<this.p_77.getNumParameters()?this.p_77.convertToNormalizedParameterValue(e,t):(e-=this.p_77.getNumParameters())<this.p_78.getNumParameters()?this.p_78.convertToNormalizedParameterValue(e,t):t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t,(e-=0)<this.p_62.getNumParameters()?this.p_62.convertFromNormalizedParameterValue(e,t):(e-=this.p_62.getNumParameters())<this.p_63.getNumParameters()?this.p_63.convertFromNormalizedParameterValue(e,t):(e-=this.p_63.getNumParameters())<this.p_64.getNumParameters()?this.p_64.convertFromNormalizedParameterValue(e,t):(e-=this.p_64.getNumParameters())<this.p_65.getNumParameters()?this.p_65.convertFromNormalizedParameterValue(e,t):(e-=this.p_65.getNumParameters())<this.p_66.getNumParameters()?this.p_66.convertFromNormalizedParameterValue(e,t):(e-=this.p_66.getNumParameters())<this.p_67.getNumParameters()?this.p_67.convertFromNormalizedParameterValue(e,t):(e-=this.p_67.getNumParameters())<this.p_68.getNumParameters()?this.p_68.convertFromNormalizedParameterValue(e,t):(e-=this.p_68.getNumParameters())<this.p_69.getNumParameters()?this.p_69.convertFromNormalizedParameterValue(e,t):(e-=this.p_69.getNumParameters())<this.p_70.getNumParameters()?this.p_70.convertFromNormalizedParameterValue(e,t):(e-=this.p_70.getNumParameters())<this.p_71.getNumParameters()?this.p_71.convertFromNormalizedParameterValue(e,t):(e-=this.p_71.getNumParameters())<this.p_72.getNumParameters()?this.p_72.convertFromNormalizedParameterValue(e,t):(e-=this.p_72.getNumParameters())<this.p_73.getNumParameters()?this.p_73.convertFromNormalizedParameterValue(e,t):(e-=this.p_73.getNumParameters())<this.p_74.getNumParameters()?this.p_74.convertFromNormalizedParameterValue(e,t):(e-=this.p_74.getNumParameters())<this.p_75.getNumParameters()?this.p_75.convertFromNormalizedParameterValue(e,t):(e-=this.p_75.getNumParameters())<this.p_76.getNumParameters()?this.p_76.convertFromNormalizedParameterValue(e,t):(e-=this.p_76.getNumParameters())<this.p_77.getNumParameters()?this.p_77.convertFromNormalizedParameterValue(e,t):(e-=this.p_77.getNumParameters())<this.p_78.getNumParameters()?this.p_78.convertFromNormalizedParameterValue(e,t):t}constrainParameterValue(e,t){return(e-=0)<this.p_62.getNumParameters()?this.p_62.constrainParameterValue(e,t):(e-=this.p_62.getNumParameters())<this.p_63.getNumParameters()?this.p_63.constrainParameterValue(e,t):(e-=this.p_63.getNumParameters())<this.p_64.getNumParameters()?this.p_64.constrainParameterValue(e,t):(e-=this.p_64.getNumParameters())<this.p_65.getNumParameters()?this.p_65.constrainParameterValue(e,t):(e-=this.p_65.getNumParameters())<this.p_66.getNumParameters()?this.p_66.constrainParameterValue(e,t):(e-=this.p_66.getNumParameters())<this.p_67.getNumParameters()?this.p_67.constrainParameterValue(e,t):(e-=this.p_67.getNumParameters())<this.p_68.getNumParameters()?this.p_68.constrainParameterValue(e,t):(e-=this.p_68.getNumParameters())<this.p_69.getNumParameters()?this.p_69.constrainParameterValue(e,t):(e-=this.p_69.getNumParameters())<this.p_70.getNumParameters()?this.p_70.constrainParameterValue(e,t):(e-=this.p_70.getNumParameters())<this.p_71.getNumParameters()?this.p_71.constrainParameterValue(e,t):(e-=this.p_71.getNumParameters())<this.p_72.getNumParameters()?this.p_72.constrainParameterValue(e,t):(e-=this.p_72.getNumParameters())<this.p_73.getNumParameters()?this.p_73.constrainParameterValue(e,t):(e-=this.p_73.getNumParameters())<this.p_74.getNumParameters()?this.p_74.constrainParameterValue(e,t):(e-=this.p_74.getNumParameters())<this.p_75.getNumParameters()?this.p_75.constrainParameterValue(e,t):(e-=this.p_75.getNumParameters())<this.p_76.getNumParameters()?this.p_76.constrainParameterValue(e,t):(e-=this.p_76.getNumParameters())<this.p_77.getNumParameters()?this.p_77.constrainParameterValue(e,t):(e-=this.p_77.getNumParameters())<this.p_78.getNumParameters()?this.p_78.constrainParameterValue(e,t):t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"fm2_r_freq\"):this.inport_46_value_number_set(s);break;case TAG(\"fm2_r_c1ratio\"):this.inport_47_value_number_set(s);break;case TAG(\"fm2_r_c2ratio\"):this.inport_48_value_number_set(s);break;case TAG(\"fm2_r_c3ratio\"):this.inport_49_value_number_set(s);break;case TAG(\"fm2_r_3to1\"):this.inport_50_value_number_set(s);break;case TAG(\"fm2_r_2to1\"):this.inport_51_value_number_set(s);break;case TAG(\"fm2_r_3to2\"):this.inport_52_value_number_set(s);break;case TAG(\"fm2_r_c1release\"):this.inport_53_value_number_set(s);break;case TAG(\"fm2_listener\"):this.inport_54_value_number_set(s);break;case TAG(\"fm2_r_c2release\"):this.inport_55_value_number_set(s);break;case TAG(\"fm2_r_c3release\"):this.inport_56_value_number_set(s);break;case TAG(\"fm2_r_op1gain\"):this.inport_57_value_number_set(s);break;case TAG(\"fm2_r_op2gain\"):this.inport_58_value_number_set(s);break;case TAG(\"fm2_r_op3gain\"):this.inport_59_value_number_set(s);break;case TAG(\"fm2_r_gain\"):this.inport_60_value_number_set(s)}this.p_62.processNumMessage(e,t,r,s),this.p_63.processNumMessage(e,t,r,s),this.p_64.processNumMessage(e,t,r,s),this.p_65.processNumMessage(e,t,r,s),this.p_66.processNumMessage(e,t,r,s),this.p_67.processNumMessage(e,t,r,s),this.p_68.processNumMessage(e,t,r,s),this.p_69.processNumMessage(e,t,r,s),this.p_70.processNumMessage(e,t,r,s),this.p_71.processNumMessage(e,t,r,s),this.p_72.processNumMessage(e,t,r,s),this.p_73.processNumMessage(e,t,r,s),this.p_74.processNumMessage(e,t,r,s),this.p_75.processNumMessage(e,t,r,s),this.p_76.processNumMessage(e,t,r,s),this.p_77.processNumMessage(e,t,r,s),this.p_78.processNumMessage(e,t,r,s)}processListMessage(e,t,r,s){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"fm2_r_freq\"):this.inport_46_value_list_set(s);break;case TAG(\"fm2_r_c1ratio\"):this.inport_47_value_list_set(s);break;case TAG(\"fm2_r_c2ratio\"):this.inport_48_value_list_set(s);break;case TAG(\"fm2_r_c3ratio\"):this.inport_49_value_list_set(s);break;case TAG(\"fm2_r_3to1\"):this.inport_50_value_list_set(s);break;case TAG(\"fm2_r_2to1\"):this.inport_51_value_list_set(s);break;case TAG(\"fm2_r_3to2\"):this.inport_52_value_list_set(s);break;case TAG(\"fm2_r_c1release\"):this.inport_53_value_list_set(s);break;case TAG(\"fm2_listener\"):this.inport_54_value_list_set(s);break;case TAG(\"fm2_r_c2release\"):this.inport_55_value_list_set(s);break;case TAG(\"fm2_r_c3release\"):this.inport_56_value_list_set(s);break;case TAG(\"fm2_r_op1gain\"):this.inport_57_value_list_set(s);break;case TAG(\"fm2_r_op2gain\"):this.inport_58_value_list_set(s);break;case TAG(\"fm2_r_op3gain\"):this.inport_59_value_list_set(s);break;case TAG(\"fm2_r_gain\"):this.inport_60_value_list_set(s)}this.p_62.processListMessage(e,t,r,s),this.p_63.processListMessage(e,t,r,s),this.p_64.processListMessage(e,t,r,s),this.p_65.processListMessage(e,t,r,s),this.p_66.processListMessage(e,t,r,s),this.p_67.processListMessage(e,t,r,s),this.p_68.processListMessage(e,t,r,s),this.p_69.processListMessage(e,t,r,s),this.p_70.processListMessage(e,t,r,s),this.p_71.processListMessage(e,t,r,s),this.p_72.processListMessage(e,t,r,s),this.p_73.processListMessage(e,t,r,s),this.p_74.processListMessage(e,t,r,s),this.p_75.processListMessage(e,t,r,s),this.p_76.processListMessage(e,t,r,s),this.p_77.processListMessage(e,t,r,s),this.p_78.processListMessage(e,t,r,s)}processBangMessage(e,t,r){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"fm2_r_freq\"):this.inport_46_value_bang_bang();break;case TAG(\"fm2_r_c1ratio\"):this.inport_47_value_bang_bang();break;case TAG(\"fm2_r_c2ratio\"):this.inport_48_value_bang_bang();break;case TAG(\"fm2_r_c3ratio\"):this.inport_49_value_bang_bang();break;case TAG(\"fm2_r_3to1\"):this.inport_50_value_bang_bang();break;case TAG(\"fm2_r_2to1\"):this.inport_51_value_bang_bang();break;case TAG(\"fm2_r_3to2\"):this.inport_52_value_bang_bang();break;case TAG(\"fm2_r_c1release\"):this.inport_53_value_bang_bang();break;case TAG(\"fm2_listener\"):this.inport_54_value_bang_bang();break;case TAG(\"fm2_r_c2release\"):this.inport_55_value_bang_bang();break;case TAG(\"fm2_r_c3release\"):this.inport_56_value_bang_bang();break;case TAG(\"fm2_r_op1gain\"):this.inport_57_value_bang_bang();break;case TAG(\"fm2_r_op2gain\"):this.inport_58_value_bang_bang();break;case TAG(\"fm2_r_op3gain\"):this.inport_59_value_bang_bang();break;case TAG(\"fm2_r_gain\"):this.inport_60_value_bang_bang()}this.p_62.processBangMessage(e,t,r),this.p_63.processBangMessage(e,t,r),this.p_64.processBangMessage(e,t,r),this.p_65.processBangMessage(e,t,r),this.p_66.processBangMessage(e,t,r),this.p_67.processBangMessage(e,t,r),this.p_68.processBangMessage(e,t,r),this.p_69.processBangMessage(e,t,r),this.p_70.processBangMessage(e,t,r),this.p_71.processBangMessage(e,t,r),this.p_72.processBangMessage(e,t,r),this.p_73.processBangMessage(e,t,r),this.p_74.processBangMessage(e,t,r),this.p_75.processBangMessage(e,t,r),this.p_76.processBangMessage(e,t,r),this.p_77.processBangMessage(e,t,r),this.p_78.processBangMessage(e,t,r)}resolveTag(e){switch(e){case TAG(\"fm2_r_freq\"):return\"fm2_r_freq\";case TAG(\"\"):return\"\";case TAG(\"fm2_r_c1ratio\"):return\"fm2_r_c1ratio\";case TAG(\"fm2_r_c2ratio\"):return\"fm2_r_c2ratio\";case TAG(\"fm2_r_c3ratio\"):return\"fm2_r_c3ratio\";case TAG(\"fm2_r_3to1\"):return\"fm2_r_3to1\";case TAG(\"fm2_r_2to1\"):return\"fm2_r_2to1\";case TAG(\"fm2_r_3to2\"):return\"fm2_r_3to2\";case TAG(\"fm2_r_c1release\"):return\"fm2_r_c1release\";case TAG(\"fm2_listener\"):return\"fm2_listener\";case TAG(\"fm2_r_c2release\"):return\"fm2_r_c2release\";case TAG(\"fm2_r_c3release\"):return\"fm2_r_c3release\";case TAG(\"fm2_r_op1gain\"):return\"fm2_r_op1gain\";case TAG(\"fm2_r_op2gain\"):return\"fm2_r_op2gain\";case TAG(\"fm2_r_op3gain\"):return\"fm2_r_op3gain\";case TAG(\"fm2_r_gain\"):return\"fm2_r_gain\"}var t=this.p_62.resolveTag(e);if(t)return t;var r=this.p_63.resolveTag(e);if(r)return r;var s=this.p_64.resolveTag(e);if(s)return s;var a=this.p_65.resolveTag(e);if(a)return a;var i=this.p_66.resolveTag(e);if(i)return i;var n=this.p_67.resolveTag(e);if(n)return n;var m=this.p_68.resolveTag(e);if(m)return m;var u=this.p_69.resolveTag(e);if(u)return u;var h=this.p_70.resolveTag(e);if(h)return h;var p=this.p_71.resolveTag(e);if(p)return p;var _=this.p_72.resolveTag(e);if(_)return _;var g=this.p_73.resolveTag(e);if(g)return g;var o=this.p_74.resolveTag(e);if(o)return o;var P=this.p_75.resolveTag(e);if(P)return P;var l=this.p_76.resolveTag(e);if(l)return l;var c=this.p_77.resolveTag(e);if(c)return c;var d=this.p_78.resolveTag(e);return d||null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){this.updateTime(t),0==e&&(this.mtof_05_innerMtoF_buffer=new Float64Buffer(this.getPatcher().RNBODefaultMtofLookupTable256),this.mtof_06_innerMtoF_buffer=new Float64Buffer(this.getPatcher().RNBODefaultMtofLookupTable256),this.mtof_07_innerMtoF_buffer=new Float64Buffer(this.getPatcher().RNBODefaultMtofLookupTable256),this.mtof_08_innerMtoF_buffer=new Float64Buffer(this.getPatcher().RNBODefaultMtofLookupTable256)),this.p_62.processDataViewUpdate(e,t),this.p_63.processDataViewUpdate(e,t),this.p_64.processDataViewUpdate(e,t),this.p_65.processDataViewUpdate(e,t),this.p_66.processDataViewUpdate(e,t),this.p_67.processDataViewUpdate(e,t),this.p_68.processDataViewUpdate(e,t),this.p_69.processDataViewUpdate(e,t),this.p_70.processDataViewUpdate(e,t),this.p_71.processDataViewUpdate(e,t),this.p_72.processDataViewUpdate(e,t),this.p_73.processDataViewUpdate(e,t),this.p_74.processDataViewUpdate(e,t),this.p_75.processDataViewUpdate(e,t),this.p_76.processDataViewUpdate(e,t),this.p_77.processDataViewUpdate(e,t),this.p_78.processDataViewUpdate(e,t)}initialize(){this.assign_defaults(),this.setState(),this.mtof_05_innerMtoF_buffer=new Float64Buffer(this.getPatcher().RNBODefaultMtofLookupTable256),this.mtof_06_innerMtoF_buffer=new Float64Buffer(this.getPatcher().RNBODefaultMtofLookupTable256),this.mtof_07_innerMtoF_buffer=new Float64Buffer(this.getPatcher().RNBODefaultMtofLookupTable256),this.mtof_08_innerMtoF_buffer=new Float64Buffer(this.getPatcher().RNBODefaultMtofLookupTable256)}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_629{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_630{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_614{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(4),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.groove_01_buffer=0,this.groove_01_playStatus=0,this.groove_01_setupDone=!1,this.onepole_tilde_07_needsUpdate=!1,this.onepole_tilde_07_setupDone=!1,this.groove_01_bufferobj=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 1}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}setVoiceIndex(e){this._voiceIndex=e}setNoteNumber(e){this._noteNumber=e}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getPolyParameterValue(e,t){return e[0].getParameterValue(t)}setPolyParameterValue(e,t,r,s){for(var a=0;a<120;a++)e[a].setParameterValue(t,r,s)}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){1==this._voiceIndex&&this.getPatcher().sendParameter(e+this.parameterOffset)}sendPolyParameter(e,t){this.getPatcher().sendParameter(e+this.parameterOffset+t-1)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){switch(RNBO_UNUSED(s),RNBO_UNUSED(r),this.updateTime(e),t){case 892732297:this.loadmess_05_startupbang_bang();break;case 760652352:this.line_11_target_bang();break;case-798469121:this.line_12_target_bang()}}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){switch(this.updateTime(r),e){case TAG(\"startupbang\"):TAG(\"groovy/p_obj-1/loadmess_obj-75\")==t&&this.loadmess_05_startupbang_bang()}}resolveTag(e){switch(e){case TAG(\"startupbang\"):return\"startupbang\";case TAG(\"groovy/p_obj-1/loadmess_obj-75\"):return\"groovy/p_obj-1/loadmess_obj-75\"}return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}zeroDataRef(e){e.setZero()}processDataViewUpdate(e,t){this.updateTime(t),-2!=e&&1!=e&&2!=e&&3!=e&&4!=e&&5!=e&&6!=e&&7!=e&&8!=e&&9!=e&&10!=e&&11!=e&&12!=e&&13!=e&&14!=e&&15!=e&&16!=e&&17!=e&&18!=e&&19!=e&&20!=e&&21!=e&&22!=e&&23!=e&&24!=e&&25!=e&&26!=e&&27!=e&&28!=e&&29!=e&&30!=e&&31!=e&&32!=e&&33!=e&&34!=e&&35!=e&&36!=e&&37!=e&&38!=e&&39!=e&&40!=e&&41!=e&&42!=e&&43!=e&&44!=e&&45!=e&&46!=e&&47!=e&&48!=e&&49!=e&&50!=e||(this.groove_01_buffer=new Float32MultiBuffer(this.groove_01_bufferobj))}initialize(){this.groove_01_bufferobj=initMultiRef(this.getPatcher().getPatcher().b_dot_0,this.getPatcher().getPatcher().b_dot_1,this.getPatcher().getPatcher().b_dot_2,this.getPatcher().getPatcher().b_dot_3,this.getPatcher().getPatcher().b_dot_4,this.getPatcher().getPatcher().b_dot_5,this.getPatcher().getPatcher().b_dot_6,this.getPatcher().getPatcher().b_dot_7,this.getPatcher().getPatcher().b_dot_8,this.getPatcher().getPatcher().b_dot_9,this.getPatcher().getPatcher().b_dot_10,this.getPatcher().getPatcher().b_dot_11,this.getPatcher().getPatcher().b_dot_12,this.getPatcher().getPatcher().b_dot_13,this.getPatcher().getPatcher().b_dot_14,this.getPatcher().getPatcher().b_dot_15,this.getPatcher().getPatcher().b_dot_16,this.getPatcher().getPatcher().b_dot_17,this.getPatcher().getPatcher().b_dot_18,this.getPatcher().getPatcher().b_dot_19,this.getPatcher().getPatcher().b_dot_20,this.getPatcher().getPatcher().b_dot_21,this.getPatcher().getPatcher().b_dot_22,this.getPatcher().getPatcher().b_dot_23,this.getPatcher().getPatcher().b_dot_24,this.getPatcher().getPatcher().b_dot_25,this.getPatcher().getPatcher().b_dot_26,this.getPatcher().getPatcher().b_dot_27,this.getPatcher().getPatcher().b_dot_28,this.getPatcher().getPatcher().b_dot_29,this.getPatcher().getPatcher().b_dot_30,this.getPatcher().getPatcher().b_dot_31,this.getPatcher().getPatcher().b_dot_32,this.getPatcher().getPatcher().b_dot_33,this.getPatcher().getPatcher().b_dot_34,this.getPatcher().getPatcher().b_dot_35,this.getPatcher().getPatcher().b_dot_36,this.getPatcher().getPatcher().b_dot_37,this.getPatcher().getPatcher().b_dot_38,this.getPatcher().getPatcher().b_dot_39,this.getPatcher().getPatcher().b_dot_40,this.getPatcher().getPatcher().b_dot_41,this.getPatcher().getPatcher().b_dot_42,this.getPatcher().getPatcher().b_dot_43,this.getPatcher().getPatcher().b_dot_44,this.getPatcher().getPatcher().b_dot_45,this.getPatcher().getPatcher().b_dot_46,this.getPatcher().getPatcher().b_dot_47,this.getPatcher().getPatcher().b_dot_48,this.getPatcher().getPatcher().b_dot_49),this.assign_defaults(),this.setState(),this.groove_01_bufferobj.setIndex(-2),this.groove_01_buffer=new Float32MultiBuffer(this.groove_01_bufferobj)}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_631{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.counter_33_phase=!0,this.multibuffertilde_01_buffer0=0,this.multibuffertilde_01_buffer1=0,this.multibuffertilde_01_buffer2=0,this.multibuffertilde_01_buffer3=0,this.multibuffertilde_01_buffer4=0,this.multibuffertilde_01_buffer5=0,this.multibuffertilde_01_buffer6=0,this.multibuffertilde_01_buffer7=0,this.multibuffertilde_01_buffer8=0,this.multibuffertilde_01_buffer9=0,this.multibuffertilde_01_buffer10=0,this.multibuffertilde_01_buffer11=0,this.multibuffertilde_01_buffer12=0,this.multibuffertilde_01_buffer13=0,this.multibuffertilde_01_buffer14=0,this.multibuffertilde_01_buffer15=0,this.multibuffertilde_01_buffer16=0,this.multibuffertilde_01_buffer17=0,this.multibuffertilde_01_buffer18=0,this.multibuffertilde_01_buffer19=0,this.multibuffertilde_01_buffer20=0,this.multibuffertilde_01_buffer21=0,this.multibuffertilde_01_buffer22=0,this.multibuffertilde_01_buffer23=0,this.multibuffertilde_01_buffer24=0,this.multibuffertilde_01_buffer25=0,this.multibuffertilde_01_buffer26=0,this.multibuffertilde_01_buffer27=0,this.multibuffertilde_01_buffer28=0,this.multibuffertilde_01_buffer29=0,this.multibuffertilde_01_buffer30=0,this.multibuffertilde_01_buffer31=0,this.multibuffertilde_01_buffer32=0,this.multibuffertilde_01_buffer33=0,this.multibuffertilde_01_buffer34=0,this.multibuffertilde_01_buffer35=0,this.multibuffertilde_01_buffer36=0,this.multibuffertilde_01_buffer37=0,this.multibuffertilde_01_buffer38=0,this.multibuffertilde_01_buffer39=0,this.multibuffertilde_01_buffer40=0,this.multibuffertilde_01_buffer41=0,this.multibuffertilde_01_buffer42=0,this.multibuffertilde_01_buffer43=0,this.multibuffertilde_01_buffer44=0,this.multibuffertilde_01_buffer45=0,this.multibuffertilde_01_buffer46=0,this.multibuffertilde_01_buffer47=0,this.multibuffertilde_01_buffer48=0,this.multibuffertilde_01_buffer49=0,this.multibuffertilde_01_buffer=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0,this.p_79=new Array}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 1}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){for(var e=0;e<120;e++)this.p_79[e]=new RNBOSubpatcher_614,this.p_79[e].setEngineAndPatcher(this.getEngine(),this),this.p_79[e].initialize(),this.p_79[e].setParameterOffset(this.getParameterOffset(this.p_79[0])),this.p_79[e].setVoiceIndex(e+1)}processTempoEvent(e,t){this.updateTime(e);for(var r=0;r<120;r++)this.p_79[r].processTempoEvent(e,t)}processTransportEvent(e,t){this.updateTime(e);for(var r=0;r<120;r++)this.p_79[r].processTransportEvent(e,t)}processBeatTimeEvent(e,t){this.updateTime(e);for(var r=0;r<120;r++)this.p_79[r].processBeatTimeEvent(e,t)}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){this.updateTime(e);for(var s=0;s<120;s++)this.p_79[s].processTimeSignatureEvent(e,t,r)}setParameterValue(e,t,r){RNBO_UNUSED(t),this.updateTime(r),(e-=0)<this.p_79[0].getNumParameters()&&this.p_79[0].setPolyParameterValue(this.p_79,e,t,r)}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return(e-=0)<this.p_79[0].getNumParameters()?this.p_79[0].getPolyParameterValue(this.p_79,e):0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0+this.p_79[0].getNumParameters()}getParameterName(e){return(e-=0)<this.p_79[0].getNumParameters()?this.p_79[0].getParameterName(e):\"bogus\"}getParameterId(e){return(e-=0)<this.p_79[0].getNumParameters()?this.p_79[0].getParameterId(e):\"bogus\"}getParameterInfo(e,t){if((e-=0)<this.p_79[0].getNumParameters())for(var r=0;r<120;r++)this.p_79[r].getParameterInfo(e,t)}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}getParameterOffset(e){return this.p_79[0],0}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return(e-=0)<this.p_79[0].getNumParameters()?this.p_79[0].convertToNormalizedParameterValue(e,t):t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t,(e-=0)<this.p_79[0].getNumParameters()?this.p_79[0].convertFromNormalizedParameterValue(e,t):t}constrainParameterValue(e,t){return(e-=0)<this.p_79[0].getNumParameters()?this.p_79[0].constrainParameterValue(e,t):t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){switch(RNBO_UNUSED(s),RNBO_UNUSED(r),this.updateTime(e),t){case 892732297:this.loadmess_06_startupbang_bang()}}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){RNBO_UNUSED(t),this.updateTime(r);for(var a=0;a<120;a++)this.p_79[a].processNumMessage(e,t,r,s)}processListMessage(e,t,r,s){RNBO_UNUSED(t),this.updateTime(r);for(var a=0;a<120;a++)this.p_79[a].processListMessage(e,t,r,s)}processBangMessage(e,t,r){switch(this.updateTime(r),e){case TAG(\"startupbang\"):TAG(\"groovy/loadmess_obj-7\")==t&&this.loadmess_06_startupbang_bang()}for(var s=0;s<120;s++)this.p_79[s].processBangMessage(e,t,r)}resolveTag(e){switch(e){case TAG(\"startupbang\"):return\"startupbang\";case TAG(\"groovy/loadmess_obj-7\"):return\"groovy/loadmess_obj-7\"}var t=this.p_79[0].resolveTag(e);return t||null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){this.updateTime(t),1==e&&(this.multibuffertilde_01_buffer0=new Float32Buffer(this.getPatcher().b_dot_0)),2==e&&(this.multibuffertilde_01_buffer1=new Float32Buffer(this.getPatcher().b_dot_1)),3==e&&(this.multibuffertilde_01_buffer2=new Float32Buffer(this.getPatcher().b_dot_2)),4==e&&(this.multibuffertilde_01_buffer3=new Float32Buffer(this.getPatcher().b_dot_3)),5==e&&(this.multibuffertilde_01_buffer4=new Float32Buffer(this.getPatcher().b_dot_4)),6==e&&(this.multibuffertilde_01_buffer5=new Float32Buffer(this.getPatcher().b_dot_5)),7==e&&(this.multibuffertilde_01_buffer6=new Float32Buffer(this.getPatcher().b_dot_6)),8==e&&(this.multibuffertilde_01_buffer7=new Float32Buffer(this.getPatcher().b_dot_7)),9==e&&(this.multibuffertilde_01_buffer8=new Float32Buffer(this.getPatcher().b_dot_8)),10==e&&(this.multibuffertilde_01_buffer9=new Float32Buffer(this.getPatcher().b_dot_9)),11==e&&(this.multibuffertilde_01_buffer10=new Float32Buffer(this.getPatcher().b_dot_10)),12==e&&(this.multibuffertilde_01_buffer11=new Float32Buffer(this.getPatcher().b_dot_11)),13==e&&(this.multibuffertilde_01_buffer12=new Float32Buffer(this.getPatcher().b_dot_12)),14==e&&(this.multibuffertilde_01_buffer13=new Float32Buffer(this.getPatcher().b_dot_13)),15==e&&(this.multibuffertilde_01_buffer14=new Float32Buffer(this.getPatcher().b_dot_14)),16==e&&(this.multibuffertilde_01_buffer15=new Float32Buffer(this.getPatcher().b_dot_15)),17==e&&(this.multibuffertilde_01_buffer16=new Float32Buffer(this.getPatcher().b_dot_16)),18==e&&(this.multibuffertilde_01_buffer17=new Float32Buffer(this.getPatcher().b_dot_17)),19==e&&(this.multibuffertilde_01_buffer18=new Float32Buffer(this.getPatcher().b_dot_18)),20==e&&(this.multibuffertilde_01_buffer19=new Float32Buffer(this.getPatcher().b_dot_19)),21==e&&(this.multibuffertilde_01_buffer20=new Float32Buffer(this.getPatcher().b_dot_20)),22==e&&(this.multibuffertilde_01_buffer21=new Float32Buffer(this.getPatcher().b_dot_21)),23==e&&(this.multibuffertilde_01_buffer22=new Float32Buffer(this.getPatcher().b_dot_22)),24==e&&(this.multibuffertilde_01_buffer23=new Float32Buffer(this.getPatcher().b_dot_23)),25==e&&(this.multibuffertilde_01_buffer24=new Float32Buffer(this.getPatcher().b_dot_24)),26==e&&(this.multibuffertilde_01_buffer25=new Float32Buffer(this.getPatcher().b_dot_25)),27==e&&(this.multibuffertilde_01_buffer26=new Float32Buffer(this.getPatcher().b_dot_26)),28==e&&(this.multibuffertilde_01_buffer27=new Float32Buffer(this.getPatcher().b_dot_27)),29==e&&(this.multibuffertilde_01_buffer28=new Float32Buffer(this.getPatcher().b_dot_28)),30==e&&(this.multibuffertilde_01_buffer29=new Float32Buffer(this.getPatcher().b_dot_29)),31==e&&(this.multibuffertilde_01_buffer30=new Float32Buffer(this.getPatcher().b_dot_30)),32==e&&(this.multibuffertilde_01_buffer31=new Float32Buffer(this.getPatcher().b_dot_31)),33==e&&(this.multibuffertilde_01_buffer32=new Float32Buffer(this.getPatcher().b_dot_32)),34==e&&(this.multibuffertilde_01_buffer33=new Float32Buffer(this.getPatcher().b_dot_33)),35==e&&(this.multibuffertilde_01_buffer34=new Float32Buffer(this.getPatcher().b_dot_34)),36==e&&(this.multibuffertilde_01_buffer35=new Float32Buffer(this.getPatcher().b_dot_35)),37==e&&(this.multibuffertilde_01_buffer36=new Float32Buffer(this.getPatcher().b_dot_36)),38==e&&(this.multibuffertilde_01_buffer37=new Float32Buffer(this.getPatcher().b_dot_37)),39==e&&(this.multibuffertilde_01_buffer38=new Float32Buffer(this.getPatcher().b_dot_38)),40==e&&(this.multibuffertilde_01_buffer39=new Float32Buffer(this.getPatcher().b_dot_39)),41==e&&(this.multibuffertilde_01_buffer40=new Float32Buffer(this.getPatcher().b_dot_40)),42==e&&(this.multibuffertilde_01_buffer41=new Float32Buffer(this.getPatcher().b_dot_41)),43==e&&(this.multibuffertilde_01_buffer42=new Float32Buffer(this.getPatcher().b_dot_42)),44==e&&(this.multibuffertilde_01_buffer43=new Float32Buffer(this.getPatcher().b_dot_43)),45==e&&(this.multibuffertilde_01_buffer44=new Float32Buffer(this.getPatcher().b_dot_44)),46==e&&(this.multibuffertilde_01_buffer45=new Float32Buffer(this.getPatcher().b_dot_45)),47==e&&(this.multibuffertilde_01_buffer46=new Float32Buffer(this.getPatcher().b_dot_46)),48==e&&(this.multibuffertilde_01_buffer47=new Float32Buffer(this.getPatcher().b_dot_47)),49==e&&(this.multibuffertilde_01_buffer48=new Float32Buffer(this.getPatcher().b_dot_48)),50==e&&(this.multibuffertilde_01_buffer49=new Float32Buffer(this.getPatcher().b_dot_49)),-1!=e&&1!=e&&2!=e&&3!=e&&4!=e&&5!=e&&6!=e&&7!=e&&8!=e&&9!=e&&10!=e&&11!=e&&12!=e&&13!=e&&14!=e&&15!=e&&16!=e&&17!=e&&18!=e&&19!=e&&20!=e&&21!=e&&22!=e&&23!=e&&24!=e&&25!=e&&26!=e&&27!=e&&28!=e&&29!=e&&30!=e&&31!=e&&32!=e&&33!=e&&34!=e&&35!=e&&36!=e&&37!=e&&38!=e&&39!=e&&40!=e&&41!=e&&42!=e&&43!=e&&44!=e&&45!=e&&46!=e&&47!=e&&48!=e&&49!=e&&50!=e||(this.multibuffertilde_01_buffer=new Float32MultiBuffer(this.getPatcher().samples));for(var r=0;r<120;r++)this.p_79[r].processDataViewUpdate(e,t)}initialize(){this.assign_defaults(),this.setState(),this.multibuffertilde_01_buffer0=new Float32Buffer(this.getPatcher().b_dot_0),this.multibuffertilde_01_buffer1=new Float32Buffer(this.getPatcher().b_dot_1),this.multibuffertilde_01_buffer2=new Float32Buffer(this.getPatcher().b_dot_2),this.multibuffertilde_01_buffer3=new Float32Buffer(this.getPatcher().b_dot_3),this.multibuffertilde_01_buffer4=new Float32Buffer(this.getPatcher().b_dot_4),this.multibuffertilde_01_buffer5=new Float32Buffer(this.getPatcher().b_dot_5),this.multibuffertilde_01_buffer6=new Float32Buffer(this.getPatcher().b_dot_6),this.multibuffertilde_01_buffer7=new Float32Buffer(this.getPatcher().b_dot_7),this.multibuffertilde_01_buffer8=new Float32Buffer(this.getPatcher().b_dot_8),this.multibuffertilde_01_buffer9=new Float32Buffer(this.getPatcher().b_dot_9),this.multibuffertilde_01_buffer10=new Float32Buffer(this.getPatcher().b_dot_10),this.multibuffertilde_01_buffer11=new Float32Buffer(this.getPatcher().b_dot_11),this.multibuffertilde_01_buffer12=new Float32Buffer(this.getPatcher().b_dot_12),this.multibuffertilde_01_buffer13=new Float32Buffer(this.getPatcher().b_dot_13),this.multibuffertilde_01_buffer14=new Float32Buffer(this.getPatcher().b_dot_14),this.multibuffertilde_01_buffer15=new Float32Buffer(this.getPatcher().b_dot_15),this.multibuffertilde_01_buffer16=new Float32Buffer(this.getPatcher().b_dot_16),this.multibuffertilde_01_buffer17=new Float32Buffer(this.getPatcher().b_dot_17),this.multibuffertilde_01_buffer18=new Float32Buffer(this.getPatcher().b_dot_18),this.multibuffertilde_01_buffer19=new Float32Buffer(this.getPatcher().b_dot_19),this.multibuffertilde_01_buffer20=new Float32Buffer(this.getPatcher().b_dot_20),this.multibuffertilde_01_buffer21=new Float32Buffer(this.getPatcher().b_dot_21),this.multibuffertilde_01_buffer22=new Float32Buffer(this.getPatcher().b_dot_22),this.multibuffertilde_01_buffer23=new Float32Buffer(this.getPatcher().b_dot_23),this.multibuffertilde_01_buffer24=new Float32Buffer(this.getPatcher().b_dot_24),this.multibuffertilde_01_buffer25=new Float32Buffer(this.getPatcher().b_dot_25),this.multibuffertilde_01_buffer26=new Float32Buffer(this.getPatcher().b_dot_26),this.multibuffertilde_01_buffer27=new Float32Buffer(this.getPatcher().b_dot_27),this.multibuffertilde_01_buffer28=new Float32Buffer(this.getPatcher().b_dot_28),this.multibuffertilde_01_buffer29=new Float32Buffer(this.getPatcher().b_dot_29),this.multibuffertilde_01_buffer30=new Float32Buffer(this.getPatcher().b_dot_30),this.multibuffertilde_01_buffer31=new Float32Buffer(this.getPatcher().b_dot_31),this.multibuffertilde_01_buffer32=new Float32Buffer(this.getPatcher().b_dot_32),this.multibuffertilde_01_buffer33=new Float32Buffer(this.getPatcher().b_dot_33),this.multibuffertilde_01_buffer34=new Float32Buffer(this.getPatcher().b_dot_34),this.multibuffertilde_01_buffer35=new Float32Buffer(this.getPatcher().b_dot_35),this.multibuffertilde_01_buffer36=new Float32Buffer(this.getPatcher().b_dot_36),this.multibuffertilde_01_buffer37=new Float32Buffer(this.getPatcher().b_dot_37),this.multibuffertilde_01_buffer38=new Float32Buffer(this.getPatcher().b_dot_38),this.multibuffertilde_01_buffer39=new Float32Buffer(this.getPatcher().b_dot_39),this.multibuffertilde_01_buffer40=new Float32Buffer(this.getPatcher().b_dot_40),this.multibuffertilde_01_buffer41=new Float32Buffer(this.getPatcher().b_dot_41),this.multibuffertilde_01_buffer42=new Float32Buffer(this.getPatcher().b_dot_42),this.multibuffertilde_01_buffer43=new Float32Buffer(this.getPatcher().b_dot_43),this.multibuffertilde_01_buffer44=new Float32Buffer(this.getPatcher().b_dot_44),this.multibuffertilde_01_buffer45=new Float32Buffer(this.getPatcher().b_dot_45),this.multibuffertilde_01_buffer46=new Float32Buffer(this.getPatcher().b_dot_46),this.multibuffertilde_01_buffer47=new Float32Buffer(this.getPatcher().b_dot_47),this.multibuffertilde_01_buffer48=new Float32Buffer(this.getPatcher().b_dot_48),this.multibuffertilde_01_buffer49=new Float32Buffer(this.getPatcher().b_dot_49),this.multibuffertilde_01_buffer=new Float32MultiBuffer(this.getPatcher().samples)}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_615{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.counter_34_phase=!0,this.random_85_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_616{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.counter_35_phase=!0,this.random_86_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_617{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.counter_36_phase=!0,this.random_87_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_632{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0,this.p_80=new Array,this.p_81=new Array,this.p_82=new Array}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){this.p_80=new RNBOSubpatcher_615,this.p_80.setEngineAndPatcher(this.getEngine(),this),this.p_80.initialize(),this.p_80.setParameterOffset(this.getParameterOffset(this.p_80)),this.p_81=new RNBOSubpatcher_616,this.p_81.setEngineAndPatcher(this.getEngine(),this),this.p_81.initialize(),this.p_81.setParameterOffset(this.getParameterOffset(this.p_81)),this.p_82=new RNBOSubpatcher_617,this.p_82.setEngineAndPatcher(this.getEngine(),this),this.p_82.initialize(),this.p_82.setParameterOffset(this.getParameterOffset(this.p_82))}processTempoEvent(e,t){this.updateTime(e),this.p_80.processTempoEvent(e,t),this.p_81.processTempoEvent(e,t),this.p_82.processTempoEvent(e,t)}processTransportEvent(e,t){this.updateTime(e),this.p_80.processTransportEvent(e,t),this.p_81.processTransportEvent(e,t),this.p_82.processTransportEvent(e,t)}processBeatTimeEvent(e,t){this.updateTime(e),this.p_80.processBeatTimeEvent(e,t),this.p_81.processBeatTimeEvent(e,t),this.p_82.processBeatTimeEvent(e,t)}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){this.updateTime(e),this.p_80.processTimeSignatureEvent(e,t,r),this.p_81.processTimeSignatureEvent(e,t,r),this.p_82.processTimeSignatureEvent(e,t,r)}setParameterValue(e,t,r){RNBO_UNUSED(t),this.updateTime(r),(e-=0)<this.p_80.getNumParameters()&&this.p_80.setParameterValue(e,t,r),(e-=this.p_80.getNumParameters())<this.p_81.getNumParameters()&&this.p_81.setParameterValue(e,t,r),(e-=this.p_81.getNumParameters())<this.p_82.getNumParameters()&&this.p_82.setParameterValue(e,t,r)}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return(e-=0)<this.p_80.getNumParameters()?this.p_80.getParameterValue(e):(e-=this.p_80.getNumParameters())<this.p_81.getNumParameters()?this.p_81.getParameterValue(e):(e-=this.p_81.getNumParameters())<this.p_82.getNumParameters()?this.p_82.getParameterValue(e):0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0+this.p_80.getNumParameters()+this.p_81.getNumParameters()+this.p_82.getNumParameters()}getParameterName(e){return(e-=0)<this.p_80.getNumParameters()?this.p_80.getParameterName(e):(e-=this.p_80.getNumParameters())<this.p_81.getNumParameters()?this.p_81.getParameterName(e):(e-=this.p_81.getNumParameters())<this.p_82.getNumParameters()?this.p_82.getParameterName(e):\"bogus\"}getParameterId(e){return(e-=0)<this.p_80.getNumParameters()?this.p_80.getParameterId(e):(e-=this.p_80.getNumParameters())<this.p_81.getNumParameters()?this.p_81.getParameterId(e):(e-=this.p_81.getNumParameters())<this.p_82.getNumParameters()?this.p_82.getParameterId(e):\"bogus\"}getParameterInfo(e,t){(e-=0)<this.p_80.getNumParameters()&&this.p_80.getParameterInfo(e,t),(e-=this.p_80.getNumParameters())<this.p_81.getNumParameters()&&this.p_81.getParameterInfo(e,t),(e-=this.p_81.getNumParameters())<this.p_82.getNumParameters()&&this.p_82.getParameterInfo(e,t)}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}getParameterOffset(e){return e==this.p_80?0:e==this.p_81?0+this.p_80.getNumParameters():e==this.p_82?0+this.p_80.getNumParameters()+this.p_81.getNumParameters():0}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return(e-=0)<this.p_80.getNumParameters()?this.p_80.convertToNormalizedParameterValue(e,t):(e-=this.p_80.getNumParameters())<this.p_81.getNumParameters()?this.p_81.convertToNormalizedParameterValue(e,t):(e-=this.p_81.getNumParameters())<this.p_82.getNumParameters()?this.p_82.convertToNormalizedParameterValue(e,t):t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t,(e-=0)<this.p_80.getNumParameters()?this.p_80.convertFromNormalizedParameterValue(e,t):(e-=this.p_80.getNumParameters())<this.p_81.getNumParameters()?this.p_81.convertFromNormalizedParameterValue(e,t):(e-=this.p_81.getNumParameters())<this.p_82.getNumParameters()?this.p_82.convertFromNormalizedParameterValue(e,t):t}constrainParameterValue(e,t){return(e-=0)<this.p_80.getNumParameters()?this.p_80.constrainParameterValue(e,t):(e-=this.p_80.getNumParameters())<this.p_81.getNumParameters()?this.p_81.constrainParameterValue(e,t):(e-=this.p_81.getNumParameters())<this.p_82.getNumParameters()?this.p_82.constrainParameterValue(e,t):t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){switch(RNBO_UNUSED(s),RNBO_UNUSED(r),this.updateTime(e),t){case 892732297:this.loadmess_07_startupbang_bang()}}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"perc_sound\"):this.inport_61_value_number_set(s);break;case TAG(\"perc_transpose\"):this.inport_62_value_number_set(s);break;case TAG(\"perc_velocity\"):this.inport_63_value_number_set(s);break;case TAG(\"perc_duration\"):this.inport_64_value_number_set(s)}this.p_80.processNumMessage(e,t,r,s),this.p_81.processNumMessage(e,t,r,s),this.p_82.processNumMessage(e,t,r,s)}processListMessage(e,t,r,s){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"perc_sound\"):this.inport_61_value_list_set(s);break;case TAG(\"perc_transpose\"):this.inport_62_value_list_set(s);break;case TAG(\"perc_velocity\"):this.inport_63_value_list_set(s);break;case TAG(\"perc_duration\"):this.inport_64_value_list_set(s)}this.p_80.processListMessage(e,t,r,s),this.p_81.processListMessage(e,t,r,s),this.p_82.processListMessage(e,t,r,s)}processBangMessage(e,t,r){switch(this.updateTime(r),e){case TAG(\"perc_sound\"):this.inport_61_value_bang_bang();break;case TAG(\"startupbang\"):TAG(\"perc_params/loadmess_obj-4\")==t&&this.loadmess_07_startupbang_bang();break;case TAG(\"perc_transpose\"):this.inport_62_value_bang_bang();break;case TAG(\"perc_velocity\"):this.inport_63_value_bang_bang();break;case TAG(\"perc_duration\"):this.inport_64_value_bang_bang()}this.p_80.processBangMessage(e,t,r),this.p_81.processBangMessage(e,t,r),this.p_82.processBangMessage(e,t,r)}resolveTag(e){switch(e){case TAG(\"perc_sound\"):return\"perc_sound\";case TAG(\"\"):return\"\";case TAG(\"startupbang\"):return\"startupbang\";case TAG(\"perc_params/loadmess_obj-4\"):return\"perc_params/loadmess_obj-4\";case TAG(\"perc_transpose\"):return\"perc_transpose\";case TAG(\"perc_velocity\"):return\"perc_velocity\";case TAG(\"perc_duration\"):return\"perc_duration\"}var t=this.p_80.resolveTag(e);if(t)return t;var r=this.p_81.resolveTag(e);if(r)return r;var s=this.p_82.resolveTag(e);return s||null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){this.p_80.processDataViewUpdate(e,t),this.p_81.processDataViewUpdate(e,t),this.p_82.processDataViewUpdate(e,t)}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_633{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.counter_37_phase=!0,this.random_88_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_634{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_635{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.counter_38_phase=!0,this.random_89_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOSubpatcher_636{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.counter_39_phase=!0,this.random_90_nz_last=0,this._voiceIndex=0,this.isMuted=1,this.parameterOffset=0}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 0}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){}processTempoEvent(e,t){}processTransportEvent(e,t){}processBeatTimeEvent(e,t){}onSampleRateChanged(e){}processTimeSignatureEvent(e,t,r){}setParameterValue(e,t,r){}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return 0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0}getParameterName(e){return\"bogus\"}getParameterId(e){return\"bogus\"}getParameterInfo(e,t){}sendParameter(e){this.getPatcher().sendParameter(e+this.parameterOffset)}setParameterOffset(e){this.parameterOffset=e}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t}constrainParameterValue(e,t){return t}scheduleParamInit(e,t){this.getPatcher().scheduleParamInit(e+this.parameterOffset,t)}processClockEvent(e,t,r,s){}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){}processListMessage(e,t,r,s){}processBangMessage(e,t,r){}resolveTag(e){return null}getDataRef(e){return null}getNumDataRefs(){return 0}fillDataRef(e,t){}processDataViewUpdate(e,t){}initialize(){this.assign_defaults(),this.setState()}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this.getPatcher().getTopLevelPatcher()}}class RNBOPatcher{constructor(){this._currentTime=0,this.sampleOffsetIntoNextAudioBuffer=0,this.zeroBuffer=0,this.dummyBuffer=0,this.signals=new Array(4),this.didAllocateSignals=0,this.vs=0,this.maxvs=0,this.uzi_01_pausecount=0,this.uzi_02_pausecount=0,this.gen_01_rate_9_currentPhase=0,this.gen_01_rate_9_diff=0,this.gen_01_rate_9_prev=0,this.gen_01_rate_9_mult=1,this.gen_01_rate_9_invmult=1,this.gen_01_setupDone=!1,this.edge_01_setupDone=!1,this.edge_02_setupDone=!1,this.counter_40_phase=!0,this.counter_41_phase=!0,this.globaltransport_tempo=0,this.globaltransport_tempoNeedsReset=!1,this.globaltransport_state=0,this.globaltransport_stateNeedsReset=!1,this.globaltransport_notify=!1,this.globaltransport_setupDone=!1,this.RNBODefaultMtofLookupTable256=0,this.b_dot_0=0,this.b_dot_1=0,this.b_dot_2=0,this.b_dot_3=0,this.b_dot_4=0,this.b_dot_5=0,this.b_dot_6=0,this.b_dot_7=0,this.b_dot_8=0,this.b_dot_9=0,this.b_dot_10=0,this.b_dot_11=0,this.b_dot_12=0,this.b_dot_13=0,this.b_dot_14=0,this.b_dot_15=0,this.b_dot_16=0,this.b_dot_17=0,this.b_dot_18=0,this.b_dot_19=0,this.b_dot_20=0,this.b_dot_21=0,this.b_dot_22=0,this.b_dot_23=0,this.b_dot_24=0,this.b_dot_25=0,this.b_dot_26=0,this.b_dot_27=0,this.b_dot_28=0,this.b_dot_29=0,this.b_dot_30=0,this.b_dot_31=0,this.b_dot_32=0,this.b_dot_33=0,this.b_dot_34=0,this.b_dot_35=0,this.b_dot_36=0,this.b_dot_37=0,this.b_dot_38=0,this.b_dot_39=0,this.b_dot_40=0,this.b_dot_41=0,this.b_dot_42=0,this.b_dot_43=0,this.b_dot_44=0,this.b_dot_45=0,this.b_dot_46=0,this.b_dot_47=0,this.b_dot_48=0,this.b_dot_49=0,this.samples=0,this._voiceIndex=0,this.isMuted=1,this.paramInitIndices=[],this.paramInitOrder=[],this.p_83=new Array,this.p_84=new Array,this.p_85=new Array,this.p_86=new Array,this.p_87=new Array,this.p_88=new Array,this.p_89=new Array,this.p_90=new Array,this.p_91=new Array,this.p_92=new Array,this.p_93=new Array,this.p_94=new Array,this.p_95=new Array,this.p_96=new Array,this.p_97=new Array,this.p_98=new Array,this.p_99=new Array,this.p_100=new Array,this.p_101=new Array}getParameterIndexForID(e){return RNBO_UNUSED(e),INVALID_INDEX}getNumMidiInputPorts(){return 0}processMidiEvent(e,t,r,s){}getNumMidiOutputPorts(){return 0}msToSamps(e,t){return e*t*.001}sampsToMs(e){return e*(1e3*this.invsr)}getMaxBlockSize(){return this.maxvs}getSampleRate(){return this.sr}hasFixedVectorSize(){return!1}getNumInputChannels(){return 0}getNumOutputChannels(){return 1}setProbingTarget(e){this.setProbingIndex(-1)}setProbingIndex(e){}getProbingChannels(e){return RNBO_UNUSED(e),0}getDataRef(e){switch(e){case 0:return addressOf(this.RNBODefaultMtofLookupTable256);case 1:return addressOf(this.b_dot_0);case 2:return addressOf(this.b_dot_1);case 3:return addressOf(this.b_dot_2);case 4:return addressOf(this.b_dot_3);case 5:return addressOf(this.b_dot_4);case 6:return addressOf(this.b_dot_5);case 7:return addressOf(this.b_dot_6);case 8:return addressOf(this.b_dot_7);case 9:return addressOf(this.b_dot_8);case 10:return addressOf(this.b_dot_9);case 11:return addressOf(this.b_dot_10);case 12:return addressOf(this.b_dot_11);case 13:return addressOf(this.b_dot_12);case 14:return addressOf(this.b_dot_13);case 15:return addressOf(this.b_dot_14);case 16:return addressOf(this.b_dot_15);case 17:return addressOf(this.b_dot_16);case 18:return addressOf(this.b_dot_17);case 19:return addressOf(this.b_dot_18);case 20:return addressOf(this.b_dot_19);case 21:return addressOf(this.b_dot_20);case 22:return addressOf(this.b_dot_21);case 23:return addressOf(this.b_dot_22);case 24:return addressOf(this.b_dot_23);case 25:return addressOf(this.b_dot_24);case 26:return addressOf(this.b_dot_25);case 27:return addressOf(this.b_dot_26);case 28:return addressOf(this.b_dot_27);case 29:return addressOf(this.b_dot_28);case 30:return addressOf(this.b_dot_29);case 31:return addressOf(this.b_dot_30);case 32:return addressOf(this.b_dot_31);case 33:return addressOf(this.b_dot_32);case 34:return addressOf(this.b_dot_33);case 35:return addressOf(this.b_dot_34);case 36:return addressOf(this.b_dot_35);case 37:return addressOf(this.b_dot_36);case 38:return addressOf(this.b_dot_37);case 39:return addressOf(this.b_dot_38);case 40:return addressOf(this.b_dot_39);case 41:return addressOf(this.b_dot_40);case 42:return addressOf(this.b_dot_41);case 43:return addressOf(this.b_dot_42);case 44:return addressOf(this.b_dot_43);case 45:return addressOf(this.b_dot_44);case 46:return addressOf(this.b_dot_45);case 47:return addressOf(this.b_dot_46);case 48:return addressOf(this.b_dot_47);case 49:return addressOf(this.b_dot_48);case 50:return addressOf(this.b_dot_49);default:return null}}getNumDataRefs(){return 51}fillRNBODefaultMtofLookupTable256(e){var t;let r=(t=new Float64Buffer(e)).getSize();for(let e=0;e<r;e++){let s=512/(r-1)*e-256;t[e]=rnbo_exp(.057762265*(s-69))}}fillDataRef(e,t){switch(e){case 0:this.fillRNBODefaultMtofLookupTable256(t)}}zeroDataRef(e){e.setZero()}processDataViewUpdate(e,t){this.p_83.processDataViewUpdate(e,t),this.p_84.processDataViewUpdate(e,t),this.p_85.processDataViewUpdate(e,t),this.p_86.processDataViewUpdate(e,t),this.p_87.processDataViewUpdate(e,t),this.p_88.processDataViewUpdate(e,t),this.p_89.processDataViewUpdate(e,t),this.p_90.processDataViewUpdate(e,t),this.p_91.processDataViewUpdate(e,t),this.p_92.processDataViewUpdate(e,t),this.p_93.processDataViewUpdate(e,t),this.p_94.processDataViewUpdate(e,t),this.p_95.processDataViewUpdate(e,t),this.p_96.processDataViewUpdate(e,t),this.p_97.processDataViewUpdate(e,t),this.p_98.processDataViewUpdate(e,t),this.p_99.processDataViewUpdate(e,t),this.p_100.processDataViewUpdate(e,t),this.p_101.processDataViewUpdate(e,t)}initialize(){this.RNBODefaultMtofLookupTable256=initDataRef(\"RNBODefaultMtofLookupTable256\",!0,null),this.b_dot_0=initDataRef(\"b.0\",!1,null),this.b_dot_1=initDataRef(\"b.1\",!1,null),this.b_dot_2=initDataRef(\"b.2\",!1,null),this.b_dot_3=initDataRef(\"b.3\",!1,null),this.b_dot_4=initDataRef(\"b.4\",!1,null),this.b_dot_5=initDataRef(\"b.5\",!1,null),this.b_dot_6=initDataRef(\"b.6\",!1,null),this.b_dot_7=initDataRef(\"b.7\",!1,null),this.b_dot_8=initDataRef(\"b.8\",!1,null),this.b_dot_9=initDataRef(\"b.9\",!1,null),this.b_dot_10=initDataRef(\"b.10\",!1,null),this.b_dot_11=initDataRef(\"b.11\",!1,null),this.b_dot_12=initDataRef(\"b.12\",!1,null),this.b_dot_13=initDataRef(\"b.13\",!1,null),this.b_dot_14=initDataRef(\"b.14\",!1,null),this.b_dot_15=initDataRef(\"b.15\",!1,null),this.b_dot_16=initDataRef(\"b.16\",!1,null),this.b_dot_17=initDataRef(\"b.17\",!1,null),this.b_dot_18=initDataRef(\"b.18\",!1,null),this.b_dot_19=initDataRef(\"b.19\",!1,null),this.b_dot_20=initDataRef(\"b.20\",!1,null),this.b_dot_21=initDataRef(\"b.21\",!1,null),this.b_dot_22=initDataRef(\"b.22\",!1,null),this.b_dot_23=initDataRef(\"b.23\",!1,null),this.b_dot_24=initDataRef(\"b.24\",!1,null),this.b_dot_25=initDataRef(\"b.25\",!1,null),this.b_dot_26=initDataRef(\"b.26\",!1,null),this.b_dot_27=initDataRef(\"b.27\",!1,null),this.b_dot_28=initDataRef(\"b.28\",!1,null),this.b_dot_29=initDataRef(\"b.29\",!1,null),this.b_dot_30=initDataRef(\"b.30\",!1,null),this.b_dot_31=initDataRef(\"b.31\",!1,null),this.b_dot_32=initDataRef(\"b.32\",!1,null),this.b_dot_33=initDataRef(\"b.33\",!1,null),this.b_dot_34=initDataRef(\"b.34\",!1,null),this.b_dot_35=initDataRef(\"b.35\",!1,null),this.b_dot_36=initDataRef(\"b.36\",!1,null),this.b_dot_37=initDataRef(\"b.37\",!1,null),this.b_dot_38=initDataRef(\"b.38\",!1,null),this.b_dot_39=initDataRef(\"b.39\",!1,null),this.b_dot_40=initDataRef(\"b.40\",!1,null),this.b_dot_41=initDataRef(\"b.41\",!1,null),this.b_dot_42=initDataRef(\"b.42\",!1,null),this.b_dot_43=initDataRef(\"b.43\",!1,null),this.b_dot_44=initDataRef(\"b.44\",!1,null),this.b_dot_45=initDataRef(\"b.45\",!1,null),this.b_dot_46=initDataRef(\"b.46\",!1,null),this.b_dot_47=initDataRef(\"b.47\",!1,null),this.b_dot_48=initDataRef(\"b.48\",!1,null),this.b_dot_49=initDataRef(\"b.49\",!1,null),this.samples=initMultiRef(this.b_dot_0,this.b_dot_1,this.b_dot_2,this.b_dot_3,this.b_dot_4,this.b_dot_5,this.b_dot_6,this.b_dot_7,this.b_dot_8,this.b_dot_9,this.b_dot_10,this.b_dot_11,this.b_dot_12,this.b_dot_13,this.b_dot_14,this.b_dot_15,this.b_dot_16,this.b_dot_17,this.b_dot_18,this.b_dot_19,this.b_dot_20,this.b_dot_21,this.b_dot_22,this.b_dot_23,this.b_dot_24,this.b_dot_25,this.b_dot_26,this.b_dot_27,this.b_dot_28,this.b_dot_29,this.b_dot_30,this.b_dot_31,this.b_dot_32,this.b_dot_33,this.b_dot_34,this.b_dot_35,this.b_dot_36,this.b_dot_37,this.b_dot_38,this.b_dot_39,this.b_dot_40,this.b_dot_41,this.b_dot_42,this.b_dot_43,this.b_dot_44,this.b_dot_45,this.b_dot_46,this.b_dot_47,this.b_dot_48,this.b_dot_49),this.assign_defaults(),this.setState(),this.RNBODefaultMtofLookupTable256.setIndex(0),this.b_dot_0.setIndex(1),this.b_dot_1.setIndex(2),this.b_dot_2.setIndex(3),this.b_dot_3.setIndex(4),this.b_dot_4.setIndex(5),this.b_dot_5.setIndex(6),this.b_dot_6.setIndex(7),this.b_dot_7.setIndex(8),this.b_dot_8.setIndex(9),this.b_dot_9.setIndex(10),this.b_dot_10.setIndex(11),this.b_dot_11.setIndex(12),this.b_dot_12.setIndex(13),this.b_dot_13.setIndex(14),this.b_dot_14.setIndex(15),this.b_dot_15.setIndex(16),this.b_dot_16.setIndex(17),this.b_dot_17.setIndex(18),this.b_dot_18.setIndex(19),this.b_dot_19.setIndex(20),this.b_dot_20.setIndex(21),this.b_dot_21.setIndex(22),this.b_dot_22.setIndex(23),this.b_dot_23.setIndex(24),this.b_dot_24.setIndex(25),this.b_dot_25.setIndex(26),this.b_dot_26.setIndex(27),this.b_dot_27.setIndex(28),this.b_dot_28.setIndex(29),this.b_dot_29.setIndex(30),this.b_dot_30.setIndex(31),this.b_dot_31.setIndex(32),this.b_dot_32.setIndex(33),this.b_dot_33.setIndex(34),this.b_dot_34.setIndex(35),this.b_dot_35.setIndex(36),this.b_dot_36.setIndex(37),this.b_dot_37.setIndex(38),this.b_dot_38.setIndex(39),this.b_dot_39.setIndex(40),this.b_dot_40.setIndex(41),this.b_dot_41.setIndex(42),this.b_dot_42.setIndex(43),this.b_dot_43.setIndex(44),this.b_dot_44.setIndex(45),this.b_dot_45.setIndex(46),this.b_dot_46.setIndex(47),this.b_dot_47.setIndex(48),this.b_dot_48.setIndex(49),this.b_dot_49.setIndex(50),this.samples.setIndex(-1),this.initializeObjects(),this.allocateDataRefs(),this.startup()}getIsMuted(){return this.isMuted}setIsMuted(e){this.isMuted=e}getPatcherSerial(){return 0}setState(){this.p_83=new RNBOSubpatcher_618,this.p_83.setEngineAndPatcher(this.getEngine(),this),this.p_83.initialize(),this.p_83.setParameterOffset(this.getParameterOffset(this.p_83)),this.p_84=new RNBOSubpatcher_619,this.p_84.setEngineAndPatcher(this.getEngine(),this),this.p_84.initialize(),this.p_84.setParameterOffset(this.getParameterOffset(this.p_84)),this.p_85=new RNBOSubpatcher_620,this.p_85.setEngineAndPatcher(this.getEngine(),this),this.p_85.initialize(),this.p_85.setParameterOffset(this.getParameterOffset(this.p_85)),this.p_86=new RNBOSubpatcher_621,this.p_86.setEngineAndPatcher(this.getEngine(),this),this.p_86.initialize(),this.p_86.setParameterOffset(this.getParameterOffset(this.p_86)),this.p_87=new RNBOSubpatcher_622,this.p_87.setEngineAndPatcher(this.getEngine(),this),this.p_87.initialize(),this.p_87.setParameterOffset(this.getParameterOffset(this.p_87)),this.p_88=new RNBOSubpatcher_623,this.p_88.setEngineAndPatcher(this.getEngine(),this),this.p_88.initialize(),this.p_88.setParameterOffset(this.getParameterOffset(this.p_88)),this.p_89=new RNBOSubpatcher_624,this.p_89.setEngineAndPatcher(this.getEngine(),this),this.p_89.initialize(),this.p_89.setParameterOffset(this.getParameterOffset(this.p_89)),this.p_90=new RNBOSubpatcher_625,this.p_90.setEngineAndPatcher(this.getEngine(),this),this.p_90.initialize(),this.p_90.setParameterOffset(this.getParameterOffset(this.p_90)),this.p_91=new RNBOSubpatcher_626,this.p_91.setEngineAndPatcher(this.getEngine(),this),this.p_91.initialize(),this.p_91.setParameterOffset(this.getParameterOffset(this.p_91)),this.p_92=new RNBOSubpatcher_627,this.p_92.setEngineAndPatcher(this.getEngine(),this),this.p_92.initialize(),this.p_92.setParameterOffset(this.getParameterOffset(this.p_92)),this.p_93=new RNBOSubpatcher_628,this.p_93.setEngineAndPatcher(this.getEngine(),this),this.p_93.initialize(),this.p_93.setParameterOffset(this.getParameterOffset(this.p_93)),this.p_94=new RNBOSubpatcher_629,this.p_94.setEngineAndPatcher(this.getEngine(),this),this.p_94.initialize(),this.p_94.setParameterOffset(this.getParameterOffset(this.p_94)),this.p_95=new RNBOSubpatcher_630,this.p_95.setEngineAndPatcher(this.getEngine(),this),this.p_95.initialize(),this.p_95.setParameterOffset(this.getParameterOffset(this.p_95)),this.p_96=new RNBOSubpatcher_631,this.p_96.setEngineAndPatcher(this.getEngine(),this),this.p_96.initialize(),this.p_96.setParameterOffset(this.getParameterOffset(this.p_96)),this.p_97=new RNBOSubpatcher_632,this.p_97.setEngineAndPatcher(this.getEngine(),this),this.p_97.initialize(),this.p_97.setParameterOffset(this.getParameterOffset(this.p_97)),this.p_98=new RNBOSubpatcher_633,this.p_98.setEngineAndPatcher(this.getEngine(),this),this.p_98.initialize(),this.p_98.setParameterOffset(this.getParameterOffset(this.p_98)),this.p_99=new RNBOSubpatcher_634,this.p_99.setEngineAndPatcher(this.getEngine(),this),this.p_99.initialize(),this.p_99.setParameterOffset(this.getParameterOffset(this.p_99)),this.p_100=new RNBOSubpatcher_635,this.p_100.setEngineAndPatcher(this.getEngine(),this),this.p_100.initialize(),this.p_100.setParameterOffset(this.getParameterOffset(this.p_100)),this.p_101=new RNBOSubpatcher_636,this.p_101.setEngineAndPatcher(this.getEngine(),this),this.p_101.initialize(),this.p_101.setParameterOffset(this.getParameterOffset(this.p_101))}processTempoEvent(e,t){this.updateTime(e),this.globaltransport_setTempo(t,!1)&&(this.p_83.processTempoEvent(e,t),this.p_84.processTempoEvent(e,t),this.p_85.processTempoEvent(e,t),this.p_86.processTempoEvent(e,t),this.p_87.processTempoEvent(e,t),this.p_88.processTempoEvent(e,t),this.p_89.processTempoEvent(e,t),this.p_90.processTempoEvent(e,t),this.p_91.processTempoEvent(e,t),this.p_92.processTempoEvent(e,t),this.p_93.processTempoEvent(e,t),this.p_94.processTempoEvent(e,t),this.p_95.processTempoEvent(e,t),this.p_96.processTempoEvent(e,t),this.p_97.processTempoEvent(e,t),this.p_98.processTempoEvent(e,t),this.p_99.processTempoEvent(e,t),this.p_100.processTempoEvent(e,t),this.p_101.processTempoEvent(e,t),this.translate_01_onTempoChanged(t))}processTransportEvent(e,t){this.updateTime(e),this.globaltransport_setState(t,!1)&&(this.p_83.processTransportEvent(e,t),this.p_84.processTransportEvent(e,t),this.p_85.processTransportEvent(e,t),this.p_86.processTransportEvent(e,t),this.p_87.processTransportEvent(e,t),this.p_88.processTransportEvent(e,t),this.p_89.processTransportEvent(e,t),this.p_90.processTransportEvent(e,t),this.p_91.processTransportEvent(e,t),this.p_92.processTransportEvent(e,t),this.p_93.processTransportEvent(e,t),this.p_94.processTransportEvent(e,t),this.p_95.processTransportEvent(e,t),this.p_96.processTransportEvent(e,t),this.p_97.processTransportEvent(e,t),this.p_98.processTransportEvent(e,t),this.p_99.processTransportEvent(e,t),this.p_100.processTransportEvent(e,t),this.p_101.processTransportEvent(e,t))}processBeatTimeEvent(e,t){this.updateTime(e),this.globaltransport_setBeatTime(t,!1)&&(this.p_83.processBeatTimeEvent(e,t),this.p_84.processBeatTimeEvent(e,t),this.p_85.processBeatTimeEvent(e,t),this.p_86.processBeatTimeEvent(e,t),this.p_87.processBeatTimeEvent(e,t),this.p_88.processBeatTimeEvent(e,t),this.p_89.processBeatTimeEvent(e,t),this.p_90.processBeatTimeEvent(e,t),this.p_91.processBeatTimeEvent(e,t),this.p_92.processBeatTimeEvent(e,t),this.p_93.processBeatTimeEvent(e,t),this.p_94.processBeatTimeEvent(e,t),this.p_95.processBeatTimeEvent(e,t),this.p_96.processBeatTimeEvent(e,t),this.p_97.processBeatTimeEvent(e,t),this.p_98.processBeatTimeEvent(e,t),this.p_99.processBeatTimeEvent(e,t),this.p_100.processBeatTimeEvent(e,t),this.p_101.processBeatTimeEvent(e,t))}onSampleRateChanged(e){this.translate_01_onSampleRateChanged(e)}processTimeSignatureEvent(e,t,r){this.updateTime(e),this.globaltransport_setTimeSignature(t,r,!1)&&(this.p_83.processTimeSignatureEvent(e,t,r),this.p_84.processTimeSignatureEvent(e,t,r),this.p_85.processTimeSignatureEvent(e,t,r),this.p_86.processTimeSignatureEvent(e,t,r),this.p_87.processTimeSignatureEvent(e,t,r),this.p_88.processTimeSignatureEvent(e,t,r),this.p_89.processTimeSignatureEvent(e,t,r),this.p_90.processTimeSignatureEvent(e,t,r),this.p_91.processTimeSignatureEvent(e,t,r),this.p_92.processTimeSignatureEvent(e,t,r),this.p_93.processTimeSignatureEvent(e,t,r),this.p_94.processTimeSignatureEvent(e,t,r),this.p_95.processTimeSignatureEvent(e,t,r),this.p_96.processTimeSignatureEvent(e,t,r),this.p_97.processTimeSignatureEvent(e,t,r),this.p_98.processTimeSignatureEvent(e,t,r),this.p_99.processTimeSignatureEvent(e,t,r),this.p_100.processTimeSignatureEvent(e,t,r),this.p_101.processTimeSignatureEvent(e,t,r))}setParameterValue(e,t,r){RNBO_UNUSED(t),this.updateTime(r),(e-=0)<this.p_83.getNumParameters()&&this.p_83.setParameterValue(e,t,r),(e-=this.p_83.getNumParameters())<this.p_84.getNumParameters()&&this.p_84.setParameterValue(e,t,r),(e-=this.p_84.getNumParameters())<this.p_85.getNumParameters()&&this.p_85.setParameterValue(e,t,r),(e-=this.p_85.getNumParameters())<this.p_86.getNumParameters()&&this.p_86.setParameterValue(e,t,r),(e-=this.p_86.getNumParameters())<this.p_87.getNumParameters()&&this.p_87.setParameterValue(e,t,r),(e-=this.p_87.getNumParameters())<this.p_88.getNumParameters()&&this.p_88.setParameterValue(e,t,r),(e-=this.p_88.getNumParameters())<this.p_89.getNumParameters()&&this.p_89.setParameterValue(e,t,r),(e-=this.p_89.getNumParameters())<this.p_90.getNumParameters()&&this.p_90.setParameterValue(e,t,r),(e-=this.p_90.getNumParameters())<this.p_91.getNumParameters()&&this.p_91.setParameterValue(e,t,r),(e-=this.p_91.getNumParameters())<this.p_92.getNumParameters()&&this.p_92.setParameterValue(e,t,r),(e-=this.p_92.getNumParameters())<this.p_93.getNumParameters()&&this.p_93.setParameterValue(e,t,r),(e-=this.p_93.getNumParameters())<this.p_94.getNumParameters()&&this.p_94.setParameterValue(e,t,r),(e-=this.p_94.getNumParameters())<this.p_95.getNumParameters()&&this.p_95.setParameterValue(e,t,r),(e-=this.p_95.getNumParameters())<this.p_96.getNumParameters()&&this.p_96.setParameterValue(e,t,r),(e-=this.p_96.getNumParameters())<this.p_97.getNumParameters()&&this.p_97.setParameterValue(e,t,r),(e-=this.p_97.getNumParameters())<this.p_98.getNumParameters()&&this.p_98.setParameterValue(e,t,r),(e-=this.p_98.getNumParameters())<this.p_99.getNumParameters()&&this.p_99.setParameterValue(e,t,r),(e-=this.p_99.getNumParameters())<this.p_100.getNumParameters()&&this.p_100.setParameterValue(e,t,r),(e-=this.p_100.getNumParameters())<this.p_101.getNumParameters()&&this.p_101.setParameterValue(e,t,r)}processParameterEvent(e,t,r){this.setParameterValue(e,t,r)}processNormalizedParameterEvent(e,t,r){this.setParameterValueNormalized(e,t,r)}getParameterValue(e){return(e-=0)<this.p_83.getNumParameters()?this.p_83.getParameterValue(e):(e-=this.p_83.getNumParameters())<this.p_84.getNumParameters()?this.p_84.getParameterValue(e):(e-=this.p_84.getNumParameters())<this.p_85.getNumParameters()?this.p_85.getParameterValue(e):(e-=this.p_85.getNumParameters())<this.p_86.getNumParameters()?this.p_86.getParameterValue(e):(e-=this.p_86.getNumParameters())<this.p_87.getNumParameters()?this.p_87.getParameterValue(e):(e-=this.p_87.getNumParameters())<this.p_88.getNumParameters()?this.p_88.getParameterValue(e):(e-=this.p_88.getNumParameters())<this.p_89.getNumParameters()?this.p_89.getParameterValue(e):(e-=this.p_89.getNumParameters())<this.p_90.getNumParameters()?this.p_90.getParameterValue(e):(e-=this.p_90.getNumParameters())<this.p_91.getNumParameters()?this.p_91.getParameterValue(e):(e-=this.p_91.getNumParameters())<this.p_92.getNumParameters()?this.p_92.getParameterValue(e):(e-=this.p_92.getNumParameters())<this.p_93.getNumParameters()?this.p_93.getParameterValue(e):(e-=this.p_93.getNumParameters())<this.p_94.getNumParameters()?this.p_94.getParameterValue(e):(e-=this.p_94.getNumParameters())<this.p_95.getNumParameters()?this.p_95.getParameterValue(e):(e-=this.p_95.getNumParameters())<this.p_96.getNumParameters()?this.p_96.getParameterValue(e):(e-=this.p_96.getNumParameters())<this.p_97.getNumParameters()?this.p_97.getParameterValue(e):(e-=this.p_97.getNumParameters())<this.p_98.getNumParameters()?this.p_98.getParameterValue(e):(e-=this.p_98.getNumParameters())<this.p_99.getNumParameters()?this.p_99.getParameterValue(e):(e-=this.p_99.getNumParameters())<this.p_100.getNumParameters()?this.p_100.getParameterValue(e):(e-=this.p_100.getNumParameters())<this.p_101.getNumParameters()?this.p_101.getParameterValue(e):0}getNumSignalInParameters(){return 0}getNumSignalOutParameters(){return 0}getNumParameters(){return 0+this.p_83.getNumParameters()+this.p_84.getNumParameters()+this.p_85.getNumParameters()+this.p_86.getNumParameters()+this.p_87.getNumParameters()+this.p_88.getNumParameters()+this.p_89.getNumParameters()+this.p_90.getNumParameters()+this.p_91.getNumParameters()+this.p_92.getNumParameters()+this.p_93.getNumParameters()+this.p_94.getNumParameters()+this.p_95.getNumParameters()+this.p_96.getNumParameters()+this.p_97.getNumParameters()+this.p_98.getNumParameters()+this.p_99.getNumParameters()+this.p_100.getNumParameters()+this.p_101.getNumParameters()}getParameterName(e){return(e-=0)<this.p_83.getNumParameters()?this.p_83.getParameterName(e):(e-=this.p_83.getNumParameters())<this.p_84.getNumParameters()?this.p_84.getParameterName(e):(e-=this.p_84.getNumParameters())<this.p_85.getNumParameters()?this.p_85.getParameterName(e):(e-=this.p_85.getNumParameters())<this.p_86.getNumParameters()?this.p_86.getParameterName(e):(e-=this.p_86.getNumParameters())<this.p_87.getNumParameters()?this.p_87.getParameterName(e):(e-=this.p_87.getNumParameters())<this.p_88.getNumParameters()?this.p_88.getParameterName(e):(e-=this.p_88.getNumParameters())<this.p_89.getNumParameters()?this.p_89.getParameterName(e):(e-=this.p_89.getNumParameters())<this.p_90.getNumParameters()?this.p_90.getParameterName(e):(e-=this.p_90.getNumParameters())<this.p_91.getNumParameters()?this.p_91.getParameterName(e):(e-=this.p_91.getNumParameters())<this.p_92.getNumParameters()?this.p_92.getParameterName(e):(e-=this.p_92.getNumParameters())<this.p_93.getNumParameters()?this.p_93.getParameterName(e):(e-=this.p_93.getNumParameters())<this.p_94.getNumParameters()?this.p_94.getParameterName(e):(e-=this.p_94.getNumParameters())<this.p_95.getNumParameters()?this.p_95.getParameterName(e):(e-=this.p_95.getNumParameters())<this.p_96.getNumParameters()?this.p_96.getParameterName(e):(e-=this.p_96.getNumParameters())<this.p_97.getNumParameters()?this.p_97.getParameterName(e):(e-=this.p_97.getNumParameters())<this.p_98.getNumParameters()?this.p_98.getParameterName(e):(e-=this.p_98.getNumParameters())<this.p_99.getNumParameters()?this.p_99.getParameterName(e):(e-=this.p_99.getNumParameters())<this.p_100.getNumParameters()?this.p_100.getParameterName(e):(e-=this.p_100.getNumParameters())<this.p_101.getNumParameters()?this.p_101.getParameterName(e):\"bogus\"}getParameterId(e){return(e-=0)<this.p_83.getNumParameters()?this.p_83.getParameterId(e):(e-=this.p_83.getNumParameters())<this.p_84.getNumParameters()?this.p_84.getParameterId(e):(e-=this.p_84.getNumParameters())<this.p_85.getNumParameters()?this.p_85.getParameterId(e):(e-=this.p_85.getNumParameters())<this.p_86.getNumParameters()?this.p_86.getParameterId(e):(e-=this.p_86.getNumParameters())<this.p_87.getNumParameters()?this.p_87.getParameterId(e):(e-=this.p_87.getNumParameters())<this.p_88.getNumParameters()?this.p_88.getParameterId(e):(e-=this.p_88.getNumParameters())<this.p_89.getNumParameters()?this.p_89.getParameterId(e):(e-=this.p_89.getNumParameters())<this.p_90.getNumParameters()?this.p_90.getParameterId(e):(e-=this.p_90.getNumParameters())<this.p_91.getNumParameters()?this.p_91.getParameterId(e):(e-=this.p_91.getNumParameters())<this.p_92.getNumParameters()?this.p_92.getParameterId(e):(e-=this.p_92.getNumParameters())<this.p_93.getNumParameters()?this.p_93.getParameterId(e):(e-=this.p_93.getNumParameters())<this.p_94.getNumParameters()?this.p_94.getParameterId(e):(e-=this.p_94.getNumParameters())<this.p_95.getNumParameters()?this.p_95.getParameterId(e):(e-=this.p_95.getNumParameters())<this.p_96.getNumParameters()?this.p_96.getParameterId(e):(e-=this.p_96.getNumParameters())<this.p_97.getNumParameters()?this.p_97.getParameterId(e):(e-=this.p_97.getNumParameters())<this.p_98.getNumParameters()?this.p_98.getParameterId(e):(e-=this.p_98.getNumParameters())<this.p_99.getNumParameters()?this.p_99.getParameterId(e):(e-=this.p_99.getNumParameters())<this.p_100.getNumParameters()?this.p_100.getParameterId(e):(e-=this.p_100.getNumParameters())<this.p_101.getNumParameters()?this.p_101.getParameterId(e):\"bogus\"}getParameterInfo(e,t){(e-=0)<this.p_83.getNumParameters()&&this.p_83.getParameterInfo(e,t),(e-=this.p_83.getNumParameters())<this.p_84.getNumParameters()&&this.p_84.getParameterInfo(e,t),(e-=this.p_84.getNumParameters())<this.p_85.getNumParameters()&&this.p_85.getParameterInfo(e,t),(e-=this.p_85.getNumParameters())<this.p_86.getNumParameters()&&this.p_86.getParameterInfo(e,t),(e-=this.p_86.getNumParameters())<this.p_87.getNumParameters()&&this.p_87.getParameterInfo(e,t),(e-=this.p_87.getNumParameters())<this.p_88.getNumParameters()&&this.p_88.getParameterInfo(e,t),(e-=this.p_88.getNumParameters())<this.p_89.getNumParameters()&&this.p_89.getParameterInfo(e,t),(e-=this.p_89.getNumParameters())<this.p_90.getNumParameters()&&this.p_90.getParameterInfo(e,t),(e-=this.p_90.getNumParameters())<this.p_91.getNumParameters()&&this.p_91.getParameterInfo(e,t),(e-=this.p_91.getNumParameters())<this.p_92.getNumParameters()&&this.p_92.getParameterInfo(e,t),(e-=this.p_92.getNumParameters())<this.p_93.getNumParameters()&&this.p_93.getParameterInfo(e,t),(e-=this.p_93.getNumParameters())<this.p_94.getNumParameters()&&this.p_94.getParameterInfo(e,t),(e-=this.p_94.getNumParameters())<this.p_95.getNumParameters()&&this.p_95.getParameterInfo(e,t),(e-=this.p_95.getNumParameters())<this.p_96.getNumParameters()&&this.p_96.getParameterInfo(e,t),(e-=this.p_96.getNumParameters())<this.p_97.getNumParameters()&&this.p_97.getParameterInfo(e,t),(e-=this.p_97.getNumParameters())<this.p_98.getNumParameters()&&this.p_98.getParameterInfo(e,t),(e-=this.p_98.getNumParameters())<this.p_99.getNumParameters()&&this.p_99.getParameterInfo(e,t),(e-=this.p_99.getNumParameters())<this.p_100.getNumParameters()&&this.p_100.getParameterInfo(e,t),(e-=this.p_100.getNumParameters())<this.p_101.getNumParameters()&&this.p_101.getParameterInfo(e,t)}sendParameter(e){this.getEngine().notifyParameterValueChanged(e,this.getParameterValue(e))}getParameterOffset(e){return e==this.p_83?0:e==this.p_84?0+this.p_83.getNumParameters():e==this.p_85?0+this.p_83.getNumParameters()+this.p_84.getNumParameters():e==this.p_86?0+this.p_83.getNumParameters()+this.p_84.getNumParameters()+this.p_85.getNumParameters():e==this.p_87?0+this.p_83.getNumParameters()+this.p_84.getNumParameters()+this.p_85.getNumParameters()+this.p_86.getNumParameters():e==this.p_88?0+this.p_83.getNumParameters()+this.p_84.getNumParameters()+this.p_85.getNumParameters()+this.p_86.getNumParameters()+this.p_87.getNumParameters():e==this.p_89?0+this.p_83.getNumParameters()+this.p_84.getNumParameters()+this.p_85.getNumParameters()+this.p_86.getNumParameters()+this.p_87.getNumParameters()+this.p_88.getNumParameters():e==this.p_90?0+this.p_83.getNumParameters()+this.p_84.getNumParameters()+this.p_85.getNumParameters()+this.p_86.getNumParameters()+this.p_87.getNumParameters()+this.p_88.getNumParameters()+this.p_89.getNumParameters():e==this.p_91?0+this.p_83.getNumParameters()+this.p_84.getNumParameters()+this.p_85.getNumParameters()+this.p_86.getNumParameters()+this.p_87.getNumParameters()+this.p_88.getNumParameters()+this.p_89.getNumParameters()+this.p_90.getNumParameters():e==this.p_92?0+this.p_83.getNumParameters()+this.p_84.getNumParameters()+this.p_85.getNumParameters()+this.p_86.getNumParameters()+this.p_87.getNumParameters()+this.p_88.getNumParameters()+this.p_89.getNumParameters()+this.p_90.getNumParameters()+this.p_91.getNumParameters():e==this.p_93?0+this.p_83.getNumParameters()+this.p_84.getNumParameters()+this.p_85.getNumParameters()+this.p_86.getNumParameters()+this.p_87.getNumParameters()+this.p_88.getNumParameters()+this.p_89.getNumParameters()+this.p_90.getNumParameters()+this.p_91.getNumParameters()+this.p_92.getNumParameters():e==this.p_94?0+this.p_83.getNumParameters()+this.p_84.getNumParameters()+this.p_85.getNumParameters()+this.p_86.getNumParameters()+this.p_87.getNumParameters()+this.p_88.getNumParameters()+this.p_89.getNumParameters()+this.p_90.getNumParameters()+this.p_91.getNumParameters()+this.p_92.getNumParameters()+this.p_93.getNumParameters():e==this.p_95?0+this.p_83.getNumParameters()+this.p_84.getNumParameters()+this.p_85.getNumParameters()+this.p_86.getNumParameters()+this.p_87.getNumParameters()+this.p_88.getNumParameters()+this.p_89.getNumParameters()+this.p_90.getNumParameters()+this.p_91.getNumParameters()+this.p_92.getNumParameters()+this.p_93.getNumParameters()+this.p_94.getNumParameters():e==this.p_96?0+this.p_83.getNumParameters()+this.p_84.getNumParameters()+this.p_85.getNumParameters()+this.p_86.getNumParameters()+this.p_87.getNumParameters()+this.p_88.getNumParameters()+this.p_89.getNumParameters()+this.p_90.getNumParameters()+this.p_91.getNumParameters()+this.p_92.getNumParameters()+this.p_93.getNumParameters()+this.p_94.getNumParameters()+this.p_95.getNumParameters():e==this.p_97?0+this.p_83.getNumParameters()+this.p_84.getNumParameters()+this.p_85.getNumParameters()+this.p_86.getNumParameters()+this.p_87.getNumParameters()+this.p_88.getNumParameters()+this.p_89.getNumParameters()+this.p_90.getNumParameters()+this.p_91.getNumParameters()+this.p_92.getNumParameters()+this.p_93.getNumParameters()+this.p_94.getNumParameters()+this.p_95.getNumParameters()+this.p_96.getNumParameters():e==this.p_98?0+this.p_83.getNumParameters()+this.p_84.getNumParameters()+this.p_85.getNumParameters()+this.p_86.getNumParameters()+this.p_87.getNumParameters()+this.p_88.getNumParameters()+this.p_89.getNumParameters()+this.p_90.getNumParameters()+this.p_91.getNumParameters()+this.p_92.getNumParameters()+this.p_93.getNumParameters()+this.p_94.getNumParameters()+this.p_95.getNumParameters()+this.p_96.getNumParameters()+this.p_97.getNumParameters():e==this.p_99?0+this.p_83.getNumParameters()+this.p_84.getNumParameters()+this.p_85.getNumParameters()+this.p_86.getNumParameters()+this.p_87.getNumParameters()+this.p_88.getNumParameters()+this.p_89.getNumParameters()+this.p_90.getNumParameters()+this.p_91.getNumParameters()+this.p_92.getNumParameters()+this.p_93.getNumParameters()+this.p_94.getNumParameters()+this.p_95.getNumParameters()+this.p_96.getNumParameters()+this.p_97.getNumParameters()+this.p_98.getNumParameters():e==this.p_100?0+this.p_83.getNumParameters()+this.p_84.getNumParameters()+this.p_85.getNumParameters()+this.p_86.getNumParameters()+this.p_87.getNumParameters()+this.p_88.getNumParameters()+this.p_89.getNumParameters()+this.p_90.getNumParameters()+this.p_91.getNumParameters()+this.p_92.getNumParameters()+this.p_93.getNumParameters()+this.p_94.getNumParameters()+this.p_95.getNumParameters()+this.p_96.getNumParameters()+this.p_97.getNumParameters()+this.p_98.getNumParameters()+this.p_99.getNumParameters():e==this.p_101?0+this.p_83.getNumParameters()+this.p_84.getNumParameters()+this.p_85.getNumParameters()+this.p_86.getNumParameters()+this.p_87.getNumParameters()+this.p_88.getNumParameters()+this.p_89.getNumParameters()+this.p_90.getNumParameters()+this.p_91.getNumParameters()+this.p_92.getNumParameters()+this.p_93.getNumParameters()+this.p_94.getNumParameters()+this.p_95.getNumParameters()+this.p_96.getNumParameters()+this.p_97.getNumParameters()+this.p_98.getNumParameters()+this.p_99.getNumParameters()+this.p_100.getNumParameters():0}applyStepsToNormalizedParameterValue(e,t){if(1==t)e>0&&(e=1);else{let r=1/(t-1);e=1*rnbo_fround(e/r*1/1)*r}return e}convertToNormalizedParameterValue(e,t){return(e-=0)<this.p_83.getNumParameters()?this.p_83.convertToNormalizedParameterValue(e,t):(e-=this.p_83.getNumParameters())<this.p_84.getNumParameters()?this.p_84.convertToNormalizedParameterValue(e,t):(e-=this.p_84.getNumParameters())<this.p_85.getNumParameters()?this.p_85.convertToNormalizedParameterValue(e,t):(e-=this.p_85.getNumParameters())<this.p_86.getNumParameters()?this.p_86.convertToNormalizedParameterValue(e,t):(e-=this.p_86.getNumParameters())<this.p_87.getNumParameters()?this.p_87.convertToNormalizedParameterValue(e,t):(e-=this.p_87.getNumParameters())<this.p_88.getNumParameters()?this.p_88.convertToNormalizedParameterValue(e,t):(e-=this.p_88.getNumParameters())<this.p_89.getNumParameters()?this.p_89.convertToNormalizedParameterValue(e,t):(e-=this.p_89.getNumParameters())<this.p_90.getNumParameters()?this.p_90.convertToNormalizedParameterValue(e,t):(e-=this.p_90.getNumParameters())<this.p_91.getNumParameters()?this.p_91.convertToNormalizedParameterValue(e,t):(e-=this.p_91.getNumParameters())<this.p_92.getNumParameters()?this.p_92.convertToNormalizedParameterValue(e,t):(e-=this.p_92.getNumParameters())<this.p_93.getNumParameters()?this.p_93.convertToNormalizedParameterValue(e,t):(e-=this.p_93.getNumParameters())<this.p_94.getNumParameters()?this.p_94.convertToNormalizedParameterValue(e,t):(e-=this.p_94.getNumParameters())<this.p_95.getNumParameters()?this.p_95.convertToNormalizedParameterValue(e,t):(e-=this.p_95.getNumParameters())<this.p_96.getNumParameters()?this.p_96.convertToNormalizedParameterValue(e,t):(e-=this.p_96.getNumParameters())<this.p_97.getNumParameters()?this.p_97.convertToNormalizedParameterValue(e,t):(e-=this.p_97.getNumParameters())<this.p_98.getNumParameters()?this.p_98.convertToNormalizedParameterValue(e,t):(e-=this.p_98.getNumParameters())<this.p_99.getNumParameters()?this.p_99.convertToNormalizedParameterValue(e,t):(e-=this.p_99.getNumParameters())<this.p_100.getNumParameters()?this.p_100.convertToNormalizedParameterValue(e,t):(e-=this.p_100.getNumParameters())<this.p_101.getNumParameters()?this.p_101.convertToNormalizedParameterValue(e,t):t}convertFromNormalizedParameterValue(e,t){return t=t<0?0:t>1?1:t,(e-=0)<this.p_83.getNumParameters()?this.p_83.convertFromNormalizedParameterValue(e,t):(e-=this.p_83.getNumParameters())<this.p_84.getNumParameters()?this.p_84.convertFromNormalizedParameterValue(e,t):(e-=this.p_84.getNumParameters())<this.p_85.getNumParameters()?this.p_85.convertFromNormalizedParameterValue(e,t):(e-=this.p_85.getNumParameters())<this.p_86.getNumParameters()?this.p_86.convertFromNormalizedParameterValue(e,t):(e-=this.p_86.getNumParameters())<this.p_87.getNumParameters()?this.p_87.convertFromNormalizedParameterValue(e,t):(e-=this.p_87.getNumParameters())<this.p_88.getNumParameters()?this.p_88.convertFromNormalizedParameterValue(e,t):(e-=this.p_88.getNumParameters())<this.p_89.getNumParameters()?this.p_89.convertFromNormalizedParameterValue(e,t):(e-=this.p_89.getNumParameters())<this.p_90.getNumParameters()?this.p_90.convertFromNormalizedParameterValue(e,t):(e-=this.p_90.getNumParameters())<this.p_91.getNumParameters()?this.p_91.convertFromNormalizedParameterValue(e,t):(e-=this.p_91.getNumParameters())<this.p_92.getNumParameters()?this.p_92.convertFromNormalizedParameterValue(e,t):(e-=this.p_92.getNumParameters())<this.p_93.getNumParameters()?this.p_93.convertFromNormalizedParameterValue(e,t):(e-=this.p_93.getNumParameters())<this.p_94.getNumParameters()?this.p_94.convertFromNormalizedParameterValue(e,t):(e-=this.p_94.getNumParameters())<this.p_95.getNumParameters()?this.p_95.convertFromNormalizedParameterValue(e,t):(e-=this.p_95.getNumParameters())<this.p_96.getNumParameters()?this.p_96.convertFromNormalizedParameterValue(e,t):(e-=this.p_96.getNumParameters())<this.p_97.getNumParameters()?this.p_97.convertFromNormalizedParameterValue(e,t):(e-=this.p_97.getNumParameters())<this.p_98.getNumParameters()?this.p_98.convertFromNormalizedParameterValue(e,t):(e-=this.p_98.getNumParameters())<this.p_99.getNumParameters()?this.p_99.convertFromNormalizedParameterValue(e,t):(e-=this.p_99.getNumParameters())<this.p_100.getNumParameters()?this.p_100.convertFromNormalizedParameterValue(e,t):(e-=this.p_100.getNumParameters())<this.p_101.getNumParameters()?this.p_101.convertFromNormalizedParameterValue(e,t):t}constrainParameterValue(e,t){return(e-=0)<this.p_83.getNumParameters()?this.p_83.constrainParameterValue(e,t):(e-=this.p_83.getNumParameters())<this.p_84.getNumParameters()?this.p_84.constrainParameterValue(e,t):(e-=this.p_84.getNumParameters())<this.p_85.getNumParameters()?this.p_85.constrainParameterValue(e,t):(e-=this.p_85.getNumParameters())<this.p_86.getNumParameters()?this.p_86.constrainParameterValue(e,t):(e-=this.p_86.getNumParameters())<this.p_87.getNumParameters()?this.p_87.constrainParameterValue(e,t):(e-=this.p_87.getNumParameters())<this.p_88.getNumParameters()?this.p_88.constrainParameterValue(e,t):(e-=this.p_88.getNumParameters())<this.p_89.getNumParameters()?this.p_89.constrainParameterValue(e,t):(e-=this.p_89.getNumParameters())<this.p_90.getNumParameters()?this.p_90.constrainParameterValue(e,t):(e-=this.p_90.getNumParameters())<this.p_91.getNumParameters()?this.p_91.constrainParameterValue(e,t):(e-=this.p_91.getNumParameters())<this.p_92.getNumParameters()?this.p_92.constrainParameterValue(e,t):(e-=this.p_92.getNumParameters())<this.p_93.getNumParameters()?this.p_93.constrainParameterValue(e,t):(e-=this.p_93.getNumParameters())<this.p_94.getNumParameters()?this.p_94.constrainParameterValue(e,t):(e-=this.p_94.getNumParameters())<this.p_95.getNumParameters()?this.p_95.constrainParameterValue(e,t):(e-=this.p_95.getNumParameters())<this.p_96.getNumParameters()?this.p_96.constrainParameterValue(e,t):(e-=this.p_96.getNumParameters())<this.p_97.getNumParameters()?this.p_97.constrainParameterValue(e,t):(e-=this.p_97.getNumParameters())<this.p_98.getNumParameters()?this.p_98.constrainParameterValue(e,t):(e-=this.p_98.getNumParameters())<this.p_99.getNumParameters()?this.p_99.constrainParameterValue(e,t):(e-=this.p_99.getNumParameters())<this.p_100.getNumParameters()?this.p_100.constrainParameterValue(e,t):(e-=this.p_100.getNumParameters())<this.p_101.getNumParameters()?this.p_101.constrainParameterValue(e,t):t}scheduleParamInit(e,t){this.paramInitIndices.push(e),this.paramInitOrder.push(t)}processParamInitEvents(){this.listquicksort(this.paramInitOrder,this.paramInitIndices,0,this.paramInitOrder.length-1,!0);for(var e=0;e<this.paramInitOrder.length;e++)this.getEngine().scheduleParameterChange(this.paramInitIndices[e],this.getParameterValue(this.paramInitIndices[e]),0)}processClockEvent(e,t,r,s){switch(RNBO_UNUSED(s),RNBO_UNUSED(r),this.updateTime(e),t){case 870225038:this.loadmess_08_startupbang_bang();break;case 1733719949:this.loadmess_09_startupbang_bang();break;case-1697752436:this.loadmess_10_startupbang_bang();break;case-1720259695:this.loadmess_11_startupbang_bang();break;case-611950441:this.edge_01_onout_bang();break;case-1584063977:this.edge_01_offout_bang();break;case-1313779944:this.edge_02_onout_bang();break;case 1151781846:this.edge_02_offout_bang();break;case 6730127:this.loadmess_12_startupbang_bang();break;case-617739833:this.loadmess_13_startupbang_bang();break;case 1086742730:this.loadmess_14_startupbang_bang();break;case-1481234744:this.loadmess_15_startupbang_bang();break;case 29237386:this.loadmess_16_startupbang_bang();break;case-834257525:this.loadmess_17_startupbang_bang();break;case 1950237641:this.loadmess_18_startupbang_bang();break;case-856764784:this.loadmess_19_startupbang_bang();break;case 892732297:this.loadmess_20_startupbang_bang()}}processOutletAtCurrentTime(e,t,r){}processOutletEvent(e,t,r,s){this.updateTime(s),this.processOutletAtCurrentTime(e,t,r)}sendOutlet(e,t){this.getEngine().sendOutlet(this,e,t)}processNumMessage(e,t,r,s){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"fm1_listener\"):this.inport_65_value_number_set(s);break;case TAG(\"fm1_unision\"):this.inport_66_value_number_set(s);break;case TAG(\"fm2_listener\"):this.inport_67_value_number_set(s);break;case TAG(\"fm2_unision\"):this.inport_68_value_number_set(s);break;case TAG(\"perc_listener\"):this.inport_69_value_number_set(s);break;case TAG(\"speed\"):this.inport_70_value_number_set(s);break;case TAG(\"b_mode\"):this.inport_71_value_number_set(s);break;case TAG(\"state\"):this.inport_72_value_number_set(s);break;case TAG(\"b_steps\"):this.inport_73_value_number_set(s);break;case TAG(\"c_listener\"):this.inport_74_value_number_set(s);break;case TAG(\"c_mode\"):this.inport_75_value_number_set(s);break;case TAG(\"c_steps\"):this.inport_76_value_number_set(s);break;case TAG(\"a_mode\"):this.inport_77_value_number_set(s);break;case TAG(\"a_steps\"):this.inport_78_value_number_set(s)}this.p_83.processNumMessage(e,t,r,s),this.p_84.processNumMessage(e,t,r,s),this.p_85.processNumMessage(e,t,r,s),this.p_86.processNumMessage(e,t,r,s),this.p_87.processNumMessage(e,t,r,s),this.p_88.processNumMessage(e,t,r,s),this.p_89.processNumMessage(e,t,r,s),this.p_90.processNumMessage(e,t,r,s),this.p_91.processNumMessage(e,t,r,s),this.p_92.processNumMessage(e,t,r,s),this.p_93.processNumMessage(e,t,r,s),this.p_94.processNumMessage(e,t,r,s),this.p_95.processNumMessage(e,t,r,s),this.p_96.processNumMessage(e,t,r,s),this.p_97.processNumMessage(e,t,r,s),this.p_98.processNumMessage(e,t,r,s),this.p_99.processNumMessage(e,t,r,s),this.p_100.processNumMessage(e,t,r,s),this.p_101.processNumMessage(e,t,r,s)}processListMessage(e,t,r,s){switch(RNBO_UNUSED(t),this.updateTime(r),e){case TAG(\"fm1_listener\"):this.inport_65_value_list_set(s);break;case TAG(\"fm1_unision\"):this.inport_66_value_list_set(s);break;case TAG(\"fm2_listener\"):this.inport_67_value_list_set(s);break;case TAG(\"fm2_unision\"):this.inport_68_value_list_set(s);break;case TAG(\"perc_listener\"):this.inport_69_value_list_set(s);break;case TAG(\"speed\"):this.inport_70_value_list_set(s);break;case TAG(\"b_mode\"):this.inport_71_value_list_set(s);break;case TAG(\"state\"):this.inport_72_value_list_set(s);break;case TAG(\"b_steps\"):this.inport_73_value_list_set(s);break;case TAG(\"c_listener\"):this.inport_74_value_list_set(s);break;case TAG(\"c_mode\"):this.inport_75_value_list_set(s);break;case TAG(\"c_steps\"):this.inport_76_value_list_set(s);break;case TAG(\"a_mode\"):this.inport_77_value_list_set(s);break;case TAG(\"a_steps\"):this.inport_78_value_list_set(s)}this.p_83.processListMessage(e,t,r,s),this.p_84.processListMessage(e,t,r,s),this.p_85.processListMessage(e,t,r,s),this.p_86.processListMessage(e,t,r,s),this.p_87.processListMessage(e,t,r,s),this.p_88.processListMessage(e,t,r,s),this.p_89.processListMessage(e,t,r,s),this.p_90.processListMessage(e,t,r,s),this.p_91.processListMessage(e,t,r,s),this.p_92.processListMessage(e,t,r,s),this.p_93.processListMessage(e,t,r,s),this.p_94.processListMessage(e,t,r,s),this.p_95.processListMessage(e,t,r,s),this.p_96.processListMessage(e,t,r,s),this.p_97.processListMessage(e,t,r,s),this.p_98.processListMessage(e,t,r,s),this.p_99.processListMessage(e,t,r,s),this.p_100.processListMessage(e,t,r,s),this.p_101.processListMessage(e,t,r,s)}processBangMessage(e,t,r){switch(this.updateTime(r),e){case TAG(\"fm1_listener\"):this.inport_65_value_bang_bang();break;case TAG(\"startupbang\"):TAG(\"loadmess_obj-33\")==t&&this.loadmess_08_startupbang_bang(),TAG(\"loadmess_obj-35\")==t&&this.loadmess_09_startupbang_bang(),TAG(\"loadmess_obj-38\")==t&&this.loadmess_10_startupbang_bang(),TAG(\"loadmess_obj-7\")==t&&this.loadmess_11_startupbang_bang(),TAG(\"loadmess_obj-32\")==t&&this.loadmess_12_startupbang_bang(),TAG(\"loadmess_obj-1\")==t&&this.loadmess_13_startupbang_bang(),TAG(\"loadmess_obj-51\")==t&&this.loadmess_14_startupbang_bang(),TAG(\"loadmess_obj-2\")==t&&this.loadmess_15_startupbang_bang(),TAG(\"loadmess_obj-45\")==t&&this.loadmess_16_startupbang_bang(),TAG(\"loadmess_obj-40\")==t&&this.loadmess_17_startupbang_bang(),TAG(\"loadmess_obj-26\")==t&&this.loadmess_18_startupbang_bang(),TAG(\"loadmess_obj-31\")==t&&this.loadmess_19_startupbang_bang(),TAG(\"loadmess_obj-56\")==t&&this.loadmess_20_startupbang_bang();break;case TAG(\"fm1_unision\"):this.inport_66_value_bang_bang();break;case TAG(\"fm2_listener\"):this.inport_67_value_bang_bang();break;case TAG(\"fm2_unision\"):this.inport_68_value_bang_bang();break;case TAG(\"perc_listener\"):this.inport_69_value_bang_bang();break;case TAG(\"speed\"):this.inport_70_value_bang_bang();break;case TAG(\"b_mode\"):this.inport_71_value_bang_bang();break;case TAG(\"state\"):this.inport_72_value_bang_bang();break;case TAG(\"b_steps\"):this.inport_73_value_bang_bang();break;case TAG(\"c_listener\"):this.inport_74_value_bang_bang();break;case TAG(\"c_mode\"):this.inport_75_value_bang_bang();break;case TAG(\"c_steps\"):this.inport_76_value_bang_bang();break;case TAG(\"a_mode\"):this.inport_77_value_bang_bang();break;case TAG(\"a_steps\"):this.inport_78_value_bang_bang()}this.p_83.processBangMessage(e,t,r),this.p_84.processBangMessage(e,t,r),this.p_85.processBangMessage(e,t,r),this.p_86.processBangMessage(e,t,r),this.p_87.processBangMessage(e,t,r),this.p_88.processBangMessage(e,t,r),this.p_89.processBangMessage(e,t,r),this.p_90.processBangMessage(e,t,r),this.p_91.processBangMessage(e,t,r),this.p_92.processBangMessage(e,t,r),this.p_93.processBangMessage(e,t,r),this.p_94.processBangMessage(e,t,r),this.p_95.processBangMessage(e,t,r),this.p_96.processBangMessage(e,t,r),this.p_97.processBangMessage(e,t,r),this.p_98.processBangMessage(e,t,r),this.p_99.processBangMessage(e,t,r),this.p_100.processBangMessage(e,t,r),this.p_101.processBangMessage(e,t,r)}resolveTag(e){switch(e){case TAG(\"pattern\"):return\"pattern\";case TAG(\"\"):return\"\";case TAG(\"c_event\"):return\"c_event\";case TAG(\"b_event\"):return\"b_event\";case TAG(\"a_event\"):return\"a_event\";case TAG(\"b_index\"):return\"b_index\";case TAG(\"c_index\"):return\"c_index\";case TAG(\"fm1_listener\"):return\"fm1_listener\";case TAG(\"startupbang\"):return\"startupbang\";case TAG(\"loadmess_obj-33\"):return\"loadmess_obj-33\";case TAG(\"fm1_unision\"):return\"fm1_unision\";case TAG(\"fm2_listener\"):return\"fm2_listener\";case TAG(\"loadmess_obj-35\"):return\"loadmess_obj-35\";case TAG(\"fm2_unision\"):return\"fm2_unision\";case TAG(\"perc_listener\"):return\"perc_listener\";case TAG(\"loadmess_obj-38\"):return\"loadmess_obj-38\";case TAG(\"speed\"):return\"speed\";case TAG(\"loadmess_obj-7\"):return\"loadmess_obj-7\";case TAG(\"b_mode\"):return\"b_mode\";case TAG(\"state\"):return\"state\";case TAG(\"b_steps\"):return\"b_steps\";case TAG(\"loadmess_obj-32\"):return\"loadmess_obj-32\";case TAG(\"loadmess_obj-1\"):return\"loadmess_obj-1\";case TAG(\"loadmess_obj-51\"):return\"loadmess_obj-51\";case TAG(\"c_listener\"):return\"c_listener\";case TAG(\"loadmess_obj-2\"):return\"loadmess_obj-2\";case TAG(\"c_mode\"):return\"c_mode\";case TAG(\"c_steps\"):return\"c_steps\";case TAG(\"a_mode\"):return\"a_mode\";case TAG(\"loadmess_obj-45\"):return\"loadmess_obj-45\";case TAG(\"a_steps\"):return\"a_steps\";case TAG(\"loadmess_obj-40\"):return\"loadmess_obj-40\";case TAG(\"loadmess_obj-26\"):return\"loadmess_obj-26\";case TAG(\"loadmess_obj-31\"):return\"loadmess_obj-31\";case TAG(\"loadmess_obj-56\"):return\"loadmess_obj-56\"}var t=this.p_83.resolveTag(e);if(t)return t;var r=this.p_84.resolveTag(e);if(r)return r;var s=this.p_85.resolveTag(e);if(s)return s;var a=this.p_86.resolveTag(e);if(a)return a;var i=this.p_87.resolveTag(e);if(i)return i;var n=this.p_88.resolveTag(e);if(n)return n;var m=this.p_89.resolveTag(e);if(m)return m;var u=this.p_90.resolveTag(e);if(u)return u;var h=this.p_91.resolveTag(e);if(h)return h;var p=this.p_92.resolveTag(e);if(p)return p;var _=this.p_93.resolveTag(e);if(_)return _;var g=this.p_94.resolveTag(e);if(g)return g;var o=this.p_95.resolveTag(e);if(o)return o;var P=this.p_96.resolveTag(e);if(P)return P;var l=this.p_97.resolveTag(e);if(l)return l;var c=this.p_98.resolveTag(e);if(c)return c;var d=this.p_99.resolveTag(e);if(d)return d;var N=this.p_100.resolveTag(e);if(N)return N;var f=this.p_101.resolveTag(e);return f||\"\"}getNumMessages(){return 81}getMessageInfo(e){switch(e){case 0:return{tag:\"pattern\",type:Outport};case 1:return{tag:\"c_event\",type:Outport};case 2:return{tag:\"b_event\",type:Outport};case 3:return{tag:\"a_event\",type:Outport};case 4:return{tag:\"b_index\",type:Outport};case 5:return{tag:\"c_index\",type:Outport};case 6:return{tag:\"fm1_listener\",type:Inport};case 7:return{tag:\"fm1_unision\",type:Inport};case 8:return{tag:\"fm2_listener\",type:Inport};case 9:return{tag:\"fm2_unision\",type:Inport};case 10:return{tag:\"perc_listener\",type:Inport};case 11:return{tag:\"speed\",type:Inport};case 12:return{tag:\"b_mode\",type:Inport};case 13:return{tag:\"state\",type:Inport};case 14:return{tag:\"b_steps\",type:Inport};case 15:return{tag:\"c_listener\",type:Inport};case 16:return{tag:\"c_mode\",type:Inport};case 17:return{tag:\"c_steps\",type:Inport};case 18:return{tag:\"a_mode\",type:Inport};case 19:return{tag:\"a_steps\",type:Inport};case 20:return{tag:\"filter\",type:Outport};case 21:return{tag:\"fm1_r_freq\",type:Inport};case 22:return{tag:\"fm1_r_c1ratio\",type:Inport};case 23:return{tag:\"fm1_r_c2ratio\",type:Inport};case 24:return{tag:\"fm1_r_c3ratio\",type:Inport};case 25:return{tag:\"fm1_r_3to1\",type:Inport};case 26:return{tag:\"fm1_r_2to1\",type:Inport};case 27:return{tag:\"fm1_r_3to2\",type:Inport};case 28:return{tag:\"fm1_r_c1release\",type:Inport};case 29:return{tag:\"fm1_r_c2release\",type:Inport};case 30:return{tag:\"fm1_r_c3release\",type:Inport};case 31:return{tag:\"fm1_r_op1gain\",type:Inport};case 32:return{tag:\"fm1_r_op2gain\",type:Inport};case 33:return{tag:\"fm1_r_op3gain\",type:Inport};case 34:return{tag:\"fm1_r_gain\",type:Inport};case 35:return{tag:\"fm1_freq\",type:Inport};case 36:return{tag:\"fm1_c1ratio\",type:Inport};case 37:return{tag:\"fm1_c2ratio\",type:Inport};case 38:return{tag:\"fm1_c3ratio\",type:Inport};case 39:return{tag:\"fm1_3to1\",type:Inport};case 40:return{tag:\"fm1_2to1\",type:Inport};case 41:return{tag:\"fm1_3to2\",type:Inport};case 42:return{tag:\"fm1_c1release\",type:Inport};case 43:return{tag:\"fm1_c2release\",type:Inport};case 44:return{tag:\"fm1_c3release\",type:Inport};case 45:return{tag:\"fm1_op1gain\",type:Inport};case 46:return{tag:\"fm1_op2gain\",type:Inport};case 47:return{tag:\"fm1_op3gain\",type:Inport};case 48:return{tag:\"fm1_gain\",type:Inport};case 49:return{tag:\"fm2_freq\",type:Inport};case 50:return{tag:\"fm2_c1ratio\",type:Inport};case 51:return{tag:\"fm2_c2ratio\",type:Inport};case 52:return{tag:\"fm2_c3ratio\",type:Inport};case 53:return{tag:\"fm2_3to1\",type:Inport};case 54:return{tag:\"fm2_2to1\",type:Inport};case 55:return{tag:\"fm2_3to2\",type:Inport};case 56:return{tag:\"fm2_c1release\",type:Inport};case 57:return{tag:\"fm2_c2release\",type:Inport};case 58:return{tag:\"fm2_c3release\",type:Inport};case 59:return{tag:\"fm2_op1gain\",type:Inport};case 60:return{tag:\"fm2_op2gain\",type:Inport};case 61:return{tag:\"fm2_op3gain\",type:Inport};case 62:return{tag:\"fm2_gain\",type:Inport};case 63:return{tag:\"fm2_r_freq\",type:Inport};case 64:return{tag:\"fm2_r_c1ratio\",type:Inport};case 65:return{tag:\"fm2_r_c2ratio\",type:Inport};case 66:return{tag:\"fm2_r_c3ratio\",type:Inport};case 67:return{tag:\"fm2_r_3to1\",type:Inport};case 68:return{tag:\"fm2_r_2to1\",type:Inport};case 69:return{tag:\"fm2_r_3to2\",type:Inport};case 70:return{tag:\"fm2_r_c1release\",type:Inport};case 71:return{tag:\"fm2_r_c2release\",type:Inport};case 72:return{tag:\"fm2_r_c3release\",type:Inport};case 73:return{tag:\"fm2_r_op1gain\",type:Inport};case 74:return{tag:\"fm2_r_op2gain\",type:Inport};case 75:return{tag:\"fm2_r_op3gain\",type:Inport};case 76:return{tag:\"fm2_r_gain\",type:Inport};case 77:return{tag:\"perc_sound\",type:Inport};case 78:return{tag:\"perc_transpose\",type:Inport};case 79:return{tag:\"perc_velocity\",type:Inport};case 80:return{tag:\"perc_duration\",type:Inport}}return NullMessageInfo}assign_defaults(){}setEngineAndPatcher(e,t){this._engineInterface=e,this._parentPatcher=t}getEngine(){return this._engineInterface}getPatcher(){return this._parentPatcher}getTopLevelPatcher(){return this}}rnboObj=new RNBOPatcher;",
  "wasm": "",
  "wasmEncoding": "base64",
  "presets": [
    {
      "name": "main",
      "preset": {}
    }
  ]
}